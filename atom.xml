<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Panda&#39;s Blog</title>
  
  <subtitle>我的生活不曾取悦我，所以我创造了自己的生活 -- 可可·香奈儿</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-08-10T07:07:16.404Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Panda</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/3.html"/>
    <id>http://yoursite.com/posts/3.html</id>
    <published>2022-07-13T03:53:44.307Z</published>
    <updated>2022-08-10T07:07:16.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h1><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><h2 id="Dir"><a href="#Dir" class="headerlink" title="Dir"></a>Dir</h2><pre class="line-numbers language-none"><code class="language-none">.├── Firmware│&nbsp;&nbsp; ├── components│&nbsp;&nbsp; ├── examples│&nbsp;&nbsp; ├── src│&nbsp;&nbsp; └── maintain &lt;f&gt;├── Hardware│&nbsp;&nbsp; ├── pcb│&nbsp;&nbsp; ├── schematic│&nbsp;&nbsp; └── maintain &lt;f&gt;└── Software│├── components││&nbsp;&nbsp; ├── lib││&nbsp;&nbsp; └── modules│&nbsp;&nbsp; ├── src│└── maintain &lt;f&gt;└── specification &lt;f&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_exit<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span>_reset<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">module_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_new<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// create</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_del<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// destroy</span>        <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>_clean_up<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">obj_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Template&quot;&gt;&lt;a href=&quot;#Template&quot; class=&quot;headerlink&quot; title=&quot;Template&quot;&gt;&lt;/a&gt;Template&lt;/h1&gt;&lt;h2 id=&quot;Project&quot;&gt;&lt;a href=&quot;#Project&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/7.html"/>
    <id>http://yoursite.com/posts/7.html</id>
    <published>2022-06-21T08:22:06.748Z</published>
    <updated>2022-08-10T07:07:16.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=&quot;SQL&quot;&gt;&lt;/a&gt;SQL&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/14.html"/>
    <id>http://yoursite.com/posts/14.html</id>
    <published>2022-06-02T03:23:45.230Z</published>
    <updated>2022-08-10T07:07:16.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lighttpd-fastcgi-嵌入式交叉编译"><a href="#lighttpd-fastcgi-嵌入式交叉编译" class="headerlink" title="lighttpd+fastcgi 嵌入式交叉编译"></a>lighttpd+fastcgi 嵌入式交叉编译</h1><h2 id="lighttpd"><a href="#lighttpd" class="headerlink" title="lighttpd"></a>lighttpd</h2><p>在 编译 lighttpd 之前 我们需要先编译 pcre </p><p>pcre下载连接：<a href="https://www.pcre.org/">https://www.pcre.org/</a></p><p>使用的包名： <strong>pcre-8.45.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> -xvf pcre-8.45.tar.gz<span class="token builtin class-name">cd</span> pcre-8.45./configure <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-linux-gnueabihf-gcc --host<span class="token operator">=</span>arm-linux-gnueabihf <span class="token assign-left variable">target</span><span class="token operator">=</span>arm-linux --prefix<span class="token operator">=</span>/ --enable-utf8 --enable-unicode-properties --prefix<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/install<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lighttpd 下载连接：<a href="https://www.lighttpd.net/download/">https://www.lighttpd.net/download/</a></p><p>使用的包名： <strong>lighttpd-1.4.64.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> -xvf lighttpd-1.4.64.tar.gz<span class="token builtin class-name">cd</span> lighttpd-1.4.64<span class="token comment"># 编译之前可以先看一下help 如果</span>./configure --help./configure -prefix<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/install <span class="token punctuation">\</span>--host<span class="token operator">=</span>arm-linux-gnueabihf <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-linux-gnueabihf-gcc <span class="token punctuation">\</span><span class="token assign-left variable">RANLIB</span><span class="token operator">=</span>arm-linux-gnueabihf-ranlib <span class="token assign-left variable">STRIP</span><span class="token operator">=</span>arm-linux-gnueabihf-strip<span class="token punctuation">\</span>--enable-shared --without-mysql --without-zlib --without-bzip2 --with-pcre <span class="token punctuation">\</span>--disable-ipv6 <span class="token punctuation">\</span><span class="token assign-left variable">PCRECONFIG</span><span class="token operator">=</span>/path/to/pcre-8.45/install/bin/pcre-config <span class="token punctuation">\</span><span class="token assign-left variable">PCRE_LIB</span><span class="token operator">=</span>/path/to/pcre-8.45/install/lib/libpcre.a <span class="token punctuation">\</span><span class="token assign-left variable">CFLAGS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CFLAGS</span> -DHAVE_PCRE_H=1 -DHAVE_LIBPCRE=1 -I/home/shi/linux/web/new/pcre-8.45/install/include"</span><span class="token function">make</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lighttpd 测试</p><p>在 <code>lighttpd-1.4.64/Doc</code> 路径中存在着一些配置的 模板文件，根据模板文件进行响应的设置，然后在 lighttpd.conf 文件中配置的 <code>server.document-root</code>  的路径下，新建一个 <code>index.html</code> 文件，内容如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>我的第一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我的第一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /path/lighttpd/sbin./lighttpd -f <span class="token punctuation">..</span>/config/lighttpd.conf -m <span class="token punctuation">..</span>/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果 80 端口没有被占用，输入 ip  则可以看到内容</p><h2 id="fastcgi编译配置"><a href="#fastcgi编译配置" class="headerlink" title="fastcgi编译配置"></a>fastcgi编译配置</h2><p>lighttpd 下载连接：<a href="https://github.com/FastCGI-Archives/fcgi2.git">https://github.com/FastCGI-Archives/fcgi2.git</a></p><pre class="line-numbers language-none"><code class="language-none">tar -xzvf fcgi2-2.4.2.tar.gzcd fcgi2-2.4.2./autogen.sh ./configure CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ --host=arm-linux-gnueabihf --prefix=$(pwd)/installmakemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来修改一下lighttpd的配置，开启lighttpd对factcgi的支持。</p><p>首先在modules.conf找到如下行,并把include前面的#删除。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">## FastCGI (mod_fastcgi)##include "conf.d/fastcgi.conf"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这行配置意思很简单，就是包含conf.d文件夹下的fastcgi.conf配置文件，所以接下来修改fastcgi.conf这个文件<br>在这个文件中添加如下行：</p><pre class="line-numbers language-none"><code class="language-none">fastcgi.debug = 1fastcgi.server = (    "/test" =&gt;(        "test.fastcgi.handler" =&gt;(            "socket" =&gt; socket_dir + "/test/test.fastcgi.socket",            "check-local" =&gt; "disable",            "bin-path" =&gt; home_dir + "/cgi-bin/test.fcgi",            "max-procs" =&gt; 3,        )    ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把fastcgi编译生成的install文件夹拷贝到板子里，然后修改你的.bashrc文件PATH路径加入install/bin,LD_LIBRARY_PATH路径加入install/lib,或者直接把install/bin目录下文件复制到板子/bin,把install/lib目录下文件全部复制到板子/etc</p><h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;fcgi_stdio.h&gt;int main (void) {    while (FCGI_Accept() &gt;= 0) {        printf("Status: 200 OK\r\n\r\nHello World!\n");    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">arm-linux-gnueabihf-gcc -o test.fcgi test.c -L<span class="token punctuation">{</span>your path<span class="token punctuation">}</span>/install/lib <span class="token punctuation">\</span>-lfcgi -I<span class="token punctuation">{</span>your path<span class="token punctuation">}</span>/install/include<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把刚刚生成的test.fcgi复制到板子/lighttpd/cgi-bin目录下。然后重启服务器，在浏览器输入ip/test,可以看到返回了hello world。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lighttpd-fastcgi-嵌入式交叉编译&quot;&gt;&lt;a href=&quot;#lighttpd-fastcgi-嵌入式交叉编译&quot; class=&quot;headerlink&quot; title=&quot;lighttpd+fastcgi 嵌入式交叉编译&quot;&gt;&lt;/a&gt;lighttpd+fastc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/21.html"/>
    <id>http://yoursite.com/posts/21.html</id>
    <published>2022-05-31T07:57:06.112Z</published>
    <updated>2022-08-10T07:07:16.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> --helpUsage: <span class="token function">awk</span> <span class="token punctuation">[</span>POSIX or GNU style options<span class="token punctuation">]</span> -f progfile <span class="token punctuation">[</span>--<span class="token punctuation">]</span> <span class="token function">file</span> <span class="token punctuation">..</span>.Usage: <span class="token function">awk</span> <span class="token punctuation">[</span>POSIX or GNU style options<span class="token punctuation">]</span> <span class="token punctuation">[</span>--<span class="token punctuation">]</span> <span class="token string">'program'</span> <span class="token function">file</span> <span class="token punctuation">..</span>.POSIX options:          GNU long options: <span class="token punctuation">(</span>standard<span class="token punctuation">)</span>        -f progfile             --file<span class="token operator">=</span>progfile        -F fs                   --field-separator<span class="token operator">=</span>fs        -v <span class="token assign-left variable">var</span><span class="token operator">=</span>val              --assign<span class="token operator">=</span>var<span class="token operator">=</span>valShort options:          GNU long options: <span class="token punctuation">(</span>extensions<span class="token punctuation">)</span>        -b                      --characters-as-bytes        -c                      --traditional        -C                      --copyright        -d<span class="token punctuation">[</span>file<span class="token punctuation">]</span>                --dump-variables<span class="token punctuation">[</span><span class="token operator">=</span>file<span class="token punctuation">]</span>        -D<span class="token punctuation">[</span>file<span class="token punctuation">]</span>                --debug<span class="token punctuation">[</span><span class="token operator">=</span>file<span class="token punctuation">]</span>        -e <span class="token string">'program-text'</span>       --source<span class="token operator">=</span><span class="token string">'program-text'</span>        -E <span class="token function">file</span>                 --exec<span class="token operator">=</span>file        -g                      --gen-pot        -h                      --help        -i includefile          --include<span class="token operator">=</span>includefile        -I                      --trace        -l library              --load<span class="token operator">=</span>library        -L<span class="token punctuation">[</span>fatal<span class="token operator">|</span>invalid<span class="token operator">|</span>no-ext<span class="token punctuation">]</span>        --lint<span class="token punctuation">[</span><span class="token operator">=</span>fatal<span class="token operator">|</span>invalid<span class="token operator">|</span>no-ext<span class="token punctuation">]</span>        -M                      --bignum        -N                      --use-lc-numeric        -n                      --non-decimal-data        -o<span class="token punctuation">[</span>file<span class="token punctuation">]</span>                --pretty-print<span class="token punctuation">[</span><span class="token operator">=</span>file<span class="token punctuation">]</span>        -O                      --optimize        -p<span class="token punctuation">[</span>file<span class="token punctuation">]</span>                --profile<span class="token punctuation">[</span><span class="token operator">=</span>file<span class="token punctuation">]</span>        -P                      --posix        -r                      --re-interval        -s                      --no-optimize        -S                      --sandbox        -t                      --lint-old        -V                      --versionTo report bugs, see <span class="token function">node</span> <span class="token variable"><span class="token variable">`</span>Bugs' <span class="token keyword">in</span> <span class="token variable">`</span></span>gawk.info<span class="token string">'which is section `Reporting Problems and Bugs'</span> <span class="token keyword">in</span> theprinted version.  This same information may be found athttps://www.gnu.org/software/gawk/manual/html_node/Bugs.html.PLEASE <span class="token keyword">do</span> NOT try to report bugs by posting <span class="token keyword">in</span> comp.lang.awk,or by using a web forum such as Stack Overflow.<span class="token function">gawk</span> is a pattern scanning and processing language.By default it reads standard input and writes standard output.Examples:        <span class="token function">awk</span> <span class="token string">'{ sum += $1 }; END { print sum }'</span> <span class="token function">file</span>        <span class="token function">awk</span> -F: <span class="token string">'{ print $1 }'</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> <span class="token string">'/匹配的字符串/{print NR}'</span> 文件名<span class="token comment"># 获取某个字符串所在行数</span>$ <span class="token function">awk</span> <span class="token string">'END{print}'</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> <span class="token comment"># 打印最后一行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;awk&quot;&gt;&lt;a href=&quot;#awk&quot; class=&quot;headerlink&quot; title=&quot;awk&quot;&gt;&lt;/a&gt;awk&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/22.html"/>
    <id>http://yoursite.com/posts/22.html</id>
    <published>2022-05-31T07:57:06.112Z</published>
    <updated>2022-08-10T07:07:16.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">grep</span> --helpUsage: <span class="token function">grep</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. PATTERNS <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.Search <span class="token keyword">for</span> <span class="token for-or-select variable">PATTERNS</span> <span class="token keyword">in</span> each FILE.Example: <span class="token function">grep</span> -i <span class="token string">'hello world'</span> menu.h main.cPATTERNS can contain multiple patterns separated by newlines.Pattern selection and interpretation:  -E, --extended-regexp     PATTERNS are extended regular expressions  -F, --fixed-strings       PATTERNS are strings  -G, --basic-regexp        PATTERNS are basic regular expressions  -P, --perl-regexp         PATTERNS are Perl regular expressions  -e, --regexp<span class="token operator">=</span>PATTERNS     use PATTERNS <span class="token keyword">for</span> matching  -f, --file<span class="token operator">=</span>FILE           take PATTERNS from FILE  -i, --ignore-case         ignore <span class="token keyword">case</span> distinctions <span class="token keyword">in</span> patterns and data      --no-ignore-case      <span class="token keyword">do</span> not ignore <span class="token keyword">case</span> distinctions <span class="token punctuation">(</span>default<span class="token punctuation">)</span>  -w, --word-regexp         match only whole words  -x, --line-regexp         match only whole lines  -z, --null-data           a data line ends <span class="token keyword">in</span> <span class="token number">0</span> byte, not newlineMiscellaneous:  -s, --no-messages         suppress error messages  -v, --invert-match        <span class="token keyword">select</span> non-matching lines  -V, --version             display version information and <span class="token builtin class-name">exit</span>      --help                display this <span class="token builtin class-name">help</span> text and <span class="token builtin class-name">exit</span>Output control:  -m, --max-count<span class="token operator">=</span>NUM       stop after NUM selected lines  -b, --byte-offset         print the byte offset with output lines  -n, --line-number         print line number with output lines      --line-buffered       flush output on every line  -H, --with-filename       print <span class="token function">file</span> name with output lines  -h, --no-filename         suppress the <span class="token function">file</span> name prefix on output      --label<span class="token operator">=</span>LABEL         use LABEL as the standard input <span class="token function">file</span> name prefix  -o, --only-matching       show only nonempty parts of lines that match  -q, --quiet, --silent     suppress all normal output      --binary-files<span class="token operator">=</span>TYPE   assume that binary files are TYPE<span class="token punctuation">;</span>                            TYPE is <span class="token string">'binary'</span>, <span class="token string">'text'</span>, or <span class="token string">'without-match'</span>  -a, --text                equivalent to --binary-files<span class="token operator">=</span>text  -I                        equivalent to --binary-files<span class="token operator">=</span>without-match  -d, --directories<span class="token operator">=</span>ACTION  how to handle directories<span class="token punctuation">;</span>                            ACTION is <span class="token string">'read'</span>, <span class="token string">'recurse'</span>, or <span class="token string">'skip'</span>  -D, --devices<span class="token operator">=</span>ACTION      how to handle devices, FIFOs and sockets<span class="token punctuation">;</span>                            ACTION is <span class="token string">'read'</span> or <span class="token string">'skip'</span>  -r, --recursive           like --directories<span class="token operator">=</span>recurse  -R, --dereference-recursive  likewise, but follow all symlinks      --include<span class="token operator">=</span>GLOB        search only files that match GLOB <span class="token punctuation">(</span>a <span class="token function">file</span> pattern<span class="token punctuation">)</span>      --exclude<span class="token operator">=</span>GLOB        skip files that match GLOB      --exclude-from<span class="token operator">=</span>FILE   skip files that match any <span class="token function">file</span> pattern from FILE      --exclude-dir<span class="token operator">=</span>GLOB    skip directories that match GLOB  -L, --files-without-match  print only names of FILEs with no selected lines  -l, --files-with-matches  print only names of FILEs with selected lines  -c, --count               print only a count of selected lines per FILE  -T, --initial-tab         <span class="token function">make</span> tabs line up <span class="token punctuation">(</span>if needed<span class="token punctuation">)</span>  -Z, --null                print <span class="token number">0</span> byte after FILE nameContext control:  -B, --before-context<span class="token operator">=</span>NUM  print NUM lines of leading context  -A, --after-context<span class="token operator">=</span>NUM   print NUM lines of trailing context  -C, --context<span class="token operator">=</span>NUM         print NUM lines of output context  -NUM                      same as --context<span class="token operator">=</span>NUM      --group-separator<span class="token operator">=</span>SEP  print SEP on line between matches with context      --no-group-separator  <span class="token keyword">do</span> not print separator <span class="token keyword">for</span> matches with context      --color<span class="token punctuation">[</span><span class="token operator">=</span>WHEN<span class="token punctuation">]</span>,      --colour<span class="token punctuation">[</span><span class="token operator">=</span>WHEN<span class="token punctuation">]</span>       use markers to highlight the matching strings<span class="token punctuation">;</span>                            WHEN is <span class="token string">'always'</span>, <span class="token string">'never'</span>, or <span class="token string">'auto'</span>  -U, --binary              <span class="token keyword">do</span> not strip CR characters at EOL <span class="token punctuation">(</span>MSDOS/Windows<span class="token punctuation">)</span>When FILE is <span class="token string">'-'</span>, <span class="token builtin class-name">read</span> standard input.  With no FILE, <span class="token builtin class-name">read</span> <span class="token string">'.'</span> <span class="token keyword">if</span>recursive, <span class="token string">'-'</span> otherwise.  With fewer than two FILEs, assume -h.Exit status is <span class="token number">0</span> <span class="token keyword">if</span> any line is selected, <span class="token number">1</span> otherwise<span class="token punctuation">;</span><span class="token keyword">if</span> any error occurs and -q is not given, the <span class="token builtin class-name">exit</span> status is <span class="token number">2</span>.Report bugs to: bug-grep@gnu.orgGNU <span class="token function">grep</span> home page: <span class="token operator">&lt;</span>https://www.gnu.org/software/grep/<span class="token operator">&gt;</span>General <span class="token builtin class-name">help</span> using GNU software: <span class="token operator">&lt;</span>https://www.gnu.org/gethelp/<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">grep</span> -n <span class="token string">"想要查找的字符串名"</span> 文件名 <span class="token comment"># 获取字符串所在行数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;grep&quot;&gt;&lt;a href=&quot;#grep&quot; class=&quot;headerlink&quot; title=&quot;grep&quot;&gt;&lt;/a&gt;grep&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/23.html"/>
    <id>http://yoursite.com/posts/23.html</id>
    <published>2022-05-31T03:04:40.561Z</published>
    <updated>2022-08-10T07:07:16.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">➜  ~ <span class="token function">ip</span> --helpUsage: <span class="token function">ip</span> <span class="token punctuation">[</span> OPTIONS <span class="token punctuation">]</span> OBJECT <span class="token punctuation">{</span> COMMAND <span class="token operator">|</span> <span class="token builtin class-name">help</span> <span class="token punctuation">}</span>       <span class="token function">ip</span> <span class="token punctuation">[</span> -force <span class="token punctuation">]</span> -batch filenamewhere  OBJECT :<span class="token operator">=</span> <span class="token punctuation">{</span> address <span class="token operator">|</span> addrlabel <span class="token operator">|</span> amt <span class="token operator">|</span> fou <span class="token operator">|</span> <span class="token builtin class-name">help</span> <span class="token operator">|</span> ila <span class="token operator">|</span> ioam <span class="token operator">|</span> l2tp <span class="token operator">|</span>                   <span class="token function">link</span> <span class="token operator">|</span> macsec <span class="token operator">|</span> maddress <span class="token operator">|</span> monitor <span class="token operator">|</span> mptcp <span class="token operator">|</span> mroute <span class="token operator">|</span> mrule <span class="token operator">|</span>                   neighbor <span class="token operator">|</span> neighbour <span class="token operator">|</span> netconf <span class="token operator">|</span> netns <span class="token operator">|</span> nexthop <span class="token operator">|</span> ntable <span class="token operator">|</span>                   ntbl <span class="token operator">|</span> route <span class="token operator">|</span> rule <span class="token operator">|</span> sr <span class="token operator">|</span> tap <span class="token operator">|</span> tcpmetrics <span class="token operator">|</span>                   token <span class="token operator">|</span> tunnel <span class="token operator">|</span> tuntap <span class="token operator">|</span> vrf <span class="token operator">|</span> xfrm <span class="token punctuation">}</span>       OPTIONS :<span class="token operator">=</span> <span class="token punctuation">{</span> -V<span class="token punctuation">[</span>ersion<span class="token punctuation">]</span> <span class="token operator">|</span> -s<span class="token punctuation">[</span>tatistics<span class="token punctuation">]</span> <span class="token operator">|</span> -d<span class="token punctuation">[</span>etails<span class="token punctuation">]</span> <span class="token operator">|</span> -r<span class="token punctuation">[</span>esolve<span class="token punctuation">]</span> <span class="token operator">|</span>                    -h<span class="token punctuation">[</span>uman-readable<span class="token punctuation">]</span> <span class="token operator">|</span> -iec <span class="token operator">|</span> -j<span class="token punctuation">[</span>son<span class="token punctuation">]</span> <span class="token operator">|</span> -p<span class="token punctuation">[</span>retty<span class="token punctuation">]</span> <span class="token operator">|</span>                    -f<span class="token punctuation">[</span>amily<span class="token punctuation">]</span> <span class="token punctuation">{</span> inet <span class="token operator">|</span> inet6 <span class="token operator">|</span> mpls <span class="token operator">|</span> bridge <span class="token operator">|</span> <span class="token function">link</span> <span class="token punctuation">}</span> <span class="token operator">|</span>                    -4 <span class="token operator">|</span> -6 <span class="token operator">|</span> -M <span class="token operator">|</span> -B <span class="token operator">|</span> -0 <span class="token operator">|</span>                    -l<span class="token punctuation">[</span>oops<span class="token punctuation">]</span> <span class="token punctuation">{</span> maximum-addr-flush-attempts <span class="token punctuation">}</span> <span class="token operator">|</span> -br<span class="token punctuation">[</span>ief<span class="token punctuation">]</span> <span class="token operator">|</span>                    -o<span class="token punctuation">[</span>neline<span class="token punctuation">]</span> <span class="token operator">|</span> -t<span class="token punctuation">[</span>imestamp<span class="token punctuation">]</span> <span class="token operator">|</span> -ts<span class="token punctuation">[</span>hort<span class="token punctuation">]</span> <span class="token operator">|</span> -b<span class="token punctuation">[</span>atch<span class="token punctuation">]</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">|</span>                    -rc<span class="token punctuation">[</span>vbuf<span class="token punctuation">]</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">|</span> -n<span class="token punctuation">[</span>etns<span class="token punctuation">]</span> name <span class="token operator">|</span> -N<span class="token punctuation">[</span>umeric<span class="token punctuation">]</span> <span class="token operator">|</span> -a<span class="token punctuation">[</span>ll<span class="token punctuation">]</span> <span class="token operator">|</span>                    -c<span class="token punctuation">[</span>olor<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ip&quot;&gt;&lt;a href=&quot;#ip&quot; class=&quot;headerlink&quot; title=&quot;ip&quot;&gt;&lt;/a&gt;ip&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/27.html"/>
    <id>http://yoursite.com/posts/27.html</id>
    <published>2022-05-31T03:00:04.255Z</published>
    <updated>2022-08-10T07:07:16.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WC"><a href="#WC" class="headerlink" title="WC"></a>WC</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">wc</span> --helpUsage: <span class="token function">wc</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.  or:  <span class="token function">wc</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. --files0-from<span class="token operator">=</span>FPrint newline, word, and byte counts <span class="token keyword">for</span> each FILE, and a total line <span class="token keyword">if</span><span class="token function">more</span> than one FILE is specified.  A word is a non-zero-length sequence ofprintable characters delimited by white space.With no FILE, or when FILE is -, <span class="token builtin class-name">read</span> standard input.The options below may be used to <span class="token keyword">select</span> <span class="token function">which</span> counts are printed, always <span class="token keyword">in</span>the following order: newline, word, character, byte, maximum line length.  -c, --bytes            print the byte counts  -m, --chars            print the character counts  -l, --lines            print the newline counts      --files0-from<span class="token operator">=</span>F    <span class="token builtin class-name">read</span> input from the files specified by                           NUL-terminated names <span class="token keyword">in</span> <span class="token function">file</span> F<span class="token punctuation">;</span>                           If F is - <span class="token keyword">then</span> <span class="token builtin class-name">read</span> names from standard input  -L, --max-line-length  print the maximum display width  -w, --words            print the word counts      --help        display this <span class="token builtin class-name">help</span> and <span class="token builtin class-name">exit</span>      --version     output version information and <span class="token builtin class-name">exit</span>GNU coreutils online help: <span class="token operator">&lt;</span>https://www.gnu.org/software/coreutils/<span class="token operator">&gt;</span>Full documentation <span class="token operator">&lt;</span>https://www.gnu.org/software/coreutils/wc<span class="token operator">&gt;</span>or available locally via: info <span class="token string">'(coreutils) wc invocation'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WC&quot;&gt;&lt;a href=&quot;#WC&quot; class=&quot;headerlink&quot; title=&quot;WC&quot;&gt;&lt;/a&gt;WC&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/6.html"/>
    <id>http://yoursite.com/posts/6.html</id>
    <published>2022-05-25T03:14:10.683Z</published>
    <updated>2022-08-10T07:07:16.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xxx-xxx-xxx-域名解析错误"><a href="#xxx-xxx-xxx-域名解析错误" class="headerlink" title="xxx.xxx.xxx 域名解析错误"></a>xxx.xxx.xxx 域名解析错误</h1><p><img src="/posts/6/image-20220525111616369.png" alt="image-20220525111616369"></p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><ul><li><p>查看本机使用的 dns 服务器地址</p></li><li><p>查看该 dns 服务器解析域名 得到的 ip 地址是否正确</p></li><li><p>更换其他的 dns 服务器进行对比</p></li></ul><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># windows# 查看 dns 服务器&gt; ipconfig /all # 或者在网络适配其中查看网卡的使用的 dns 服务器配置 &gt; nslookup &lt;domain name&gt; &lt;dns_ip&gt; # 使用 dns 服务器解析域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用-dns-服务器"><a href="#常用-dns-服务器" class="headerlink" title="常用 dns 服务器"></a>常用 dns 服务器</h2><div class="table-container"><table><thead><tr><th style="text-align:center">提供商</th><th style="text-align:center">DNS地址</th><th style="text-align:center">描述</th><th style="text-align:center">推荐指数</th></tr></thead><tbody><tr><td style="text-align:center">114DNS</td><td style="text-align:center">114.114.114.114 / 114.114.115.115</td><td style="text-align:center">高速、稳定、但劫持用户</td><td style="text-align:center">$\star$</td></tr><tr><td style="text-align:center">阿里DNS</td><td style="text-align:center">223.5.5.5 / 223.6.6.6</td><td style="text-align:center">极速、稳定、智能</td><td style="text-align:center">$\star\star\star\star$</td></tr><tr><td style="text-align:center">百度DNS</td><td style="text-align:center">180.76.76.76</td><td style="text-align:center">云防护、无劫持</td><td style="text-align:center">$\star\star\star\star$</td></tr><tr><td style="text-align:center">DNS派</td><td style="text-align:center">电信：101.226.4.6<br>联通：123.125.81.6<br>移动：101.226.4.6</td><td style="text-align:center">高速、稳定、安全</td><td style="text-align:center">$\star\star\star\star$</td></tr><tr><td style="text-align:center">One DNS</td><td style="text-align:center">南方：112.124.47.27<br>北方：114.215.126.16</td><td style="text-align:center">广告拦截、恶意网站屏蔽</td><td style="text-align:center">$\star\star\star\star$</td></tr><tr><td style="text-align:center">Google DNS</td><td style="text-align:center">8.8.8.8 / 8.8.4.4</td><td style="text-align:center">高速、稳定、安全</td><td style="text-align:center">$\star\star\star$</td></tr><tr><td style="text-align:center">Open DNS</td><td style="text-align:center">208.67.222.222 / 208.67.220.220</td><td style="text-align:center">高速、稳定、安全</td><td style="text-align:center">$\star\star\star$</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xxx-xxx-xxx-域名解析错误&quot;&gt;&lt;a href=&quot;#xxx-xxx-xxx-域名解析错误&quot; class=&quot;headerlink&quot; title=&quot;xxx.xxx.xxx 域名解析错误&quot;&gt;&lt;/a&gt;xxx.xxx.xxx 域名解析错误&lt;/h1&gt;&lt;p&gt;&lt;img s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/15.html"/>
    <id>http://yoursite.com/posts/15.html</id>
    <published>2022-05-24T10:58:27.288Z</published>
    <updated>2022-08-10T07:07:16.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wpa-supplicant-交叉编译"><a href="#wpa-supplicant-交叉编译" class="headerlink" title="wpa_supplicant 交叉编译"></a>wpa_supplicant 交叉编译</h1><p>[toc]</p><p>wpa_supplicant 的编译 依赖 libnl 库、libssl库，因此我们需要先编译好这两个库。</p><blockquote> 注意： 在编译之前需将 交叉工具链 导出到环境变量 或者 使用交叉工具变量的路径   </blockquote><h2 id="libssl"><a href="#libssl" class="headerlink" title="libssl"></a>libssl</h2><p>下载连接： <a href="https://www.openssl.org/source/">https://www.openssl.org/source/</a>  </p><p>使用的包名： <strong>openssl-1.1.1o.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tar</span> -xvf openssl-1.1.1o.tar.gz$ <span class="token builtin class-name">cd</span> openssl-1.1.1o$ <span class="token function">mkdir</span> _install_arm$ ./config no-asm shared --prefix<span class="token operator">=</span><span class="token variable">${<span class="token environment constant">PWD</span>}</span>/_install_arm --cross-compile-prefix<span class="token operator">=</span>arm-linux-gnueabihf- $ <span class="token function">make</span> <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-linux-gnueabihf-gcc$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意</p><p>在编译过程中，如果出现如下错误：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">arm-linux-gnueabihf-gcc: error: unrecognized <span class="token builtin class-name">command</span> line option ‘-m64’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则需要打开Makefile 查找里面的 <code>-m64</code>，并将其删除即可</p></li></ul><p>使用的包名： <strong>openssl-3.0.0.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tar</span> -xvf openssl-3.0.0.tar.gz$ <span class="token builtin class-name">cd</span> openssl-3.0.0$ <span class="token function">mkdir</span> _install_arm<span class="token comment"># 交叉工具链(编译器)为64位时</span>$ ./config no-asm -shared --prefix<span class="token operator">=</span><span class="token variable">${<span class="token environment constant">PWD</span>}</span>/_install_arm <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>arm-linux-gnueabihf- <span class="token assign-left variable">CC</span><span class="token operator">=</span>gcc$ <span class="token function">make</span>$ <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 交叉工具链(编译器)为32位时</span><span class="token comment"># linux-generic32表示操作系统是32位的</span><span class="token comment"># no-async表示不使用ucontext库，如果需要使用则去掉</span>$ ./Configure linux-generic32 no-asm -shared no-async --prefix<span class="token operator">=</span><span class="token variable">${<span class="token environment constant">PWD</span>}</span>/_install_arm <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>arm-linux-gnueabihf- <span class="token assign-left variable">CC</span><span class="token operator">=</span>gcc$ <span class="token function">make</span>$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="libnl"><a href="#libnl" class="headerlink" title="libnl"></a>libnl</h2><p>下载连接：<a href="https://www.linuxfromscratch.org/blfs/view/svn/basicnet/libnl.html">https://www.linuxfromscratch.org/blfs/view/svn/basicnet/libnl.html</a></p><p>使用的包名： <strong>libnl-3.6.0.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tar</span> -xvf libnl-3.6.0.tar.gz$ <span class="token builtin class-name">cd</span> libnl-3.6.0$ <span class="token function">mkdir</span> _install_arm$ ./configure --host<span class="token operator">=</span>arm-linux-gnueabihf --prefix<span class="token operator">=</span><span class="token variable">${<span class="token environment constant">PWD</span>}</span>/_install_arm$ <span class="token function">make</span>$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wpa-supplicant"><a href="#wpa-supplicant" class="headerlink" title="wpa_supplicant"></a>wpa_supplicant</h2><p>下载连接：<a href="http://w1.fi/releases/">http://w1.fi/releases/</a></p><p>使用的包名：<strong>wpa_supplicant-2.9.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tar</span> -xvf wpa_supplicant-2.9.tar.gz$ <span class="token builtin class-name">cd</span> wpa_supplicant-2.9/wpa_supplicant$ <span class="token function">cp</span> ./defconfig ./.config<span class="token comment"># 在 Makefile 中添加 libssl 和 libnl 库的路径</span><span class="token comment"># CFLAGS+=-I/path/to/openssl-1.1.1o/_install_arm/include  </span><span class="token comment"># LIBS+=-L/path/to/openssl-1.1.1o/_install_arm/lib </span><span class="token comment"># CFLAGS+=-I/path/to/libnl-3.6.0/_install_arm/include  </span><span class="token comment"># LIBS+=-L/path/to/libnl-3.6.0/_install_arm/lib</span>$ <span class="token function">vim</span> Makefile  $ <span class="token function">make</span> <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-himix100-linux-gcc <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;wpa-supplicant-交叉编译&quot;&gt;&lt;a href=&quot;#wpa-supplicant-交叉编译&quot; class=&quot;headerlink&quot; title=&quot;wpa_supplicant 交叉编译&quot;&gt;&lt;/a&gt;wpa_supplicant 交叉编译&lt;/h1&gt;&lt;p&gt;[t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/1.html"/>
    <id>http://yoursite.com/posts/1.html</id>
    <published>2022-05-20T04:42:46.608Z</published>
    <updated>2022-08-10T07:07:16.402Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/29.html"/>
    <id>http://yoursite.com/posts/29.html</id>
    <published>2022-05-20T04:41:54.569Z</published>
    <updated>2022-08-10T07:07:16.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-IO模式"><a href="#Linux-IO模式" class="headerlink" title="Linux IO模式"></a>Linux IO模式</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-IO模式&quot;&gt;&lt;a href=&quot;#Linux-IO模式&quot; class=&quot;headerlink&quot; title=&quot;Linux IO模式&quot;&gt;&lt;/a&gt;Linux IO模式&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/30.html"/>
    <id>http://yoursite.com/posts/30.html</id>
    <published>2022-05-20T04:41:12.659Z</published>
    <updated>2022-08-10T07:07:16.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;epoll&quot;&gt;&lt;a href=&quot;#epoll&quot; class=&quot;headerlink&quot; title=&quot;epoll&quot;&gt;&lt;/a&gt;epoll&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/31.html"/>
    <id>http://yoursite.com/posts/31.html</id>
    <published>2022-05-20T04:41:12.659Z</published>
    <updated>2022-08-10T07:07:16.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Select&quot;&gt;&lt;a href=&quot;#Select&quot; class=&quot;headerlink&quot; title=&quot;Select&quot;&gt;&lt;/a&gt;Select&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/2.html"/>
    <id>http://yoursite.com/posts/2.html</id>
    <published>2022-05-20T02:11:17.378Z</published>
    <updated>2022-08-10T07:07:16.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h1><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Readme&quot;&gt;&lt;a href=&quot;#Readme&quot; class=&quot;headerlink&quot; title=&quot;Readme&quot;&gt;&lt;/a&gt;Readme&lt;/h1&gt;&lt;h2 id=&quot;Project&quot;&gt;&lt;a href=&quot;#Project&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/9.html"/>
    <id>http://yoursite.com/posts/9.html</id>
    <published>2022-05-20T02:11:17.330Z</published>
    <updated>2022-08-10T07:07:16.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go-语言结构"><a href="#Go-语言结构" class="headerlink" title="Go 语言结构"></a>Go 语言结构</h2><ul><li>包声明</li><li>引入包</li><li>函数</li><li>变量</li><li>语句 &amp; 表达式</li><li>注释</li></ul><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">//  the defineition of package namepackage main// Importing external packagesimport "fmt"func main() {fmt.Println("Hello, World!");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ go run filename.go # Execute a programer of go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">var identifier typevar identifier1, identifier2 type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package mainimport "fmt"func main() {//  assign the type of variate, if not initialized, it will be the defaultvar a string = "Hello world, a!"fmt.Println(a)// auto var b = "Hello world, b!"fmt.Println(b)// if variate was declared,  an error is generated at compile timec := "Hello world, c!"fmt.Println(c)// mutliple variable declarationsvar d, e, f string = "ddd", "eee", "fff"fmt.Println(d, e, f)var g, h, i = "ggg", "hhh", "iii"fmt.Println(g, h, i)j, k, l := "jjj", "kkk", "lll"fmt.Println(n, k, l)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">// the formatconst identifier [type] = valueconst identifier = valueconst identifier1, identifier2 = value1, value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package&nbsp;main    import&nbsp;"fmt"    func&nbsp;main()&nbsp;{  &nbsp; &nbsp;&nbsp;const&nbsp;(  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a&nbsp;=&nbsp;iota &nbsp;&nbsp;//0  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//1  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//2  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; d&nbsp;=&nbsp;"ha"&nbsp;&nbsp;&nbsp;//独立值，iota += 1  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//"ha" &nbsp; iota += 1  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f&nbsp;=&nbsp;100&nbsp;&nbsp; &nbsp;//iota +=1  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//100 &nbsp;iota +=1  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; h&nbsp;=&nbsp;iota &nbsp;&nbsp;//7,恢复计数  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//8  &nbsp; &nbsp;&nbsp;)  &nbsp; &nbsp; fmt.Println(a,b,c,d,e,f,g,h,i)  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package&nbsp;main    import&nbsp;"fmt"  const&nbsp;(  &nbsp; &nbsp;&nbsp;i=1&lt;&lt;iota  // 1&nbsp; &nbsp; j=3&lt;&lt;iota  // 3 &lt;&lt; 1&nbsp; &nbsp; k   // 3 &lt;&lt; 2&nbsp; &nbsp; l   // 3 &lt;&lt; 3)    func&nbsp;main()&nbsp;{  &nbsp; &nbsp; fmt.Println("i=",i)  &nbsp; &nbsp; fmt.Println("j=",j)  &nbsp; &nbsp; fmt.Println("k=",k)  &nbsp; &nbsp; fmt.Println("l=",l)  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">if condition {} else {}switch var1 {case val1:...case val2:...default:...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package&nbsp;main    import&nbsp;"fmt"    func&nbsp;main()&nbsp;{  &nbsp; &nbsp;/* 定义局部变量 */  &nbsp; &nbsp;var&nbsp;grade&nbsp;string&nbsp;=&nbsp;"B"  &nbsp; &nbsp;var&nbsp;marks&nbsp;int&nbsp;=&nbsp;90    &nbsp; &nbsp;switch&nbsp;marks&nbsp;{  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;90:&nbsp;grade&nbsp;=&nbsp;"A"  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;80:&nbsp;grade&nbsp;=&nbsp;"B"  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;50,60,70&nbsp;:&nbsp;grade&nbsp;=&nbsp;"C"  &nbsp; &nbsp; &nbsp;&nbsp;default:&nbsp;grade&nbsp;=&nbsp;"D"&nbsp;&nbsp;  &nbsp; &nbsp;}    &nbsp; &nbsp;switch&nbsp;{  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;grade&nbsp;==&nbsp;"A"&nbsp;:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("优秀!\n"&nbsp;)&nbsp;&nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;grade&nbsp;==&nbsp;"B",&nbsp;grade&nbsp;==&nbsp;"C"&nbsp;:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("良好\n"&nbsp;)&nbsp;&nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;grade&nbsp;==&nbsp;"D"&nbsp;:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("及格\n"&nbsp;)&nbsp;&nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;grade&nbsp;==&nbsp;"F":  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("不及格\n"&nbsp;)  &nbsp; &nbsp; &nbsp;&nbsp;default:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("差\n"&nbsp;);  &nbsp; &nbsp;}  &nbsp; &nbsp;fmt.Printf("你的等级是 %s\n",&nbsp;grade&nbsp;);&nbsp;&nbsp; &nbsp; &nbsp;  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package&nbsp;main    import&nbsp;"fmt"    func&nbsp;main()&nbsp;{  &nbsp; &nbsp;var&nbsp;x&nbsp;interface{}  &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp;switch&nbsp;i&nbsp;:=&nbsp;x.(type)&nbsp;{  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;nil:&nbsp;&nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf(" x 的类型 :%T",i)&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;int:&nbsp;&nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("x 是 int 型")&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;float64:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("x 是 float64 型")&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;func(int)&nbsp;float64:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("x 是 func(int) 型")&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;bool,&nbsp;string:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("x 是 bool 或 string 型"&nbsp;)&nbsp;&nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;default:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("未知型")&nbsp;&nbsp; &nbsp;  &nbsp; &nbsp;}&nbsp;&nbsp;  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package&nbsp;main    import&nbsp;"fmt"    func&nbsp;main()&nbsp;{    &nbsp; &nbsp;&nbsp;switch&nbsp;{  &nbsp; &nbsp;&nbsp;case&nbsp;false:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("1、case 条件语句为 false")  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;fallthrough  &nbsp; &nbsp;&nbsp;case&nbsp;true:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("2、case 条件语句为 true")  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;fallthrough  &nbsp; &nbsp;&nbsp;case&nbsp;false:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("3、case 条件语句为 false")  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;fallthrough  &nbsp; &nbsp;&nbsp;case&nbsp;true:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("4、case 条件语句为 true")  &nbsp; &nbsp;&nbsp;case&nbsp;false:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("5、case 条件语句为 false")  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;fallthrough  &nbsp; &nbsp;&nbsp;default:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("6、默认 case")  &nbsp; &nbsp;&nbsp;}  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">for init; condition; popst { }for condition { }for { }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">// Loop control statementbreakcontinuegoto <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">// Formatfunc &lt;function_name&gt;([parameter_list]) [return_types] {&lt;function_body&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">var &lt;variable_name&gt; [&lt;size&gt;] &lt;variable_type&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go-语言结构&quot;&gt;&lt;a href=&quot;#Go-语言结构&quot; class=&quot;headerlink&quot; title=&quot;Go 语言结构&quot;&gt;&lt;/a&gt;Go 语言结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;包声明&lt;/li&gt;
&lt;li&gt;引入包&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;变量&lt;/li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/4.html"/>
    <id>http://yoursite.com/posts/4.html</id>
    <published>2022-05-17T06:59:42.274Z</published>
    <updated>2022-08-10T07:07:16.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><pre class="line-numbers language-none"><code class="language-none">&lt;主版本号&gt;.&lt;子版本号&gt;.&lt;修订版本号&gt;.&lt;日期&gt;_&lt;版本阶段&gt;如： V1.2.3.20220513_rc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="版本阶段"><a href="#版本阶段" class="headerlink" title="版本阶段"></a>版本阶段</h2><ul><li><p>Base：此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，但是页面中的功能都没有做完整的实现，只是作为整体网站的一个基础架构。</p></li><li><p>Alpha：此版本标识该软件在此阶段主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改。</p></li><li><p>Beta：该版本相对于 $\alpha$ 版本已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对象是软件的UI。</p></li><li><p>RC：该版本已经相当成熟了，基本不存在导致错误的 Bug，与即将发行的正式版相差无几。</p></li><li><p>Release： 该版本意为 “最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下， Release 不会意单词形式出现在软件封面上，取而代之的是符号 （R）；</p></li></ul><h2 id="其他命名"><a href="#其他命名" class="headerlink" title="其他命名"></a>其他命名</h2><ul><li>standard</li><li>full version</li><li>lts</li><li>ultimate</li><li>alpha</li><li>beta</li><li>demo</li><li>enhance</li><li>free</li><li>lts</li><li>release</li><li>rc</li><li>upgrade</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;&amp;lt;主</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/25.html"/>
    <id>http://yoursite.com/posts/25.html</id>
    <published>2022-05-13T02:22:37.925Z</published>
    <updated>2022-08-10T07:07:16.478Z</updated>
    
    <content type="html"><![CDATA[<p>重复执行某个命令来观察其输出的变化， 直到接受到中断信号。</p><h2 id="option"><a href="#option" class="headerlink" title="option"></a>option</h2><ul><li>-d: 高亮两次输出差异的地方</li><li>-n &lt;&gt;: 设置两次命令执行的间隔</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;重复执行某个命令来观察其输出的变化， 直到接受到中断信号。&lt;/p&gt;
&lt;h2 id=&quot;option&quot;&gt;&lt;a href=&quot;#option&quot; class=&quot;headerlink&quot; title=&quot;option&quot;&gt;&lt;/a&gt;option&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;-d: 高亮两次输出差</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/13.html"/>
    <id>http://yoursite.com/posts/13.html</id>
    <published>2022-05-12T04:21:45.759Z</published>
    <updated>2022-08-10T07:07:16.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="libpng-交叉编译"><a href="#libpng-交叉编译" class="headerlink" title="libpng 交叉编译"></a>libpng 交叉编译</h1><h2 id="zlib-编译"><a href="#zlib-编译" class="headerlink" title="zlib 编译"></a>zlib 编译</h2><p><a href="https://zlib.net/">官网</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里使用的 github 仓库, version： v1.2.12</span><span class="token function">git</span> clone git@github.com:iPandamen/zlib.git<span class="token builtin class-name">cd</span> zlib<span class="token function">mkdir</span> arm-build<span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-linux-gnueabihf-gcc ./configure --prefix<span class="token operator">=</span><span class="token environment constant">$PWD</span>/arm-build<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="libpng-编译"><a href="#libpng-编译" class="headerlink" title="libpng 编译"></a>libpng 编译</h2><p><a href="http://www.libpng.org/pub/png/libpng.html">官网</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> xf libpng-1.6.37.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> libpng-1.6.37<span class="token builtin class-name">export</span> <span class="token assign-left variable">CPPFLAGS</span><span class="token operator">=</span><span class="token string">"-I/path/to/zlib/arm-build/include"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span><span class="token string">"-L/path/to/zlib/arm-build/lib"</span>./configure <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-linux-gnueabi-gcc --prefix<span class="token operator">=</span><span class="token environment constant">$PWD</span>/_install --host<span class="token operator">=</span>arm-linux<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 libpng 编译的时候出现了错误<br></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dangerous relocation: unsupported relocation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><p>原因未知：<br>解决办法：<br>在zlib的 编译中 为 gcc 添加 <code>-fPIC</code> 选项</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;libpng-交叉编译&quot;&gt;&lt;a href=&quot;#libpng-交叉编译&quot; class=&quot;headerlink&quot; title=&quot;libpng 交叉编译&quot;&gt;&lt;/a&gt;libpng 交叉编译&lt;/h1&gt;&lt;h2 id=&quot;zlib-编译&quot;&gt;&lt;a href=&quot;#zlib-编译&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/20.html"/>
    <id>http://yoursite.com/posts/20.html</id>
    <published>2022-04-29T08:07:53.760Z</published>
    <updated>2022-08-10T07:37:45.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="valgrind"><a href="#valgrind" class="headerlink" title="valgrind"></a>valgrind</h1><h2 id="option"><a href="#option" class="headerlink" title="option"></a>option</h2><ul><li><code>--log-fd=N</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ valgrind --leak-check<span class="token operator">=</span>yes ./a.out arg1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;valgrind&quot;&gt;&lt;a href=&quot;#valgrind&quot; class=&quot;headerlink&quot; title=&quot;valgrind&quot;&gt;&lt;/a&gt;valgrind&lt;/h1&gt;&lt;h2 id=&quot;option&quot;&gt;&lt;a href=&quot;#option&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/posts/24.html"/>
    <id>http://yoursite.com/posts/24.html</id>
    <published>2022-04-28T03:56:51.518Z</published>
    <updated>2022-08-10T07:07:16.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sed</span> --helpUsage: <span class="token function">sed</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">{</span>script-only-if-no-other-script<span class="token punctuation">}</span> <span class="token punctuation">[</span>input-file<span class="token punctuation">]</span><span class="token punctuation">..</span>.  -n, --quiet, --silent                 suppress automatic printing of pattern space      --debug                 annotate program execution  -e script, --expression<span class="token operator">=</span>script                 <span class="token function">add</span> the script to the commands to be executed  -f script-file, --file<span class="token operator">=</span>script-file                 <span class="token function">add</span> the contents of script-file to the commands to be executed  --follow-symlinks                 follow symlinks when processing <span class="token keyword">in</span> place  -i<span class="token punctuation">[</span>SUFFIX<span class="token punctuation">]</span>, --in-place<span class="token punctuation">[</span><span class="token operator">=</span>SUFFIX<span class="token punctuation">]</span>                 edit files <span class="token keyword">in</span> place <span class="token punctuation">(</span>makes backup <span class="token keyword">if</span> SUFFIX supplied<span class="token punctuation">)</span>  -l N, --line-length<span class="token operator">=</span>N                 specify the desired line-wrap length <span class="token keyword">for</span> the `l' <span class="token builtin class-name">command</span>  --posix                 disable all GNU extensions.  -E, -r, --regexp-extended                 use extended regular expressions <span class="token keyword">in</span> the script                 <span class="token punctuation">(</span>for portability use POSIX -E<span class="token punctuation">)</span>.  -s, --separate                 consider files as separate rather than as a single,                 continuous long stream.      --sandbox                 operate <span class="token keyword">in</span> sandbox mode <span class="token punctuation">(</span>disable e/r/w commands<span class="token punctuation">)</span>.  -u, --unbuffered                 load minimal amounts of data from the input files and flush                 the output buffers <span class="token function">more</span> often  -z, --null-data                 separate lines by NUL characters      --help     display this <span class="token builtin class-name">help</span> and <span class="token builtin class-name">exit</span>      --version  output version information and <span class="token builtin class-name">exit</span>If no -e, --expression, -f, or --file option is given, <span class="token keyword">then</span> the firstnon-option argument is taken as the <span class="token function">sed</span> script to interpret.  Allremaining arguments are names of input files<span class="token punctuation">;</span> <span class="token keyword">if</span> no input files arespecified, <span class="token keyword">then</span> the standard input is read.GNU <span class="token function">sed</span> home page: <span class="token operator">&lt;</span>https://www.gnu.org/software/sed/<span class="token operator">&gt;</span>.General <span class="token builtin class-name">help</span> using GNU software: <span class="token operator">&lt;</span>https://www.gnu.org/gethelp/<span class="token operator">&gt;</span>.E-mail bug reports to: <span class="token operator">&lt;</span>bug-sed@gnu.org<span class="token operator">&gt;</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 删除某行</span>$ <span class="token function">sed</span> <span class="token string">'1d'</span> <span class="token function">file</span>              <span class="token comment">#删除第一行 </span>$ <span class="token function">sed</span> <span class="token string">'$d'</span> <span class="token function">file</span>              <span class="token comment">#删除最后一行</span>$ <span class="token function">sed</span> <span class="token string">'1,2d'</span> <span class="token function">file</span>           <span class="token comment">#删除第一行到第二行</span>$ <span class="token function">sed</span> <span class="token string">'2,$d'</span> <span class="token function">file</span>           <span class="token comment">#删除第二行到最后一行</span><span class="token comment"># 显示某行</span>$ <span class="token function">sed</span> -n <span class="token string">'1p'</span> <span class="token function">file</span>           <span class="token comment">#显示第一行 </span>$ <span class="token function">sed</span> -n <span class="token string">'$p'</span> <span class="token function">file</span>           <span class="token comment">#显示最后一行</span>$ <span class="token function">sed</span> -n <span class="token string">'1,2p'</span> <span class="token function">file</span>        <span class="token comment">#显示第一行到第二行</span>$ <span class="token function">sed</span> -n <span class="token string">'2,$p'</span> <span class="token function">file</span>        <span class="token comment">#显示第二行到最后一行</span><span class="token comment"># 使用模式进行查询</span>$ <span class="token function">sed</span> -n <span class="token string">'/ruby/p'</span> <span class="token function">file</span>    <span class="token comment">#查询包括关键字ruby所在所有行</span>$ <span class="token function">sed</span> -n <span class="token string">'/\$/p'</span> <span class="token function">file</span>        <span class="token comment">#查询包括关键字$所在所有行，使用反斜线\屏蔽特殊含义</span><span class="token comment"># 代替一行或多行</span>$ <span class="token function">sed</span> <span class="token string">'1c Hi'</span> <span class="token function">file</span>                <span class="token comment">#第一行代替为Hi</span> Hi ruby is me,welcome to my blog. end$ <span class="token function">sed</span> <span class="token string">'1,2c Hi'</span> <span class="token function">file</span>             <span class="token comment">#第一行到第二行代替为Hi</span> Hi end<span class="token comment"># 替换一行中的某部分</span><span class="token comment"># 格式：sed 's/要替换的字符串/新的字符串/g'   （要替换的字符串可以用正则表达式）</span>$ <span class="token function">sed</span> -n <span class="token string">'/ruby/p'</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/ruby/bird/g'</span>    <span class="token comment">#替换ruby为bird</span>$ <span class="token function">sed</span> -n <span class="token string">'/ruby/p'</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/ruby//g'</span>        <span class="token comment">#删除ruby</span><span class="token comment"># 插入</span>$ <span class="token function">sed</span> -i <span class="token string">'$a bye'</span> <span class="token function">file</span>         <span class="token comment">#在文件ab中最后一行直接输入"bye"</span>$ <span class="token function">cat</span> <span class="token function">file</span> Hello<span class="token operator">!</span> ruby is me,welcome to my blog. end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sed&quot;&gt;&lt;a href=&quot;#sed&quot; class=&quot;headerlink&quot; title=&quot;sed&quot;&gt;&lt;/a&gt;sed&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code </summary>
      
    
    
    
    
  </entry>
  
</feed>

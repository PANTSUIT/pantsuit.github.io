<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/3.html"/>
      <url>/posts/3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h1><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><h2 id="Dir"><a href="#Dir" class="headerlink" title="Dir"></a>Dir</h2><pre class="line-numbers language-none"><code class="language-none">.├── Firmware│&nbsp;&nbsp; ├── components│&nbsp;&nbsp; ├── examples│&nbsp;&nbsp; ├── src│&nbsp;&nbsp; └── maintain &lt;f&gt;├── Hardware│&nbsp;&nbsp; ├── pcb│&nbsp;&nbsp; ├── schematic│&nbsp;&nbsp; └── maintain &lt;f&gt;└── Software│├── components││&nbsp;&nbsp; ├── lib││&nbsp;&nbsp; └── modules│&nbsp;&nbsp; ├── src│└── maintain &lt;f&gt;└── specification &lt;f&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_exit<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span>_reset<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">module_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_new<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// create</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_del<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// destroy</span>        <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>_clean_up<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">obj_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/7.html"/>
      <url>/posts/7.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/14.html"/>
      <url>/posts/14.html</url>
      
        <content type="html"><![CDATA[<h1 id="lighttpd-fastcgi-嵌入式交叉编译"><a href="#lighttpd-fastcgi-嵌入式交叉编译" class="headerlink" title="lighttpd+fastcgi 嵌入式交叉编译"></a>lighttpd+fastcgi 嵌入式交叉编译</h1><h2 id="lighttpd"><a href="#lighttpd" class="headerlink" title="lighttpd"></a>lighttpd</h2><p>在 编译 lighttpd 之前 我们需要先编译 pcre </p><p>pcre下载连接：<a href="https://www.pcre.org/">https://www.pcre.org/</a></p><p>使用的包名： <strong>pcre-8.45.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> -xvf pcre-8.45.tar.gz<span class="token builtin class-name">cd</span> pcre-8.45./configure <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-linux-gnueabihf-gcc --host<span class="token operator">=</span>arm-linux-gnueabihf <span class="token assign-left variable">target</span><span class="token operator">=</span>arm-linux --prefix<span class="token operator">=</span>/ --enable-utf8 --enable-unicode-properties --prefix<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/install<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lighttpd 下载连接：<a href="https://www.lighttpd.net/download/">https://www.lighttpd.net/download/</a></p><p>使用的包名： <strong>lighttpd-1.4.64.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> -xvf lighttpd-1.4.64.tar.gz<span class="token builtin class-name">cd</span> lighttpd-1.4.64<span class="token comment"># 编译之前可以先看一下help 如果</span>./configure --help./configure -prefix<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/install <span class="token punctuation">\</span>--host<span class="token operator">=</span>arm-linux-gnueabihf <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-linux-gnueabihf-gcc <span class="token punctuation">\</span><span class="token assign-left variable">RANLIB</span><span class="token operator">=</span>arm-linux-gnueabihf-ranlib <span class="token assign-left variable">STRIP</span><span class="token operator">=</span>arm-linux-gnueabihf-strip<span class="token punctuation">\</span>--enable-shared --without-mysql --without-zlib --without-bzip2 --with-pcre <span class="token punctuation">\</span>--disable-ipv6 <span class="token punctuation">\</span><span class="token assign-left variable">PCRECONFIG</span><span class="token operator">=</span>/path/to/pcre-8.45/install/bin/pcre-config <span class="token punctuation">\</span><span class="token assign-left variable">PCRE_LIB</span><span class="token operator">=</span>/path/to/pcre-8.45/install/lib/libpcre.a <span class="token punctuation">\</span><span class="token assign-left variable">CFLAGS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CFLAGS</span> -DHAVE_PCRE_H=1 -DHAVE_LIBPCRE=1 -I/home/shi/linux/web/new/pcre-8.45/install/include"</span><span class="token function">make</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lighttpd 测试</p><p>在 <code>lighttpd-1.4.64/Doc</code> 路径中存在着一些配置的 模板文件，根据模板文件进行响应的设置，然后在 lighttpd.conf 文件中配置的 <code>server.document-root</code>  的路径下，新建一个 <code>index.html</code> 文件，内容如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>我的第一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我的第一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /path/lighttpd/sbin./lighttpd -f <span class="token punctuation">..</span>/config/lighttpd.conf -m <span class="token punctuation">..</span>/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果 80 端口没有被占用，输入 ip  则可以看到内容</p><h2 id="fastcgi编译配置"><a href="#fastcgi编译配置" class="headerlink" title="fastcgi编译配置"></a>fastcgi编译配置</h2><p>lighttpd 下载连接：<a href="https://github.com/FastCGI-Archives/fcgi2.git">https://github.com/FastCGI-Archives/fcgi2.git</a></p><pre class="line-numbers language-none"><code class="language-none">tar -xzvf fcgi2-2.4.2.tar.gzcd fcgi2-2.4.2./autogen.sh ./configure CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ --host=arm-linux-gnueabihf --prefix=$(pwd)/installmakemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来修改一下lighttpd的配置，开启lighttpd对factcgi的支持。</p><p>首先在modules.conf找到如下行,并把include前面的#删除。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">## FastCGI (mod_fastcgi)##include "conf.d/fastcgi.conf"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这行配置意思很简单，就是包含conf.d文件夹下的fastcgi.conf配置文件，所以接下来修改fastcgi.conf这个文件<br>在这个文件中添加如下行：</p><pre class="line-numbers language-none"><code class="language-none">fastcgi.debug = 1fastcgi.server = (    "/test" =&gt;(        "test.fastcgi.handler" =&gt;(            "socket" =&gt; socket_dir + "/test/test.fastcgi.socket",            "check-local" =&gt; "disable",            "bin-path" =&gt; home_dir + "/cgi-bin/test.fcgi",            "max-procs" =&gt; 3,        )    ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把fastcgi编译生成的install文件夹拷贝到板子里，然后修改你的.bashrc文件PATH路径加入install/bin,LD_LIBRARY_PATH路径加入install/lib,或者直接把install/bin目录下文件复制到板子/bin,把install/lib目录下文件全部复制到板子/etc</p><h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;fcgi_stdio.h&gt;int main (void) {    while (FCGI_Accept() &gt;= 0) {        printf("Status: 200 OK\r\n\r\nHello World!\n");    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">arm-linux-gnueabihf-gcc -o test.fcgi test.c -L<span class="token punctuation">{</span>your path<span class="token punctuation">}</span>/install/lib <span class="token punctuation">\</span>-lfcgi -I<span class="token punctuation">{</span>your path<span class="token punctuation">}</span>/install/include<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把刚刚生成的test.fcgi复制到板子/lighttpd/cgi-bin目录下。然后重启服务器，在浏览器输入ip/test,可以看到返回了hello world。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/21.html"/>
      <url>/posts/21.html</url>
      
        <content type="html"><![CDATA[<h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> --helpUsage: <span class="token function">awk</span> <span class="token punctuation">[</span>POSIX or GNU style options<span class="token punctuation">]</span> -f progfile <span class="token punctuation">[</span>--<span class="token punctuation">]</span> <span class="token function">file</span> <span class="token punctuation">..</span>.Usage: <span class="token function">awk</span> <span class="token punctuation">[</span>POSIX or GNU style options<span class="token punctuation">]</span> <span class="token punctuation">[</span>--<span class="token punctuation">]</span> <span class="token string">'program'</span> <span class="token function">file</span> <span class="token punctuation">..</span>.POSIX options:          GNU long options: <span class="token punctuation">(</span>standard<span class="token punctuation">)</span>        -f progfile             --file<span class="token operator">=</span>progfile        -F fs                   --field-separator<span class="token operator">=</span>fs        -v <span class="token assign-left variable">var</span><span class="token operator">=</span>val              --assign<span class="token operator">=</span>var<span class="token operator">=</span>valShort options:          GNU long options: <span class="token punctuation">(</span>extensions<span class="token punctuation">)</span>        -b                      --characters-as-bytes        -c                      --traditional        -C                      --copyright        -d<span class="token punctuation">[</span>file<span class="token punctuation">]</span>                --dump-variables<span class="token punctuation">[</span><span class="token operator">=</span>file<span class="token punctuation">]</span>        -D<span class="token punctuation">[</span>file<span class="token punctuation">]</span>                --debug<span class="token punctuation">[</span><span class="token operator">=</span>file<span class="token punctuation">]</span>        -e <span class="token string">'program-text'</span>       --source<span class="token operator">=</span><span class="token string">'program-text'</span>        -E <span class="token function">file</span>                 --exec<span class="token operator">=</span>file        -g                      --gen-pot        -h                      --help        -i includefile          --include<span class="token operator">=</span>includefile        -I                      --trace        -l library              --load<span class="token operator">=</span>library        -L<span class="token punctuation">[</span>fatal<span class="token operator">|</span>invalid<span class="token operator">|</span>no-ext<span class="token punctuation">]</span>        --lint<span class="token punctuation">[</span><span class="token operator">=</span>fatal<span class="token operator">|</span>invalid<span class="token operator">|</span>no-ext<span class="token punctuation">]</span>        -M                      --bignum        -N                      --use-lc-numeric        -n                      --non-decimal-data        -o<span class="token punctuation">[</span>file<span class="token punctuation">]</span>                --pretty-print<span class="token punctuation">[</span><span class="token operator">=</span>file<span class="token punctuation">]</span>        -O                      --optimize        -p<span class="token punctuation">[</span>file<span class="token punctuation">]</span>                --profile<span class="token punctuation">[</span><span class="token operator">=</span>file<span class="token punctuation">]</span>        -P                      --posix        -r                      --re-interval        -s                      --no-optimize        -S                      --sandbox        -t                      --lint-old        -V                      --versionTo report bugs, see <span class="token function">node</span> <span class="token variable"><span class="token variable">`</span>Bugs' <span class="token keyword">in</span> <span class="token variable">`</span></span>gawk.info<span class="token string">'which is section `Reporting Problems and Bugs'</span> <span class="token keyword">in</span> theprinted version.  This same information may be found athttps://www.gnu.org/software/gawk/manual/html_node/Bugs.html.PLEASE <span class="token keyword">do</span> NOT try to report bugs by posting <span class="token keyword">in</span> comp.lang.awk,or by using a web forum such as Stack Overflow.<span class="token function">gawk</span> is a pattern scanning and processing language.By default it reads standard input and writes standard output.Examples:        <span class="token function">awk</span> <span class="token string">'{ sum += $1 }; END { print sum }'</span> <span class="token function">file</span>        <span class="token function">awk</span> -F: <span class="token string">'{ print $1 }'</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> <span class="token string">'/匹配的字符串/{print NR}'</span> 文件名<span class="token comment"># 获取某个字符串所在行数</span>$ <span class="token function">awk</span> <span class="token string">'END{print}'</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> <span class="token comment"># 打印最后一行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/22.html"/>
      <url>/posts/22.html</url>
      
        <content type="html"><![CDATA[<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">grep</span> --helpUsage: <span class="token function">grep</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. PATTERNS <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.Search <span class="token keyword">for</span> <span class="token for-or-select variable">PATTERNS</span> <span class="token keyword">in</span> each FILE.Example: <span class="token function">grep</span> -i <span class="token string">'hello world'</span> menu.h main.cPATTERNS can contain multiple patterns separated by newlines.Pattern selection and interpretation:  -E, --extended-regexp     PATTERNS are extended regular expressions  -F, --fixed-strings       PATTERNS are strings  -G, --basic-regexp        PATTERNS are basic regular expressions  -P, --perl-regexp         PATTERNS are Perl regular expressions  -e, --regexp<span class="token operator">=</span>PATTERNS     use PATTERNS <span class="token keyword">for</span> matching  -f, --file<span class="token operator">=</span>FILE           take PATTERNS from FILE  -i, --ignore-case         ignore <span class="token keyword">case</span> distinctions <span class="token keyword">in</span> patterns and data      --no-ignore-case      <span class="token keyword">do</span> not ignore <span class="token keyword">case</span> distinctions <span class="token punctuation">(</span>default<span class="token punctuation">)</span>  -w, --word-regexp         match only whole words  -x, --line-regexp         match only whole lines  -z, --null-data           a data line ends <span class="token keyword">in</span> <span class="token number">0</span> byte, not newlineMiscellaneous:  -s, --no-messages         suppress error messages  -v, --invert-match        <span class="token keyword">select</span> non-matching lines  -V, --version             display version information and <span class="token builtin class-name">exit</span>      --help                display this <span class="token builtin class-name">help</span> text and <span class="token builtin class-name">exit</span>Output control:  -m, --max-count<span class="token operator">=</span>NUM       stop after NUM selected lines  -b, --byte-offset         print the byte offset with output lines  -n, --line-number         print line number with output lines      --line-buffered       flush output on every line  -H, --with-filename       print <span class="token function">file</span> name with output lines  -h, --no-filename         suppress the <span class="token function">file</span> name prefix on output      --label<span class="token operator">=</span>LABEL         use LABEL as the standard input <span class="token function">file</span> name prefix  -o, --only-matching       show only nonempty parts of lines that match  -q, --quiet, --silent     suppress all normal output      --binary-files<span class="token operator">=</span>TYPE   assume that binary files are TYPE<span class="token punctuation">;</span>                            TYPE is <span class="token string">'binary'</span>, <span class="token string">'text'</span>, or <span class="token string">'without-match'</span>  -a, --text                equivalent to --binary-files<span class="token operator">=</span>text  -I                        equivalent to --binary-files<span class="token operator">=</span>without-match  -d, --directories<span class="token operator">=</span>ACTION  how to handle directories<span class="token punctuation">;</span>                            ACTION is <span class="token string">'read'</span>, <span class="token string">'recurse'</span>, or <span class="token string">'skip'</span>  -D, --devices<span class="token operator">=</span>ACTION      how to handle devices, FIFOs and sockets<span class="token punctuation">;</span>                            ACTION is <span class="token string">'read'</span> or <span class="token string">'skip'</span>  -r, --recursive           like --directories<span class="token operator">=</span>recurse  -R, --dereference-recursive  likewise, but follow all symlinks      --include<span class="token operator">=</span>GLOB        search only files that match GLOB <span class="token punctuation">(</span>a <span class="token function">file</span> pattern<span class="token punctuation">)</span>      --exclude<span class="token operator">=</span>GLOB        skip files that match GLOB      --exclude-from<span class="token operator">=</span>FILE   skip files that match any <span class="token function">file</span> pattern from FILE      --exclude-dir<span class="token operator">=</span>GLOB    skip directories that match GLOB  -L, --files-without-match  print only names of FILEs with no selected lines  -l, --files-with-matches  print only names of FILEs with selected lines  -c, --count               print only a count of selected lines per FILE  -T, --initial-tab         <span class="token function">make</span> tabs line up <span class="token punctuation">(</span>if needed<span class="token punctuation">)</span>  -Z, --null                print <span class="token number">0</span> byte after FILE nameContext control:  -B, --before-context<span class="token operator">=</span>NUM  print NUM lines of leading context  -A, --after-context<span class="token operator">=</span>NUM   print NUM lines of trailing context  -C, --context<span class="token operator">=</span>NUM         print NUM lines of output context  -NUM                      same as --context<span class="token operator">=</span>NUM      --group-separator<span class="token operator">=</span>SEP  print SEP on line between matches with context      --no-group-separator  <span class="token keyword">do</span> not print separator <span class="token keyword">for</span> matches with context      --color<span class="token punctuation">[</span><span class="token operator">=</span>WHEN<span class="token punctuation">]</span>,      --colour<span class="token punctuation">[</span><span class="token operator">=</span>WHEN<span class="token punctuation">]</span>       use markers to highlight the matching strings<span class="token punctuation">;</span>                            WHEN is <span class="token string">'always'</span>, <span class="token string">'never'</span>, or <span class="token string">'auto'</span>  -U, --binary              <span class="token keyword">do</span> not strip CR characters at EOL <span class="token punctuation">(</span>MSDOS/Windows<span class="token punctuation">)</span>When FILE is <span class="token string">'-'</span>, <span class="token builtin class-name">read</span> standard input.  With no FILE, <span class="token builtin class-name">read</span> <span class="token string">'.'</span> <span class="token keyword">if</span>recursive, <span class="token string">'-'</span> otherwise.  With fewer than two FILEs, assume -h.Exit status is <span class="token number">0</span> <span class="token keyword">if</span> any line is selected, <span class="token number">1</span> otherwise<span class="token punctuation">;</span><span class="token keyword">if</span> any error occurs and -q is not given, the <span class="token builtin class-name">exit</span> status is <span class="token number">2</span>.Report bugs to: bug-grep@gnu.orgGNU <span class="token function">grep</span> home page: <span class="token operator">&lt;</span>https://www.gnu.org/software/grep/<span class="token operator">&gt;</span>General <span class="token builtin class-name">help</span> using GNU software: <span class="token operator">&lt;</span>https://www.gnu.org/gethelp/<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">grep</span> -n <span class="token string">"想要查找的字符串名"</span> 文件名 <span class="token comment"># 获取字符串所在行数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/23.html"/>
      <url>/posts/23.html</url>
      
        <content type="html"><![CDATA[<h1 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">➜  ~ <span class="token function">ip</span> --helpUsage: <span class="token function">ip</span> <span class="token punctuation">[</span> OPTIONS <span class="token punctuation">]</span> OBJECT <span class="token punctuation">{</span> COMMAND <span class="token operator">|</span> <span class="token builtin class-name">help</span> <span class="token punctuation">}</span>       <span class="token function">ip</span> <span class="token punctuation">[</span> -force <span class="token punctuation">]</span> -batch filenamewhere  OBJECT :<span class="token operator">=</span> <span class="token punctuation">{</span> address <span class="token operator">|</span> addrlabel <span class="token operator">|</span> amt <span class="token operator">|</span> fou <span class="token operator">|</span> <span class="token builtin class-name">help</span> <span class="token operator">|</span> ila <span class="token operator">|</span> ioam <span class="token operator">|</span> l2tp <span class="token operator">|</span>                   <span class="token function">link</span> <span class="token operator">|</span> macsec <span class="token operator">|</span> maddress <span class="token operator">|</span> monitor <span class="token operator">|</span> mptcp <span class="token operator">|</span> mroute <span class="token operator">|</span> mrule <span class="token operator">|</span>                   neighbor <span class="token operator">|</span> neighbour <span class="token operator">|</span> netconf <span class="token operator">|</span> netns <span class="token operator">|</span> nexthop <span class="token operator">|</span> ntable <span class="token operator">|</span>                   ntbl <span class="token operator">|</span> route <span class="token operator">|</span> rule <span class="token operator">|</span> sr <span class="token operator">|</span> tap <span class="token operator">|</span> tcpmetrics <span class="token operator">|</span>                   token <span class="token operator">|</span> tunnel <span class="token operator">|</span> tuntap <span class="token operator">|</span> vrf <span class="token operator">|</span> xfrm <span class="token punctuation">}</span>       OPTIONS :<span class="token operator">=</span> <span class="token punctuation">{</span> -V<span class="token punctuation">[</span>ersion<span class="token punctuation">]</span> <span class="token operator">|</span> -s<span class="token punctuation">[</span>tatistics<span class="token punctuation">]</span> <span class="token operator">|</span> -d<span class="token punctuation">[</span>etails<span class="token punctuation">]</span> <span class="token operator">|</span> -r<span class="token punctuation">[</span>esolve<span class="token punctuation">]</span> <span class="token operator">|</span>                    -h<span class="token punctuation">[</span>uman-readable<span class="token punctuation">]</span> <span class="token operator">|</span> -iec <span class="token operator">|</span> -j<span class="token punctuation">[</span>son<span class="token punctuation">]</span> <span class="token operator">|</span> -p<span class="token punctuation">[</span>retty<span class="token punctuation">]</span> <span class="token operator">|</span>                    -f<span class="token punctuation">[</span>amily<span class="token punctuation">]</span> <span class="token punctuation">{</span> inet <span class="token operator">|</span> inet6 <span class="token operator">|</span> mpls <span class="token operator">|</span> bridge <span class="token operator">|</span> <span class="token function">link</span> <span class="token punctuation">}</span> <span class="token operator">|</span>                    -4 <span class="token operator">|</span> -6 <span class="token operator">|</span> -M <span class="token operator">|</span> -B <span class="token operator">|</span> -0 <span class="token operator">|</span>                    -l<span class="token punctuation">[</span>oops<span class="token punctuation">]</span> <span class="token punctuation">{</span> maximum-addr-flush-attempts <span class="token punctuation">}</span> <span class="token operator">|</span> -br<span class="token punctuation">[</span>ief<span class="token punctuation">]</span> <span class="token operator">|</span>                    -o<span class="token punctuation">[</span>neline<span class="token punctuation">]</span> <span class="token operator">|</span> -t<span class="token punctuation">[</span>imestamp<span class="token punctuation">]</span> <span class="token operator">|</span> -ts<span class="token punctuation">[</span>hort<span class="token punctuation">]</span> <span class="token operator">|</span> -b<span class="token punctuation">[</span>atch<span class="token punctuation">]</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">|</span>                    -rc<span class="token punctuation">[</span>vbuf<span class="token punctuation">]</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">|</span> -n<span class="token punctuation">[</span>etns<span class="token punctuation">]</span> name <span class="token operator">|</span> -N<span class="token punctuation">[</span>umeric<span class="token punctuation">]</span> <span class="token operator">|</span> -a<span class="token punctuation">[</span>ll<span class="token punctuation">]</span> <span class="token operator">|</span>                    -c<span class="token punctuation">[</span>olor<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/27.html"/>
      <url>/posts/27.html</url>
      
        <content type="html"><![CDATA[<h1 id="WC"><a href="#WC" class="headerlink" title="WC"></a>WC</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">wc</span> --helpUsage: <span class="token function">wc</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.  or:  <span class="token function">wc</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. --files0-from<span class="token operator">=</span>FPrint newline, word, and byte counts <span class="token keyword">for</span> each FILE, and a total line <span class="token keyword">if</span><span class="token function">more</span> than one FILE is specified.  A word is a non-zero-length sequence ofprintable characters delimited by white space.With no FILE, or when FILE is -, <span class="token builtin class-name">read</span> standard input.The options below may be used to <span class="token keyword">select</span> <span class="token function">which</span> counts are printed, always <span class="token keyword">in</span>the following order: newline, word, character, byte, maximum line length.  -c, --bytes            print the byte counts  -m, --chars            print the character counts  -l, --lines            print the newline counts      --files0-from<span class="token operator">=</span>F    <span class="token builtin class-name">read</span> input from the files specified by                           NUL-terminated names <span class="token keyword">in</span> <span class="token function">file</span> F<span class="token punctuation">;</span>                           If F is - <span class="token keyword">then</span> <span class="token builtin class-name">read</span> names from standard input  -L, --max-line-length  print the maximum display width  -w, --words            print the word counts      --help        display this <span class="token builtin class-name">help</span> and <span class="token builtin class-name">exit</span>      --version     output version information and <span class="token builtin class-name">exit</span>GNU coreutils online help: <span class="token operator">&lt;</span>https://www.gnu.org/software/coreutils/<span class="token operator">&gt;</span>Full documentation <span class="token operator">&lt;</span>https://www.gnu.org/software/coreutils/wc<span class="token operator">&gt;</span>or available locally via: info <span class="token string">'(coreutils) wc invocation'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/6.html"/>
      <url>/posts/6.html</url>
      
        <content type="html"><![CDATA[<h1 id="xxx-xxx-xxx-域名解析错误"><a href="#xxx-xxx-xxx-域名解析错误" class="headerlink" title="xxx.xxx.xxx 域名解析错误"></a>xxx.xxx.xxx 域名解析错误</h1><p><img src="/posts/6/image-20220525111616369.png" alt="image-20220525111616369"></p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><ul><li><p>查看本机使用的 dns 服务器地址</p></li><li><p>查看该 dns 服务器解析域名 得到的 ip 地址是否正确</p></li><li><p>更换其他的 dns 服务器进行对比</p></li></ul><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># windows# 查看 dns 服务器&gt; ipconfig /all # 或者在网络适配其中查看网卡的使用的 dns 服务器配置 &gt; nslookup &lt;domain name&gt; &lt;dns_ip&gt; # 使用 dns 服务器解析域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用-dns-服务器"><a href="#常用-dns-服务器" class="headerlink" title="常用 dns 服务器"></a>常用 dns 服务器</h2><div class="table-container"><table><thead><tr><th style="text-align:center">提供商</th><th style="text-align:center">DNS地址</th><th style="text-align:center">描述</th><th style="text-align:center">推荐指数</th></tr></thead><tbody><tr><td style="text-align:center">114DNS</td><td style="text-align:center">114.114.114.114 / 114.114.115.115</td><td style="text-align:center">高速、稳定、但劫持用户</td><td style="text-align:center">$\star$</td></tr><tr><td style="text-align:center">阿里DNS</td><td style="text-align:center">223.5.5.5 / 223.6.6.6</td><td style="text-align:center">极速、稳定、智能</td><td style="text-align:center">$\star\star\star\star$</td></tr><tr><td style="text-align:center">百度DNS</td><td style="text-align:center">180.76.76.76</td><td style="text-align:center">云防护、无劫持</td><td style="text-align:center">$\star\star\star\star$</td></tr><tr><td style="text-align:center">DNS派</td><td style="text-align:center">电信：101.226.4.6<br>联通：123.125.81.6<br>移动：101.226.4.6</td><td style="text-align:center">高速、稳定、安全</td><td style="text-align:center">$\star\star\star\star$</td></tr><tr><td style="text-align:center">One DNS</td><td style="text-align:center">南方：112.124.47.27<br>北方：114.215.126.16</td><td style="text-align:center">广告拦截、恶意网站屏蔽</td><td style="text-align:center">$\star\star\star\star$</td></tr><tr><td style="text-align:center">Google DNS</td><td style="text-align:center">8.8.8.8 / 8.8.4.4</td><td style="text-align:center">高速、稳定、安全</td><td style="text-align:center">$\star\star\star$</td></tr><tr><td style="text-align:center">Open DNS</td><td style="text-align:center">208.67.222.222 / 208.67.220.220</td><td style="text-align:center">高速、稳定、安全</td><td style="text-align:center">$\star\star\star$</td></tr></tbody></table></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/15.html"/>
      <url>/posts/15.html</url>
      
        <content type="html"><![CDATA[<h1 id="wpa-supplicant-交叉编译"><a href="#wpa-supplicant-交叉编译" class="headerlink" title="wpa_supplicant 交叉编译"></a>wpa_supplicant 交叉编译</h1><p>[toc]</p><p>wpa_supplicant 的编译 依赖 libnl 库、libssl库，因此我们需要先编译好这两个库。</p><blockquote> 注意： 在编译之前需将 交叉工具链 导出到环境变量 或者 使用交叉工具变量的路径   </blockquote><h2 id="libssl"><a href="#libssl" class="headerlink" title="libssl"></a>libssl</h2><p>下载连接： <a href="https://www.openssl.org/source/">https://www.openssl.org/source/</a>  </p><p>使用的包名： <strong>openssl-1.1.1o.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tar</span> -xvf openssl-1.1.1o.tar.gz$ <span class="token builtin class-name">cd</span> openssl-1.1.1o$ <span class="token function">mkdir</span> _install_arm$ ./config no-asm shared --prefix<span class="token operator">=</span><span class="token variable">${<span class="token environment constant">PWD</span>}</span>/_install_arm --cross-compile-prefix<span class="token operator">=</span>arm-linux-gnueabihf- $ <span class="token function">make</span> <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-linux-gnueabihf-gcc$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意</p><p>在编译过程中，如果出现如下错误：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">arm-linux-gnueabihf-gcc: error: unrecognized <span class="token builtin class-name">command</span> line option ‘-m64’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则需要打开Makefile 查找里面的 <code>-m64</code>，并将其删除即可</p></li></ul><p>使用的包名： <strong>openssl-3.0.0.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tar</span> -xvf openssl-3.0.0.tar.gz$ <span class="token builtin class-name">cd</span> openssl-3.0.0$ <span class="token function">mkdir</span> _install_arm<span class="token comment"># 交叉工具链(编译器)为64位时</span>$ ./config no-asm -shared --prefix<span class="token operator">=</span><span class="token variable">${<span class="token environment constant">PWD</span>}</span>/_install_arm <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>arm-linux-gnueabihf- <span class="token assign-left variable">CC</span><span class="token operator">=</span>gcc$ <span class="token function">make</span>$ <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 交叉工具链(编译器)为32位时</span><span class="token comment"># linux-generic32表示操作系统是32位的</span><span class="token comment"># no-async表示不使用ucontext库，如果需要使用则去掉</span>$ ./Configure linux-generic32 no-asm -shared no-async --prefix<span class="token operator">=</span><span class="token variable">${<span class="token environment constant">PWD</span>}</span>/_install_arm <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>arm-linux-gnueabihf- <span class="token assign-left variable">CC</span><span class="token operator">=</span>gcc$ <span class="token function">make</span>$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="libnl"><a href="#libnl" class="headerlink" title="libnl"></a>libnl</h2><p>下载连接：<a href="https://www.linuxfromscratch.org/blfs/view/svn/basicnet/libnl.html">https://www.linuxfromscratch.org/blfs/view/svn/basicnet/libnl.html</a></p><p>使用的包名： <strong>libnl-3.6.0.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tar</span> -xvf libnl-3.6.0.tar.gz$ <span class="token builtin class-name">cd</span> libnl-3.6.0$ <span class="token function">mkdir</span> _install_arm$ ./configure --host<span class="token operator">=</span>arm-linux-gnueabihf --prefix<span class="token operator">=</span><span class="token variable">${<span class="token environment constant">PWD</span>}</span>/_install_arm$ <span class="token function">make</span>$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wpa-supplicant"><a href="#wpa-supplicant" class="headerlink" title="wpa_supplicant"></a>wpa_supplicant</h2><p>下载连接：<a href="http://w1.fi/releases/">http://w1.fi/releases/</a></p><p>使用的包名：<strong>wpa_supplicant-2.9.tar.gz</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tar</span> -xvf wpa_supplicant-2.9.tar.gz$ <span class="token builtin class-name">cd</span> wpa_supplicant-2.9/wpa_supplicant$ <span class="token function">cp</span> ./defconfig ./.config<span class="token comment"># 在 Makefile 中添加 libssl 和 libnl 库的路径</span><span class="token comment"># CFLAGS+=-I/path/to/openssl-1.1.1o/_install_arm/include  </span><span class="token comment"># LIBS+=-L/path/to/openssl-1.1.1o/_install_arm/lib </span><span class="token comment"># CFLAGS+=-I/path/to/libnl-3.6.0/_install_arm/include  </span><span class="token comment"># LIBS+=-L/path/to/libnl-3.6.0/_install_arm/lib</span>$ <span class="token function">vim</span> Makefile  $ <span class="token function">make</span> <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-himix100-linux-gcc <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/29.html"/>
      <url>/posts/29.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-IO模式"><a href="#Linux-IO模式" class="headerlink" title="Linux IO模式"></a>Linux IO模式</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/30.html"/>
      <url>/posts/30.html</url>
      
        <content type="html"><![CDATA[<h1 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/31.html"/>
      <url>/posts/31.html</url>
      
        <content type="html"><![CDATA[<h1 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h1><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/9.html"/>
      <url>/posts/9.html</url>
      
        <content type="html"><![CDATA[<h2 id="Go-语言结构"><a href="#Go-语言结构" class="headerlink" title="Go 语言结构"></a>Go 语言结构</h2><ul><li>包声明</li><li>引入包</li><li>函数</li><li>变量</li><li>语句 &amp; 表达式</li><li>注释</li></ul><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">//  the defineition of package namepackage main// Importing external packagesimport "fmt"func main() {fmt.Println("Hello, World!");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ go run filename.go <span class="token comment"># Execute a programer of go</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">var identifier typevar identifier1, identifier2 type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package mainimport "fmt"func main() {//  assign the type of variate, if not initialized, it will be the defaultvar a string = "Hello world, a!"fmt.Println(a)// auto var b = "Hello world, b!"fmt.Println(b)// if variate was declared,  an error is generated at compile timec := "Hello world, c!"fmt.Println(c)// mutliple variable declarationsvar d, e, f string = "ddd", "eee", "fff"fmt.Println(d, e, f)var g, h, i = "ggg", "hhh", "iii"fmt.Println(g, h, i)j, k, l := "jjj", "kkk", "lll"fmt.Println(n, k, l)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">// the formatconst identifier [type] = valueconst identifier = valueconst identifier1, identifier2 = value1, value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package&nbsp;main    import&nbsp;"fmt"    func&nbsp;main()&nbsp;{  &nbsp; &nbsp;&nbsp;const&nbsp;(  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a&nbsp;=&nbsp;iota &nbsp;&nbsp;//0  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//1  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//2  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; d&nbsp;=&nbsp;"ha"&nbsp;&nbsp;&nbsp;//独立值，iota += 1  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//"ha" &nbsp; iota += 1  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f&nbsp;=&nbsp;100&nbsp;&nbsp; &nbsp;//iota +=1  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//100 &nbsp;iota +=1  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; h&nbsp;=&nbsp;iota &nbsp;&nbsp;//7,恢复计数  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//8  &nbsp; &nbsp;&nbsp;)  &nbsp; &nbsp; fmt.Println(a,b,c,d,e,f,g,h,i)  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package&nbsp;main    import&nbsp;"fmt"  const&nbsp;(  &nbsp; &nbsp;&nbsp;i=1&lt;&lt;iota  // 1&nbsp; &nbsp; j=3&lt;&lt;iota  // 3 &lt;&lt; 1&nbsp; &nbsp; k   // 3 &lt;&lt; 2&nbsp; &nbsp; l   // 3 &lt;&lt; 3)    func&nbsp;main()&nbsp;{  &nbsp; &nbsp; fmt.Println("i=",i)  &nbsp; &nbsp; fmt.Println("j=",j)  &nbsp; &nbsp; fmt.Println("k=",k)  &nbsp; &nbsp; fmt.Println("l=",l)  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">if condition {} else {}switch var1 {case val1:...case val2:...default:...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package&nbsp;main    import&nbsp;"fmt"    func&nbsp;main()&nbsp;{  &nbsp; &nbsp;/* 定义局部变量 */  &nbsp; &nbsp;var&nbsp;grade&nbsp;string&nbsp;=&nbsp;"B"  &nbsp; &nbsp;var&nbsp;marks&nbsp;int&nbsp;=&nbsp;90    &nbsp; &nbsp;switch&nbsp;marks&nbsp;{  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;90:&nbsp;grade&nbsp;=&nbsp;"A"  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;80:&nbsp;grade&nbsp;=&nbsp;"B"  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;50,60,70&nbsp;:&nbsp;grade&nbsp;=&nbsp;"C"  &nbsp; &nbsp; &nbsp;&nbsp;default:&nbsp;grade&nbsp;=&nbsp;"D"&nbsp;&nbsp;  &nbsp; &nbsp;}    &nbsp; &nbsp;switch&nbsp;{  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;grade&nbsp;==&nbsp;"A"&nbsp;:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("优秀!\n"&nbsp;)&nbsp;&nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;grade&nbsp;==&nbsp;"B",&nbsp;grade&nbsp;==&nbsp;"C"&nbsp;:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("良好\n"&nbsp;)&nbsp;&nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;grade&nbsp;==&nbsp;"D"&nbsp;:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("及格\n"&nbsp;)&nbsp;&nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;grade&nbsp;==&nbsp;"F":  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("不及格\n"&nbsp;)  &nbsp; &nbsp; &nbsp;&nbsp;default:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("差\n"&nbsp;);  &nbsp; &nbsp;}  &nbsp; &nbsp;fmt.Printf("你的等级是 %s\n",&nbsp;grade&nbsp;);&nbsp;&nbsp; &nbsp; &nbsp;  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package&nbsp;main    import&nbsp;"fmt"    func&nbsp;main()&nbsp;{  &nbsp; &nbsp;var&nbsp;x&nbsp;interface{}  &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp;switch&nbsp;i&nbsp;:=&nbsp;x.(type)&nbsp;{  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;nil:&nbsp;&nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf(" x 的类型 :%T",i)&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;int:&nbsp;&nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("x 是 int 型")&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;float64:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("x 是 float64 型")&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;func(int)&nbsp;float64:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("x 是 func(int) 型")&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;case&nbsp;bool,&nbsp;string:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("x 是 bool 或 string 型"&nbsp;)&nbsp;&nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;&nbsp;default:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fmt.Printf("未知型")&nbsp;&nbsp; &nbsp;  &nbsp; &nbsp;}&nbsp;&nbsp;  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package&nbsp;main    import&nbsp;"fmt"    func&nbsp;main()&nbsp;{    &nbsp; &nbsp;&nbsp;switch&nbsp;{  &nbsp; &nbsp;&nbsp;case&nbsp;false:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("1、case 条件语句为 false")  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;fallthrough  &nbsp; &nbsp;&nbsp;case&nbsp;true:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("2、case 条件语句为 true")  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;fallthrough  &nbsp; &nbsp;&nbsp;case&nbsp;false:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("3、case 条件语句为 false")  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;fallthrough  &nbsp; &nbsp;&nbsp;case&nbsp;true:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("4、case 条件语句为 true")  &nbsp; &nbsp;&nbsp;case&nbsp;false:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("5、case 条件语句为 false")  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;fallthrough  &nbsp; &nbsp;&nbsp;default:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("6、默认 case")  &nbsp; &nbsp;&nbsp;}  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">for init; condition; popst { }for condition { }for { }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">// Loop control statementbreakcontinuegoto <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">// Formatfunc &lt;function_name&gt;([parameter_list]) [return_types] {&lt;function_body&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">var &lt;variable_name&gt; [&lt;size&gt;] &lt;variable_type&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/4.html"/>
      <url>/posts/4.html</url>
      
        <content type="html"><![CDATA[<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><pre class="line-numbers language-none"><code class="language-none">&lt;主版本号&gt;.&lt;子版本号&gt;.&lt;修订版本号&gt;.&lt;日期&gt;_&lt;版本阶段&gt;如： V1.2.3.20220513_rc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="版本阶段"><a href="#版本阶段" class="headerlink" title="版本阶段"></a>版本阶段</h2><ul><li><p>Base：此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，但是页面中的功能都没有做完整的实现，只是作为整体网站的一个基础架构。</p></li><li><p>Alpha：此版本标识该软件在此阶段主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改。</p></li><li><p>Beta：该版本相对于 $\alpha$ 版本已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对象是软件的UI。</p></li><li><p>RC：该版本已经相当成熟了，基本不存在导致错误的 Bug，与即将发行的正式版相差无几。</p></li><li><p>Release： 该版本意为 “最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下， Release 不会意单词形式出现在软件封面上，取而代之的是符号 （R）；</p></li></ul><h2 id="其他命名"><a href="#其他命名" class="headerlink" title="其他命名"></a>其他命名</h2><ul><li>standard</li><li>full version</li><li>lts</li><li>ultimate</li><li>alpha</li><li>beta</li><li>demo</li><li>enhance</li><li>free</li><li>lts</li><li>release</li><li>rc</li><li>upgrade</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/25.html"/>
      <url>/posts/25.html</url>
      
        <content type="html"><![CDATA[<p>重复执行某个命令来观察其输出的变化， 直到接受到中断信号。</p><h2 id="option"><a href="#option" class="headerlink" title="option"></a>option</h2><ul><li>-d: 高亮两次输出差异的地方</li><li>-n &lt;&gt;: 设置两次命令执行的间隔</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/13.html"/>
      <url>/posts/13.html</url>
      
        <content type="html"><![CDATA[<h1 id="libpng-交叉编译"><a href="#libpng-交叉编译" class="headerlink" title="libpng 交叉编译"></a>libpng 交叉编译</h1><h2 id="zlib-编译"><a href="#zlib-编译" class="headerlink" title="zlib 编译"></a>zlib 编译</h2><p><a href="https://zlib.net/">官网</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里使用的 github 仓库, version： v1.2.12</span><span class="token function">git</span> clone git@github.com:iPandamen/zlib.git<span class="token builtin class-name">cd</span> zlib<span class="token function">mkdir</span> arm-build<span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-linux-gnueabihf-gcc ./configure --prefix<span class="token operator">=</span><span class="token environment constant">$PWD</span>/arm-build<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="libpng-编译"><a href="#libpng-编译" class="headerlink" title="libpng 编译"></a>libpng 编译</h2><p><a href="http://www.libpng.org/pub/png/libpng.html">官网</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> xf libpng-1.6.37.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> libpng-1.6.37<span class="token builtin class-name">export</span> <span class="token assign-left variable">CPPFLAGS</span><span class="token operator">=</span><span class="token string">"-I/path/to/zlib/arm-build/include"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span><span class="token string">"-L/path/to/zlib/arm-build/lib"</span>./configure <span class="token assign-left variable">CC</span><span class="token operator">=</span>arm-linux-gnueabi-gcc --prefix<span class="token operator">=</span><span class="token environment constant">$PWD</span>/_install --host<span class="token operator">=</span>arm-linux<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 libpng 编译的时候出现了错误<br></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dangerous relocation: unsupported relocation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><p>原因未知：<br>解决办法：<br>在zlib的 编译中 为 gcc 添加 <code>-fPIC</code> 选项</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/20.html"/>
      <url>/posts/20.html</url>
      
        <content type="html"><![CDATA[<h1 id="valgrind"><a href="#valgrind" class="headerlink" title="valgrind"></a>valgrind</h1><h2 id="option"><a href="#option" class="headerlink" title="option"></a>option</h2><ul><li><code>--log-fd=N</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ valgrind --leak-check<span class="token operator">=</span>yes ./a.out arg1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/24.html"/>
      <url>/posts/24.html</url>
      
        <content type="html"><![CDATA[<h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sed</span> --helpUsage: <span class="token function">sed</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">{</span>script-only-if-no-other-script<span class="token punctuation">}</span> <span class="token punctuation">[</span>input-file<span class="token punctuation">]</span><span class="token punctuation">..</span>.  -n, --quiet, --silent                 suppress automatic printing of pattern space      --debug                 annotate program execution  -e script, --expression<span class="token operator">=</span>script                 <span class="token function">add</span> the script to the commands to be executed  -f script-file, --file<span class="token operator">=</span>script-file                 <span class="token function">add</span> the contents of script-file to the commands to be executed  --follow-symlinks                 follow symlinks when processing <span class="token keyword">in</span> place  -i<span class="token punctuation">[</span>SUFFIX<span class="token punctuation">]</span>, --in-place<span class="token punctuation">[</span><span class="token operator">=</span>SUFFIX<span class="token punctuation">]</span>                 edit files <span class="token keyword">in</span> place <span class="token punctuation">(</span>makes backup <span class="token keyword">if</span> SUFFIX supplied<span class="token punctuation">)</span>  -l N, --line-length<span class="token operator">=</span>N                 specify the desired line-wrap length <span class="token keyword">for</span> the `l' <span class="token builtin class-name">command</span>  --posix                 disable all GNU extensions.  -E, -r, --regexp-extended                 use extended regular expressions <span class="token keyword">in</span> the script                 <span class="token punctuation">(</span>for portability use POSIX -E<span class="token punctuation">)</span>.  -s, --separate                 consider files as separate rather than as a single,                 continuous long stream.      --sandbox                 operate <span class="token keyword">in</span> sandbox mode <span class="token punctuation">(</span>disable e/r/w commands<span class="token punctuation">)</span>.  -u, --unbuffered                 load minimal amounts of data from the input files and flush                 the output buffers <span class="token function">more</span> often  -z, --null-data                 separate lines by NUL characters      --help     display this <span class="token builtin class-name">help</span> and <span class="token builtin class-name">exit</span>      --version  output version information and <span class="token builtin class-name">exit</span>If no -e, --expression, -f, or --file option is given, <span class="token keyword">then</span> the firstnon-option argument is taken as the <span class="token function">sed</span> script to interpret.  Allremaining arguments are names of input files<span class="token punctuation">;</span> <span class="token keyword">if</span> no input files arespecified, <span class="token keyword">then</span> the standard input is read.GNU <span class="token function">sed</span> home page: <span class="token operator">&lt;</span>https://www.gnu.org/software/sed/<span class="token operator">&gt;</span>.General <span class="token builtin class-name">help</span> using GNU software: <span class="token operator">&lt;</span>https://www.gnu.org/gethelp/<span class="token operator">&gt;</span>.E-mail bug reports to: <span class="token operator">&lt;</span>bug-sed@gnu.org<span class="token operator">&gt;</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 删除某行</span>$ <span class="token function">sed</span> <span class="token string">'1d'</span> <span class="token function">file</span>              <span class="token comment">#删除第一行 </span>$ <span class="token function">sed</span> <span class="token string">'$d'</span> <span class="token function">file</span>              <span class="token comment">#删除最后一行</span>$ <span class="token function">sed</span> <span class="token string">'1,2d'</span> <span class="token function">file</span>           <span class="token comment">#删除第一行到第二行</span>$ <span class="token function">sed</span> <span class="token string">'2,$d'</span> <span class="token function">file</span>           <span class="token comment">#删除第二行到最后一行</span><span class="token comment"># 显示某行</span>$ <span class="token function">sed</span> -n <span class="token string">'1p'</span> <span class="token function">file</span>           <span class="token comment">#显示第一行 </span>$ <span class="token function">sed</span> -n <span class="token string">'$p'</span> <span class="token function">file</span>           <span class="token comment">#显示最后一行</span>$ <span class="token function">sed</span> -n <span class="token string">'1,2p'</span> <span class="token function">file</span>        <span class="token comment">#显示第一行到第二行</span>$ <span class="token function">sed</span> -n <span class="token string">'2,$p'</span> <span class="token function">file</span>        <span class="token comment">#显示第二行到最后一行</span><span class="token comment"># 使用模式进行查询</span>$ <span class="token function">sed</span> -n <span class="token string">'/ruby/p'</span> <span class="token function">file</span>    <span class="token comment">#查询包括关键字ruby所在所有行</span>$ <span class="token function">sed</span> -n <span class="token string">'/\$/p'</span> <span class="token function">file</span>        <span class="token comment">#查询包括关键字$所在所有行，使用反斜线\屏蔽特殊含义</span><span class="token comment"># 代替一行或多行</span>$ <span class="token function">sed</span> <span class="token string">'1c Hi'</span> <span class="token function">file</span>                <span class="token comment">#第一行代替为Hi</span> Hi ruby is me,welcome to my blog. end$ <span class="token function">sed</span> <span class="token string">'1,2c Hi'</span> <span class="token function">file</span>             <span class="token comment">#第一行到第二行代替为Hi</span> Hi end<span class="token comment"># 替换一行中的某部分</span><span class="token comment"># 格式：sed 's/要替换的字符串/新的字符串/g'   （要替换的字符串可以用正则表达式）</span>$ <span class="token function">sed</span> -n <span class="token string">'/ruby/p'</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/ruby/bird/g'</span>    <span class="token comment">#替换ruby为bird</span>$ <span class="token function">sed</span> -n <span class="token string">'/ruby/p'</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/ruby//g'</span>        <span class="token comment">#删除ruby</span><span class="token comment"># 插入</span>$ <span class="token function">sed</span> -i <span class="token string">'$a bye'</span> <span class="token function">file</span>         <span class="token comment">#在文件ab中最后一行直接输入"bye"</span>$ <span class="token function">cat</span> <span class="token function">file</span> Hello<span class="token operator">!</span> ruby is me,welcome to my blog. end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/32.html"/>
      <url>/posts/32.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符串变量截取"><a href="#字符串变量截取" class="headerlink" title="字符串变量截取"></a>字符串变量截取</h2><ul><li><code>${&lt;var_name&gt;: &lt;start_pos&gt; : length}</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">"abcdef"</span>$ <span class="token builtin class-name">echo</span> <span class="token variable">${a<span class="token operator">:</span>0<span class="token operator">:</span>2}</span>ab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="字符串变量替换"><a href="#字符串变量替换" class="headerlink" title="字符串变量替换"></a>字符串变量替换</h2><ul><li>只替换第一个匹配结果：<code>${&lt;var_name&gt;/old/new}</code></li><li>替换全部匹配结果：<code>${&lt;var_name&gt;//old/new}</code></li></ul><h2 id="字符串最短和最长匹配"><a href="#字符串最短和最长匹配" class="headerlink" title="字符串最短和最长匹配"></a>字符串最短和最长匹配</h2><ul><li><p>从左向右，最短匹配删除：<code>${&lt;var_name&gt;#*&lt;key_word&gt;}</code></p><ul><li>即遇到第一个关键词进行匹配，删除自关键词往左字符串</li></ul></li><li><p>从左向右，最长匹配删除：<code>${&lt;var_name&gt;##*&lt;key_word&gt;}</code></p></li></ul><p>　　- 即遇到最后一个关键词进行匹配，删除自关键词往左字符串</p><ul><li>从右向左，最短匹配删除：<code>${&lt;var_name&gt;%&lt;key_word&gt;*}</code></li></ul><p>　　- 即遇到第一个关键词进行匹配，删除自关键词往右的字符串</p><ul><li>从右向左，最长匹配删除：<code>${&lt;var_name&gt;%%&lt;key_word&gt;*}</code></li></ul><p>　　- 即遇到最后一个关键词进行匹配，删除自关键词往右的字符串</p><h2 id="变量的初始值"><a href="#变量的初始值" class="headerlink" title="变量的初始值"></a>变量的初始值</h2><p><code>${&lt;var_name&gt;:-&gt;&lt;default_value&gt;}</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/10.html"/>
      <url>/posts/10.html</url>
      
        <content type="html"><![CDATA[<h1 id="BMP"><a href="#BMP" class="headerlink" title="BMP"></a>BMP</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/11.html"/>
      <url>/posts/11.html</url>
      
        <content type="html"><![CDATA[<h1 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/12.html"/>
      <url>/posts/12.html</url>
      
        <content type="html"><![CDATA[<h1 id="JPEG"><a href="#JPEG" class="headerlink" title="JPEG"></a>JPEG</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/28.html"/>
      <url>/posts/28.html</url>
      
        <content type="html"><![CDATA[<h2 id="查看磁盘使用率（statfs"><a href="#查看磁盘使用率（statfs" class="headerlink" title="查看磁盘使用率（statfs)"></a>查看磁盘使用率（<code>statfs</code>)</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct statfs {__fsword_t f_type;    /* Type of filesystem (see below) */    __fsword_t f_bsize;   /* Optimal transfer block size */    fsblkcnt_t f_blocks;  /* Total data blocks in filesystem */    fsblkcnt_t f_bfree;   /* Free blocks in filesystem */    fsblkcnt_t f_bavail;  /* Free blocks available to unprivileged user */fsfilcnt_t f_files;   /* Total inodes in filesystem */    fsfilcnt_t f_ffree;   /* Free inodes in filesystem */    fsid_t     f_fsid;    /* Filesystem ID */    __fsword_t f_namelen; /* Maximum length of filenames */    __fsword_t f_frsize;  /* Fragment size (since Linux 2.6) */    __fsword_t f_flags;   /* Mount flags of filesystem                             (since Linux 2.6.36) */    __fsword_t f_spare[xxx];  /* Padding bytes reserved for future use */};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看系统内存信息"><a href="#查看系统内存信息" class="headerlink" title="查看系统内存信息"></a>查看系统内存信息</h2><p><code>sysinfo()</code> returns certain statistics on memory and swap usage, as well as the load average.</p><p>Until Linux 2.3.16, <strong>sysinfo</strong>() returned information in the following structure:</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct sysinfo {long uptime;             /* Seconds since boot */    unsigned long loads[3];  /* 1, 5, and 15 minute load averages */    unsigned long totalram;  /* Total usable main memory size */    unsigned long freeram;   /* Available memory size */    unsigned long sharedram; /* Amount of shared memory */    unsigned long bufferram; /* Memory used by buffers */    unsigned long totalswap; /* Total swap space size */    unsigned long freeswap;  /* Swap space still available */    unsigned short procs;    /* Number of current processes */    char _f[22];             /* Pads structure to 64 bytes */};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the above structure, the sizes of the memory and swap fields are given in bytes.</p><p>Since Linux 2.3.23 (i386) and Linux 2.3.48 (all architectures) the structure is:</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct sysinfo {    long uptime;             /* Seconds since boot */    unsigned long loads[3];  /* 1, 5, and 15 minute load averages */    unsigned long totalram;  /* Total usable main memory size */    unsigned long freeram;   /* Available memory size */    unsigned long sharedram; /* Amount of shared memory */    unsigned long bufferram; /* Memory used by buffers */    unsigned long totalswap; /* Total swap space size */    unsigned long freeswap;  /* Swap space still available */    unsigned short procs;    /* Number of current processes */    unsigned long totalhigh; /* Total high memory size */    unsigned long freehigh;  /* Available high memory size */    unsigned int mem_unit;   /* Memory unit size in bytes */char _f[20-2*sizeof(long)-sizeof(int)];                                        /* Padding to 64 bytes */};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the above structure, sizes of the memory and swap fields are given as multiples of <em>mem_unit</em> bytes.</p><h2 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h2><h3 id="初始化和销毁"><a href="#初始化和销毁" class="headerlink" title="初始化和销毁"></a>初始化和销毁</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">/* Initialize a mutex */int pthread_mutex_init (pthread_mutex_t *__mutex, __const pthread_mutexattr_t *__mutexattr);/* Destroy a mutex. */    int pthread_mutex_destroy (pthread_mutex_t *__mutex);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果互斥量是静态分配的，可以通过常量进行初始化：<br></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">/* 初始化互斥量属性对象 */int pthread_mutexattr_init (pthread_mutexattr_t *__attr); /* 销毁互斥量属性对象  */int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr); /* 获取互斥量属性对象在进程间共享与否的标志 */int pthread_mutexattr_getpshared (__const pthread_mutexattr_t* __restrict __attr, int *__restrict __pshared); /* 设置互斥量属性对象，标识在进程间共享与否 */int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,   int __pshared);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">/** * @brief Try locking a mutex. *  * @retval 0: successfull *         other: failed  */int pthread_mutex_trylock (pthread_mutex_t *__mutex); /** * @brief Lock a mutex. *  * @retval 0: successfull *         other: failed  */int pthread_mutex_lock (pthread_mutex_t *__mutex); /** * @brief Unlock a mutex. *  * @retval 0: successfull *         other: failed  */int pthread_mutex_unlock (pthread_mutex_t *__mutex);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><h3 id="相关头文件"><a href="#相关头文件" class="headerlink" title="相关头文件"></a>相关头文件</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;sys/ipc.h&gt;#include &lt;sys/shm.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">/** * @brief 获取或创建共享内存 * @param */int&nbsp;shmget(key_t&nbsp;key,&nbsp;size_t&nbsp;size,&nbsp;int&nbsp;shmflg);/** * @brief 把共享内存连接到当前进程的地址空间 * @param */void&nbsp;*shmat(int&nbsp;shm_id,&nbsp;const&nbsp;void&nbsp;*shm_addr,&nbsp;int&nbsp;shmflg);/** * @brief 将共享内存从当前进程中分离 * @param */int&nbsp;shmdt(const&nbsp;void&nbsp;*shmaddr);/** * @brief 控制共享内存（删除共享内存） * @param */int&nbsp;shmctl(int&nbsp;shm_id,&nbsp;int&nbsp;command,&nbsp;struct&nbsp;shmid_ds&nbsp;*buf);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;sys/socket.h&gt;/** * @brief create an endpoint for communication *  * @retval &lt;fd&gt;： succeed * @retval -1: error */int socket(int domain, int type, int protocol);/** * @brief bind a name to a socket *  * @retval 0： succeed * @retval -1: error */int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);/** * @brief listen for connections on a socket * * @retval 0： succeed * @retval -1: error */int listen(int sockfd, int backlog);/** * @brief  accept a connection on a socket * * @retval &lt;fd&gt;： succeed * @retval -1: error */int accept(int sockfd, struct sockaddr *restrict addr, socklen_t *restrict addrlen);/** * @brief initiate a connection on a socket *  * @retval 0： succeed * @retval -1: error */int connect(int _sockfd_, const struct sockaddr *_addr_, socklen_t _addrlen_);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/18.html"/>
      <url>/posts/18.html</url>
      
        <content type="html"><![CDATA[<h1 id="NTP"><a href="#NTP" class="headerlink" title="NTP"></a>NTP</h1><h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h2><table width="100%" border="1px solid">    <caption> ntp v3 报文格式</caption>    <tbody><tr>        <th> &nbsp; </th>        <th> 0 </th>        <th> 1 </th>        <th> 2 </th>        <th> 3 </th>        <th> 4 </th>        <th> 5 </th>        <th> 6 </th>        <th> 7 </th>        <th> 8 </th>        <th> 9 </th>        <th> 10 </th>        <th> 11 </th>        <th> 12 </th>        <th> 13 </th>        <th> 14 </th>        <th> 15 </th>        <th> 16 </th>        <th> 17 </th>        <th> 18 </th>        <th> 19 </th>        <th> 20 </th>        <th> 21 </th>        <th> 22 </th>        <th> 23 </th>        <th> 24 </th>        <th> 25 </th>        <th> 26 </th>        <th> 27 </th>        <th> 28 </th>        <th> 29 </th>        <th> 30 </th>        <th> 31 </th>    </tr>    <tr>        <td align="center"> 1 </td>        <td colspan="2" align="center"> LI </td>        <td colspan="3" align="center"> VN </td>        <td colspan="3" align="center"> Mode </td>        <td colspan="8" align="center"> Stratum </td>        <td colspan="8" align="center"> Poll </td>        <td colspan="8" align="center"> Precision </td>    </tr>    <tr>        <td align="center"> 2 </td>        <td colspan="32" align="center"> Root Delay </td>    </tr>    <tr>        <td align="center"> 3 </td>        <td colspan="32" align="center"> Root Dispersion </td>    </tr>    <tr>        <td align="center"> 4 </td>        <td colspan="32" align="center"> Reference Identifier </td>    </tr>    <tr>        <td align="center"> 5 </td>        <td colspan="32" rowspan="2" align="center"> Reference Timestamp (64) </td>    </tr>    <tr>        <td align="center"> 6 </td>    </tr>    <tr>        <td align="center"> 7 </td>        <td colspan="32" rowspan="2" align="center"> Originate Timestamp (64) </td>    </tr>    <tr>        <td align="center"> 8 </td>    </tr>    <tr>        <td align="center"> 9 </td>        <td colspan="32" rowspan="2" align="center"> Receive Timestamp (64) </td>    </tr>    <tr>        <td align="center"> 10 </td>    </tr>    <tr>        <td align="center"> 11 </td>        <td colspan="32" rowspan="2" align="center"> Transmit Timestamp (64) </td>    </tr>    <tr>        <td align="center"> 12 </td>    </tr>    <tr>        <td align="center"> 13 </td>        <td colspan="32" rowspan="2" align="center"> Authentication (optional) (64) </td>    </tr>    <tr>        <td align="center"> 14 </td>    </tr></tbody></table><ul><li><p>LI (Leap Indicator)：闰秒指示符，这是一个 2 位的整数， 用于警示在当天的最后一分钟里插入或删除的闰秒。<br>| value |      description       |<br>|:——-:|:———————————:|<br>|   0   |         无预告         |<br>|   1   |    最后一分钟又61秒    |<br>|   2   |    最后一分钟又59秒    |<br>|   3   | 警告状态（时钟位同步） |</p></li><li><p>VN(Version) : ntp 的版本号，这是一个 3 位的整数</p></li><li><p>Mode：通信模式， 这是一个 3 位的整数<br>| value | description   |<br>| ——- | ——————- |<br>| 0     | 保留          |<br>| 1     | 对称主动      |<br>| 2     | 对称被动      |<br>| 3     | 客户端        |<br>| 4     | 服务器端      |<br>| 5     | 广播          |<br>| 6     | 为NTP控制消息 |<br>| 7     | 为自用保留              |</p></li><li><p>Stratum：本地时钟层级， 这是一个 8 位的无符号整数<br>| value | description                            |<br>| ——- | ——————————————————— |<br>| 0     | 未定义或难以获得                       |<br>| 1     | 主要参考（如无线电时钟，校正的原子时钟 |<br>| 2-255 | 第二参考（通过NTP 或SNTP）             |</p></li><li><p>Poll： 轮询间隔，这是一个 8 位的无符号整数，用于表示连续消息之间的最大间隔，以最接近  2 的 n 次幂来表示。如值 6 表示 $2^6 = 64$.</p></li><li>Precision： 本地时钟精度，这是一个 8 位的有符号整数，用于表示本地时钟精度，以最接近 2 的 n 次幂来表示。</li><li>Root Delay：这是一个32位有符号定点数，表示主要参考源的总往返延迟，以秒为单位。该变量可以为正值和负值，具体取决于时间精度和偏移。</li><li>Root Dispersion：这是一个 32 位的有符号定点数， 表示相对于主参考源的最大误差，以秒位单位，到参考时钟的总采样分散程度，反应采样值的错误情况</li><li>Reference Identifier：这是一个表示特定参考源的 32 位位串。 在 NTP 版本 3 或 版本 4 层级 0 或层级 1 服务器的情况下，这是一个 4字符的ASCII 字符串，左对齐并且以0填充到32位。 在 NTP版本 3 辅助服务器中，这是参考源的 32 位 IPv4 地址。</li><li>Reference Timestamp：这是以64位时间戳格式表示上次设置或更正的本地时钟时间。</li><li>Originate Timestamp：这是以64位时间戳格式表示的请求离开客户端的时间。</li><li>Receive Timestamp：这是以64位时间戳格式表示的请求到达服务器端的时间。</li><li>Transmit Timestamp：这是以64位时间戳格式表示的应答离开服务端的时间。</li><li>Authentication：认证信息。</li></ul><h2 id="NTP时间戳"><a href="#NTP时间戳" class="headerlink" title="NTP时间戳"></a>NTP时间戳</h2><p>从1900年1月1日0时0分0秒开始</p><h2 id="时钟同步算法"><a href="#时钟同步算法" class="headerlink" title="时钟同步算法"></a>时钟同步算法</h2><p><img src="/posts/18/1920px-NTP-Algorithm.svg.png" alt="img"></p><p>时间偏移 $\theta$ 定义为: </p><script type="math/tex; mode=display">\theta = \frac{(t_1 - t_0) + (t_2 - t_3)} {2}</script><p>往返延迟 $\delta$ 为</p><script type="math/tex; mode=display">\delta = (t_3 - t_0) - (t_2 - t_1)</script><p>其中：</p><ul><li>$t_0$ 是发送请求数据包的客户端时间戳</li><li>$t_1$ 是请求数据包到达的服务器时间戳</li><li>$t_2$ 是响应数据包发送的服务器时间戳</li><li>$t_3$ 是响应数据包到达的客户端时间戳</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/5.html"/>
      <url>/posts/5.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-字节序"><a href="#C-字节序" class="headerlink" title="C 字节序"></a>C 字节序</h1><h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><p>再 gcc 和 clang 中可以使用 <code>__BYTE_ORDER__</code> 宏来判断</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 这两个宏是gcc或者clang支持的</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__BYTE_ORDER__ <span class="token operator">==</span> __ORDER_LITTLE_ENDIAN__</span></span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"小端序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">__BYTE_ORDER__<span class="token operator">==</span> __ORDER_BIG_ENDIAN__</span></span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"大端序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"未知字节序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// __BYTE_ORDER__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/19.html"/>
      <url>/posts/19.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vim-配置"><a href="#Vim-配置" class="headerlink" title="Vim 配置"></a>Vim 配置</h1><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><h3 id="Coc-vim"><a href="#Coc-vim" class="headerlink" title="Coc.vim"></a>Coc.vim</h3><ul><li>coc-json</li><li>coc-highlight<br>  高亮支持</li><li>coc-clangd</li><li>coc-go</li><li>coc-cmake</li><li>coc-emmet</li><li>coc-git</li><li>coc-jedi</li><li>coc-sh</li><li>coc-snippets</li><li>coc-vimlsp</li><li>coc-yaml</li><li>coc-syntax</li><li>coc-pairs</li><li>coc-tag</li></ul><h3 id="xterm-color-table"><a href="#xterm-color-table" class="headerlink" title="xterm-color-table"></a>xterm-color-table</h3><h3 id="vim-airline"><a href="#vim-airline" class="headerlink" title="vim-airline"></a>vim-airline</h3><h3 id="vim-airline-themes"><a href="#vim-airline-themes" class="headerlink" title="vim-airline_themes"></a>vim-airline_themes</h3><h3 id="auto-pairs"><a href="#auto-pairs" class="headerlink" title="auto-pairs"></a>auto-pairs</h3><h3 id="nerdtree"><a href="#nerdtree" class="headerlink" title="nerdtree"></a>nerdtree</h3><h3 id="vim-syntastic"><a href="#vim-syntastic" class="headerlink" title="vim-syntastic"></a>vim-syntastic</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/17.html"/>
      <url>/posts/17.html</url>
      
        <content type="html"><![CDATA[<h1 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h1><h3 id="一、控制报文的结构"><a href="#一、控制报文的结构" class="headerlink" title="一、控制报文的结构"></a>一、控制报文的结构</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Fixed header</th><th style="text-align:center">固定报头、所有控制报文都包含</th></tr></thead><tbody><tr><td style="text-align:center">Variable header</td><td style="text-align:center">可变报头，部分控制报文包含</td></tr><tr><td style="text-align:center">Payload</td><td style="text-align:center">有效载荷，部分控制报文包含</td></tr></tbody></table></div><h4 id="1-固定报头"><a href="#1-固定报头" class="headerlink" title="1. 固定报头"></a>1. 固定报头</h4><theader>        </theader><table>    <caption>固定报头格式</caption>    <tbody><tr><td><b>Bit</b></td>        <td><b>7</b></td>        <td><b>6</b></td>        <td><b>5</b></td>        <td><b>4</b></td>        <td><b>3</b></td>        <td><b>2</b></td>        <td><b>1</b></td>        <td><b>0</b></td>        </tr><tr>        <td>byte 1</td>        <td colspan="4">MQTT控制报文的类型</td>        <td colspan="4">用于指定控制报文类型的标志位</td>    </tr>    <tr>        <td>byte 2...</td>        <td colspan="8">剩余长度</td>    </tr></tbody></table><h5 id="1-1-MQTT控制报文的类型"><a href="#1-1-MQTT控制报文的类型" class="headerlink" title="1.1 MQTT控制报文的类型"></a>1.1 MQTT控制报文的类型</h5><p>Byte 1 的高4位：bit 4~7</p><div class="table-container"><table><thead><tr><th style="text-align:center">名字</th><th style="text-align:center">值</th><th style="text-align:center">报文流动方向</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">禁止</td><td style="text-align:center">保留</td></tr><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">1</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端请求连接服务器</td></tr><tr><td style="text-align:center">CONNACK</td><td style="text-align:center">2</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">连接报文确认</td></tr><tr><td style="text-align:center">PUBLISH</td><td style="text-align:center">3</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">发布消息</td></tr><tr><td style="text-align:center">PUBACK</td><td style="text-align:center">4</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">QoS 1 消息发布收到确认</td></tr><tr><td style="text-align:center">PUBREC</td><td style="text-align:center">5</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">发布收到（保证交付第一步）</td></tr><tr><td style="text-align:center">PUBREL</td><td style="text-align:center">6</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">发布释放（保证交付第二步）</td></tr><tr><td style="text-align:center">PUBCOMP</td><td style="text-align:center">7</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">QoS 2 消息发布完成（保证交付第三步）</td></tr><tr><td style="text-align:center">SUBSCRIBE</td><td style="text-align:center">8</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端订阅请求</td></tr><tr><td style="text-align:center">SUBACK</td><td style="text-align:center">9</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">订阅请求报文确认</td></tr><tr><td style="text-align:center">UNSUBSCRIBE</td><td style="text-align:center">10</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端取消订阅请求</td></tr><tr><td style="text-align:center">UNSUBACK</td><td style="text-align:center">11</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">取消订阅报文确认</td></tr><tr><td style="text-align:center">PINGREQ</td><td style="text-align:center">12</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">心跳请求</td></tr><tr><td style="text-align:center">PINGRESP</td><td style="text-align:center">13</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">心跳响应</td></tr><tr><td style="text-align:center">DISCONNECT</td><td style="text-align:center">14</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端断开连接</td></tr><tr><td style="text-align:center">Reserved</td><td style="text-align:center">15</td><td style="text-align:center">禁止</td><td style="text-align:center">保留</td></tr></tbody></table></div><h5 id="1-2-标志位"><a href="#1-2-标志位" class="headerlink" title="1.2 标志位"></a>1.2 标志位</h5><p>Byte 1的低4位： bit 0~3</p><p>表格中任何标记位 <strong>“保留”</strong> 的标志位，都是保留给以后使用的，必须设置位表格中列出的值。如果收到非法的标志，接收者<strong>必须</strong>关闭网络连接。</p><div class="table-container"><table><thead><tr><th style="text-align:center">控制报文</th><th style="text-align:center">固定报头标志</th><th style="text-align:center">Bit 3</th><th style="text-align:center">Bit 2</th><th style="text-align:center">Bit 1</th><th style="text-align:center">Bit 0</th></tr></thead><tbody><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">CONNACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">PUBLISH</td><td style="text-align:center">Used in MQTT 3.1.1</td><td style="text-align:center">DUP^1^</td><td style="text-align:center">QoS^2^</td><td style="text-align:center">QoS^2^</td><td style="text-align:center">RETAIN^3^</td></tr><tr><td style="text-align:center">PUBACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">PUBREC</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">PUBREL</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">PUBCOMP</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">SUBSCRIBE</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">SUBACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">UNSUBSCRIBE</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">UNSUBACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">PINGREQ</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">PINGRESP</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">DISCONNECT</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table></div><ul><li>DUB^1^ ：控制报文的重复分发标志</li><li>QoS^2^ ：PUBLISH报文的服务质量等级</li><li>RETAIN^3^ ：PUBLISH报文的保留标志</li></ul><h5 id="1-3-剩余长度-Remaining-Length"><a href="#1-3-剩余长度-Remaining-Length" class="headerlink" title="1.3 剩余长度 Remaining Length"></a>1.3 剩余长度 Remaining Length</h5><p>从第2个字节开始。</p><p>剩余长度（Remaining Lenght）表示当前报文剩余部分的字节数，包括可变报头和负载的数据。剩余长度不包括用于编码剩余长度字段本身的字节数。</p><p>剩余长度字段使用一个变长都编码方案，对小于128的值它使用单字节编码。更大的值按下面的方式处理，低7位有效位用于编码数据，最高有效位用于指示是否有更多的字节。因此每个字节可以编码128个数值和一个延续位 <em>(Continuation bit)</em>，剩余长度字段最大 4个字节。</p><p>剩余长度字段的大小</p><div class="table-container"><table><thead><tr><th style="text-align:center">字节数</th><th style="text-align:center">最小值</th><th style="text-align:center">最大值</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0(0x00)</td><td style="text-align:center">127(0x7F)</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">128 (0x80, 0x01)</td><td style="text-align:center">16 383 (0xFF, 0x7F)</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">16 384 (0x80 0x80 0x01)</td><td style="text-align:center">2 097 151 (0xFF, 0xFF, 0x7F)</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">2 097 152 (0x80 0x80 0x80 0x01)</td><td style="text-align:center">268 435 455 (0xFF 0xFF 0xFF 0x7F)</td></tr></tbody></table></div><h4 id="2-可变报头"><a href="#2-可变报头" class="headerlink" title="2. 可变报头"></a>2. 可变报头</h4><p>某些MQTT控制报文包含一个可变报头部分。它在固定报头和负载之间。可变报头的内容根据报文类型的不同而不同。可变报头的报文标识符（Packet Identifier）字段存在于多个类型的报文里。</p><p>报文标识符字节</p><div class="table-container"><table><thead><tr><th style="text-align:center">Bit</th><th style="text-align:center">7 - 0</th></tr></thead><tbody><tr><td style="text-align:center">Byte 1</td><td style="text-align:center">报文标识符 MSB</td></tr><tr><td style="text-align:center">Byte 2</td><td style="text-align:center">报文标识符 LSB</td></tr></tbody></table></div><p>很多控制报文的可变报头部分包含一个两字节的报文标识符字段。这些报文是 PUBLISH(QoS &gt; 0时)， PUBACK，PUBREC，PUBREL，PUBCOMP，SUBSCRIBE，SUBACK，UNSUBSCRIBE，UNSUBACK。</p><p>SUBSCRIBE，UNSUBSCRIBE和PUBLISH（QoS &gt; 0）控制报文<strong>必须</strong>包含一个非零的16位报文标识符（Packet Identifier）。</p><p>客户端每次发送一个新的这些类型的报文时都<strong>必须</strong>分配一个当前未使用的报文标识符。如果一个客户端要重发这个特殊的控制报文，在随后重发那个报文时，它<strong>必须</strong>使用相同的标识符。当客户端处理完这个报文对应的确认后，这个报文标志符就释放可重用。 </p><p>QoS 1 的 PUBLISH 对应的时PUBACK， QoS 2 的 PUBLISH 对应的是 PUBCOMP， 与 SUBSCRIBE 或UNSUBSCRIBE 对应的分别时 SUBACK 或 UNSUBACK。 发送一个 QoS 0 的 PUBLISH 报文时，相同的条件也适用于服务端。</p><p>QoS 等于 0 的 PUBLISH 报文<strong>不能</strong>包含报文标识符。</p><p>PUBACK, PUBREC, PUBREL 报文必须包含于最初发送的 PUBLISH 报文相同的报文标识符。类似的 SUBACK 和 UNSUBACK <strong>必须</strong>包含在对应的 SUBSCRIBE 和 UNSUBSCRIBE 报文中使用的报文标识符。</p><div class="table-container"><table><thead><tr><th style="text-align:center">控制报文</th><th style="text-align:center">报文标识符字段</th></tr></thead><tbody><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">CONNACK</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBLISH</td><td style="text-align:center">需要（如果 QoS &gt; 0）</td></tr><tr><td style="text-align:center">PUBACK</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">PUBREC</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">PUBREL</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">PUBCOMP</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">SUBSCRIBE</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">SUBACK</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">UNSUBSCRIBE</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">UNSUBACK</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">PINGREQ</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PINGRESP</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">DISCONNECT</td><td style="text-align:center">不需要</td></tr></tbody></table></div><h4 id="3-有效载荷-Payload"><a href="#3-有效载荷-Payload" class="headerlink" title="3. 有效载荷 Payload"></a>3. 有效载荷 Payload</h4><p>某些MQTT控制报文在报文的最后部分包含一个有效载荷。</p><div class="table-container"><table><thead><tr><th style="text-align:center">控制报文</th><th style="text-align:center">有效载荷</th></tr></thead><tbody><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">CONNACK</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBLISH</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">PUBACK</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBREC</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBREL</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBCOMP</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">SUBSCRIBE</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">SUBACK</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">UNSUBSCRIBE</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">UNSUBACK</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PINGREQ</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PINGRESP</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">DISCONNECT</td><td style="text-align:center">不需要</td></tr></tbody></table></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/16.html"/>
      <url>/posts/16.html</url>
      
        <content type="html"><![CDATA[<h1 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h1><h2 id="色彩模式"><a href="#色彩模式" class="headerlink" title="色彩模式"></a>色彩模式</h2><p>色彩模式时数字世界表示颜色的一种算法</p><h2 id="色光三原色"><a href="#色光三原色" class="headerlink" title="色光三原色"></a>色光三原色</h2><p>色光三原色： 红（Red）、绿（Green）、蓝（Blue）三种色光。稱為三原色的原因，是由於它們無法再被分解，也不能由其他色光混合出來。<br>红色加上绿色会得到黄色，绿色加上蓝色会得到青色，蓝色加上红色会得到洋红色，而色光三原色相加会形成白色。色光进行混合后，往往会形成比原本明亮的色彩，这种现象称作 ‘加法混合‘。</p><h2 id="色料三原色"><a href="#色料三原色" class="headerlink" title="色料三原色"></a>色料三原色</h2><p>色料三原色: 青（Cyan）、洋红（Magenta）、黄（Yellow）三种色彩。<br>青色混合洋红会得到蓝色， 洋红色混合黄色会的到红色，黄色混合青色会得到绿色，而色料三原色混合会形成近似黑色。由于色料三原色无法混合出真正的黑色，因此实际应用时（例如印刷、喷墨列印）往往会加入黑色（Black），即所谓的 CMYK 四种基本色。由于色料具有吸收光线的特性，因此在进行混合后，往往会形成比原本暗淡的色彩，这种现象称作 ’减法混合‘.</p><p><img src="/posts/16/rgb_cmyk01.png" alt="img"></p><p>以色光和色料三原色卫基础色相，彼此插补并环绕成环状称作色相环。在色相环直径两端的色彩互为补色关系，例如：黄与蓝为互补色、红与青互为补色。熟悉色相环中各色彩的排列顺序，有助于推测色彩混合结果，电脑绘图校调色彩时将更是得心应手。</p><p><img src="/posts/16/rgb_cmyk03.png" alt=""></p><h2 id="色彩三要素"><a href="#色彩三要素" class="headerlink" title="色彩三要素"></a>色彩三要素</h2><h3 id="色相（Hue）"><a href="#色相（Hue）" class="headerlink" title="色相（Hue）"></a>色相（Hue）</h3><p>用来区分色彩的名称，通俗来说就是表达什么颜色。例如：紅色草莓、黃色的花、藍色天空、綠色蔬菜，其中的紅、黃、藍、綠就是所謂的色相。</p><p><img src="/posts/16/theColor01.jpg" alt="img"></p><p><img src="/posts/16/chromatics-hue.jpg" alt="img"></p><h3 id="明度（Value）"><a href="#明度（Value）" class="headerlink" title="明度（Value）"></a>明度（Value）</h3><p>明度指色彩的明亮程度（常用来形容色相的敏感），例如浅红色和暗红色属同一色相，但前者明度较高，后者明度较低。调色时，将色彩混入白色可以提高明度，将色彩混入黑色则会降低明度。</p><p><img src="/posts/16/theColor03.jpg" alt="img"></p><h3 id="彩度（Chroma）"><a href="#彩度（Chroma）" class="headerlink" title="彩度（Chroma）"></a>彩度（Chroma）</h3><p>彩度用来区分色彩鲜艳程度，简单来说就是色彩的鲜艳度。就同一色相来说，彩度最高称为纯色，其中完全补含黑白成份。若把纯色混入黑色或白色，彩度就会降低。若以彩度来区分，色彩又可分为 ==有彩色== 和 ==无彩色==。 有彩色是指具有彩度的颜色，例如鲜黄色、粉红色、墨绿色都是（无论彩度高或低）。无彩色则是完全没有彩度的颜色，只有黑白的成份，例如浅灰色、黑色、 白色。</p><p><img src="/posts/16/theColor05.jpg" alt="img"></p><p><img src="/posts/16/chromatics-chroma-2.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Arch Linux 安装</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Arch-Linux-安装"><a href="#Arch-Linux-安装" class="headerlink" title="Arch Linux 安装"></a>Arch Linux 安装</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/freerqy/p/8502838.html">在VMWare上安装Arch Linux</a></li><li><a href="https://www.viseator.com/2017/05/19/arch_setup/">ArchLinux安装后的必须配置与图形界面安装教程</a></li></ul><h2 id="一、-安装前的准备"><a href="#一、-安装前的准备" class="headerlink" title="一、 安装前的准备"></a>一、 安装前的准备</h2><h3 id="1-制作Arch-Linux启动盘-LIve-CD"><a href="#1-制作Arch-Linux启动盘-LIve-CD" class="headerlink" title="1. 制作Arch Linux启动盘 (LIve CD)"></a>1. 制作Arch Linux启动盘 (LIve CD)</h3><ul><li><p>如果是在虚拟机中安装<strong>Arch linux</strong>，仅需将镜像文件应用于虚拟机中即可，我使用的是VMware，步骤为 <em>虚拟机 -&gt; 设置 -&gt; 硬件 -&gt; CD/DVD -&gt; 使用ISO镜像文件 -&gt; 浏览（找到镜像文件的位置）</em>。</p></li><li><p>如果是安转实体机需要制作<strong>Live CD（自生系统）</strong>，这一步有多种可选择的方法。</p></li></ul><h4 id="1-1-下载并校验镜像文件"><a href="#1-1-下载并校验镜像文件" class="headerlink" title="1.1. 下载并校验镜像文件"></a>1.1. 下载并校验镜像文件</h4><p>可以再<a href="https://www.archlinux.org/download/">Arch Linux官网</a>下载镜像文件，它的 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwiki.archlinux.org%2Findex.php%2FGnuPG">GnuPG</a> 签名可以从下载页面中找到。</p><h4 id="1-2-制作Live-CD"><a href="#1-2-制作Live-CD" class="headerlink" title="1.2. 制作Live CD"></a>1.2. 制作Live CD</h4><ul><li><p>使用<strong>Ultra ISo、Rufus</strong>等工具进行刻录制作Live CD。</p></li><li><p>在Linux下使用命令进行刻录</p><p>  首先你需要查看U盘，找到U盘的设备文件</p>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># sudo fdisk -l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  然后使用 <code>dd</code>命令进行刻录</p>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># dd bs=4M if=/path/to/archlinux.iso of=/dev/sdb status=progress oflag=sync</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  其中，<code>/path/to/archlinux.iso</code>为arch镜像路径，<code>/dev/sdb</code>为上一步中查看的U盘分区，使用<code>oflag</code>来控制输出（写入数据）时的行为特征，确保命令结束时数据及元数据真正吸入磁盘，而不是刚写入缓存就返回，<code>status=LEVEL</code>用来控制<code>dd</code>程序的输出信息，<code>LEVEL</code>有三个选项<code>none</code>、<code>noxfer</code>和<code>progress</code>，默认是<code>progress</code>，<code>none</code>的意思是不输出任何相关信息，除非是出错信息，<code>noxfer</code>不会输出最后的统计信息，而<code>progress</code>会输出所有信息。</p></li></ul><h3 id="2-启动Live-CD"><a href="#2-启动Live-CD" class="headerlink" title="2. 启动Live CD"></a>2. 启动<strong>Live CD</strong></h3><p>根据所使用的硬件设备，如U盘、DVD等，可以修改启动顺序或者在启动菜单中选择启动项来启动Live CD。</p><h3 id="3-配置Live-CD环境"><a href="#3-配置Live-CD环境" class="headerlink" title="3. 配置Live CD环境"></a>3. 配置<strong>Live CD</strong>环境</h3><h4 id="3-1-验证启动模式"><a href="#3-1-验证启动模式" class="headerlink" title="3.1. 验证启动模式"></a>3.1. 验证启动模式</h4><p>如果在UEFI主板上启用 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwiki.archlinux.org%2Findex.php%2FUEFI">UEFI</a> 模式，<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwiki.archlinux.org%2Findex.php%2FArchiso">Archiso</a> 将会使用 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwiki.archlinux.org%2Findex.php%2FSystemd-boot_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87">systemd-boot</a>) 来启动 Arch Linux 。</p><p>可以列出 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwiki.archlinux.org%2Findex.php%2FUEFI%23UEFI_variables">efivars</a> 目录一验证启动模式。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># ls /sys/firmware/efi/efivars</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令没有错误，则系统以 UEFI 模式启东，如果目录不存在，系统肯恩工艺 BIOS 或 CSM 模式 启动。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># cat /sys/firmware/efi/fw_platform_size</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果启动该模式为UEFI模式，该命令会返回一个数值，如果数值为64，表示使用的是64-bit (x86_64) UEFI，如果数值为32，表示使用的是 32-bit (IA32) UEFI。</p><h4 id="3-2-连接因特网"><a href="#3-2-连接因特网" class="headerlink" title="3.2. 连接因特网"></a>3.2. 连接因特网</h4><p>如果是有线网，可以使用下面的命令：</p>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># ip link show  # </span><span class="token comment"># dhcpcd  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   如果是无线网，则需使用下面的命令进行配置：</p>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># wifi-menu</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   配置完成后，可以使用下面的命令进行测试：</p>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># ping -c 4 www.baidu.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-更新系统时间"><a href="#3-3-更新系统时间" class="headerlink" title="3.3. 更新系统时间"></a>3.3. 更新系统时间</h4><p>命令如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># timedatectl set-ntp true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>timedatectl status</code>命令检查服务状态。</p><h3 id="4-硬盘配置"><a href="#4-硬盘配置" class="headerlink" title="4. 硬盘配置"></a>4. 硬盘配置</h3><h4 id="4-1-查看硬盘分区"><a href="#4-1-查看硬盘分区" class="headerlink" title="4.1. 查看硬盘分区"></a>4.1. 查看硬盘分区</h4><p>可以使用<code>lsblk</code>或<code>fdisk -l</code>来查看分区</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># lsblk</span><span class="token comment"># fdisk -l</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到硬盘设备，可能为<code>/dev/sda</code>或<code>/dev/nvme01</code>之类的，具体视自己的设备而定。</p><h4 id="4-2-建立硬盘分区"><a href="#4-2-建立硬盘分区" class="headerlink" title="4.2. 建立硬盘分区"></a>4.2. 建立硬盘分区</h4><p>分区有多种选择如<code>parted</code>、<code>fdisk</code>等工具，建议选用自己熟悉的工具。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># fdisk /dev/sdx</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>/dev/sdx</code>为目标磁盘。</p><p>下面为 Arch wiki 中的分区示例</p><table style="margin:auto">    <caption><b>BIOS With MBR</b></caption>    <tbody><tr>        <th>Mount Point</th>        <th>Partition</th>        <th>Partition Type</th>        <th>Suggetsed Size</th>    </tr>    <tr>        <td>/mnt</td>        <td>/dev/root_partition</td>        <td>Linux</td>        <td>Remainder of the device</td>    </tr>    <tr>        <td>[SWAP]</td>        <td>/dev/swap_partition</td>        <td>Linux Swap</td>        <td>More than 512MiB</td>    </tr></tbody></table><br><table>    <caption><b>UEFI With GPT</b></caption>    <tbody><tr>        <th>Mount Point</th>        <th>Partition</th>        <th>Partition Type</th>        <th>Suggested Size</th>    </tr>    <tr>        <td>/mnt/boot  OR /mnt/efi</td>        <td>/dev/efi_system_partition</td>        <td>EFI System Partition</td>        <td>At Least 260 Mib</td>    </tr>    <tr>        <td>[SWAP]</td>        <td>/dev/swap_partition</td>        <td>Linux Swap</td>        <td>More than 512MiB</td>    </tr>    <tr>        <td>/mnt</td>        <td>/dev/root_partition</td>        <td>Linux x86-64 root(/)</td>        <td>Remainder of the device</td>    </tr></tbody></table><h4 id="4-3-格式化分区"><a href="#4-3-格式化分区" class="headerlink" title="4.3. 格式化分区"></a>4.3. 格式化分区</h4>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># mkfs.fat  /dev/sdax      # 格式化EFI分区</span><span class="token comment"># mkfs.ext4 /dev/sdax    # 格式化根分区</span><span class="token comment"># mkswap /dev/sdax      # 格式化交换分区</span><span class="token comment"># swapon /dev/sdax       # 打开swap分区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-挂载分区"><a href="#4-4-挂载分区" class="headerlink" title="4.4. 挂载分区"></a>4.4. 挂载分区</h4><p>挂载是有顺序的，按照文件系统目录结构，先挂载顶层目录，在这里，我们先挂载根分区，然后挂载启动分区</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># mount /dev/sdax /mnt  # 将根分区挂载到/mnt</span><span class="token comment"># mkdir -p /mnt/boot/EFI</span><span class="token comment"># mount /dev/sdax /mnt/boot/EFI  # 将EFI分区挂载到/mnt/boot/EFI </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="1-更换镜像源"><a href="#1-更换镜像源" class="headerlink" title="1. 更换镜像源"></a>1. 更换镜像源</h3><p>修改<code>/etc/pacman.d/mirrorlist</code>文件中的内容，找到对应的地区镜像源并将其剪切到源列表头部即可。这里我们使用 vim 编辑器。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># vim /etc/pacman.d/mirrorlist</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行上面的命令行后，输入<code>/China</code>按<kbd>Enter</kbd>进行搜索，找到中国的源，如中科大USTC源、清华tuan源等任意一个或多个，并将源剪切，粘贴到最前面即可。</p><h3 id="2-安装必须的软件包"><a href="#2-安装必须的软件包" class="headerlink" title="2. 安装必须的软件包"></a>2. 安装必须的软件包</h3><p>使用 <code>pacstrap</code> 脚本，安装 <code>base</code> 软件包和 Linux 内核以及常规硬件的固件。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># pacstrap /mnt base base-devel linux linux-firmware</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完上面的命令行后，系统的基础环境就安装好了，接下来我们还需要进行一些必要的配置和工具的安装。</p><h2 id="三、-系统基本配置"><a href="#三、-系统基本配置" class="headerlink" title="三、 系统基本配置"></a>三、 系统基本配置</h2><h3 id="1-fstab"><a href="#1-fstab" class="headerlink" title="1. fstab"></a>1. fstab</h3><p>fstab 文件是用于定义磁盘分区，各种其他块设备或远程文件系统应如何装入文件系统的。</p><p>在启动时，系统会根据该文件的描述自动挂载分区。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查生成的<code>/mnt/etc/fstab</code>文件是否正确</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># cat /mnt/etc/fstab</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-Chroot"><a href="#2-Chroot" class="headerlink" title="2. Chroot"></a>2. Chroot</h3><p>Change root into the new system</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># arch-chroot /mnt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-时区"><a href="#3-时区" class="headerlink" title="3. 时区"></a>3. 时区</h3><p>一般的格式为：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># ln -sf /usr/share/zoneinfo/Region/City /etc/localtime</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在中国，我们可以使用下面的命令行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-本地化"><a href="#4-本地化" class="headerlink" title="4. 本地化"></a>4. 本地化</h3><p>本地化的程序与库若要本地化，都依赖 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwiki.archlinux.org%2Findex.php%2FLocale">Locale</a> ，后者明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准等等。在下面两个文件设置：<code>locale.gen</code>与<code>locale.conf</code>。</p><p><code>/etc/locale.gen</code>是一个仅包含注释文档的文本文件。指定更需要的本地化类型，只需移除对应行前面的注释符号（<code>#</code>）即可，建议选择带<code>UTF-8</code>的项，使用下面的命令打开<code>locale.gen</code>文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># vim /etc/locale.gen # vim可以使用 pacman -S vim 安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到下面3项，去掉没项前面的<code>#</code>即可：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">en_US.UTF-8 UTF-8zh_CN.UTF-8 UTF-8zh_TW.UTF-8 UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行<code>locale-gen</code>以生成 locale 讯息：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># locale-gen</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建<code>locale.conf</code>并编辑 设定 LANG 变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># vim /etc/locale.conf </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将下面的内容写入<code>locale.conf</code>文件中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-设置主机名"><a href="#5-设置主机名" class="headerlink" title="5. 设置主机名"></a>5. 设置主机名</h3><p>创建<code>/et/hostname</code>文件并将主机名写入该文件。如下主机名为 archlinux:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># echo archlinux &gt; /etc/hostname</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后配置主机名对应的IP到<code>/etc/hosts</code>中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># vim /etc/hosts </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 <code>vim</code> 编辑器没有安装可以使用命令 <code>pacman -S vim</code> 进行安装。</p><p>然后根据下面的内容，编辑文件内容，将对应的<code>myhostname</code> 替换成 <code>hostname</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">127.0</span>.0.1localhost::1localhost<span class="token number">127.0</span>.1.1myhostname.localdomainmyhostname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-设置root用户密码"><a href="#6-设置root用户密码" class="headerlink" title="6. 设置root用户密码"></a>6. 设置root用户密码</h3>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  输入上述命令后，再输入两次密码即可。</p><h3 id="7-安装引导程序"><a href="#7-安装引导程序" class="headerlink" title="7. 安装引导程序"></a>7. 安装引导程序</h3><p>需要安装 Linux 引导加载程序，才能在安装后启动系统给，可以使用的引导程序可以<a href="https://wiki.archlinux.org/index.php/Boot_loaders_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87">点击查询</a>) 。</p><p>grub 是最常见的选择，这里我们安装 grub 引导加载程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># UEFI 启动</span><span class="token comment"># pacman -S grub efibootmgr</span><span class="token comment"># grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=grub</span><span class="token comment"># grub-mkconfig -o /boot/grub/grub.cfg</span><span class="token comment"># BIOS 启动</span><span class="token comment"># pacman -S grub-bios</span><span class="token comment"># grub-install /dev/sda</span><span class="token comment"># grub-mkconfig -o /boot/grub/grub.cfg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-重启"><a href="#8-重启" class="headerlink" title="8. 重启"></a>8. 重启</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># exit# 退回到安装环境</span><span class="token comment"># umount -R /mnt# 卸载新分区</span><span class="token comment"># reboot# 重启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>到这里我们的系统的基本配置就完成了。</p><h2 id="四、-优化配置"><a href="#四、-优化配置" class="headerlink" title="四、 优化配置"></a>四、 优化配置</h2><h3 id="1-创建新用户"><a href="#1-创建新用户" class="headerlink" title="1. 创建新用户"></a>1. 创建新用户</h3><p>因为使用root用户登录后，root用户拥有系统的所有操作权限，这样对系统操作非常不安全（如一不小心将系统文件删除了怎么办？），所以需要新建一个普通用户，让其对系统的操作收到一定限制，命令格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># useradd -m -g 初始用户组 -G 额外用户组 -s 登录shell  用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">useradd</span> -m -G wheel -s /bin/bash asd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2. 删除用户"></a>2. 删除用户</h3><p>如果不小心添加了一个不需要的用户，可以将其删除。<code>-r</code>选项表示在删除的时候同时删除器用户目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># userdel 用户名 -r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-允许提权"><a href="#3-允许提权" class="headerlink" title="3. 允许提权"></a>3. 允许提权</h3><p>在一般情况下，如果要将一个用户设为管理员，就要将其加入到<code>wheel</code>用户组中，这样就可以使用su和sudo命令执行需要高级权限的操作，但是在Arch中，<code>wheel</code>用户组默认没有提权的权限。这就需要编辑<code>/etc/sudoers</code>文件，然后找到<code>wheel ALL=(ALL) ALL</code>一行，并取消前面的注释，保存即可。这样，wheel用户组中的用户就可以利用su或者sudo命令来提权了。</p><h3 id="4-网络配置"><a href="#4-网络配置" class="headerlink" title="4. 网络配置"></a>4. 网络配置</h3><h4 id="4-1-无线网络连接"><a href="#4-1-无线网络连接" class="headerlink" title="4.1. 无线网络连接"></a>4.1. 无线网络连接</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 使用 iwctl 工具</span><span class="token comment"># pacman -S iwd  # 安装工具</span><span class="token comment"># iwctl # 进入配置</span><span class="token punctuation">[</span>iwd<span class="token punctuation">]</span><span class="token comment"># station list# 查看开启的无线设备列表</span><span class="token punctuation">[</span>iwd<span class="token punctuation">]</span><span class="token comment"># device list # 如果列表为空，则查看无线设备列表</span><span class="token punctuation">[</span>iwd<span class="token punctuation">]</span><span class="token comment"># device wlan0 show # 查看无线设备 wlan0 的状态</span><span class="token punctuation">[</span>iwd<span class="token punctuation">]</span><span class="token comment"># station wlan0 scan # 扫描WIFI</span><span class="token punctuation">[</span>iwd<span class="token punctuation">]</span><span class="token comment"># station wlan0 get-network # 显示 WIFI 列表</span><span class="token punctuation">[</span>iwd<span class="token punctuation">]</span><span class="token comment"># station wlan0 connect ssid # 连接 WIFI ,ssid 为 WIFI 名称</span><span class="token comment"># pacman -S iw wpa_supplicant dialog</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-有线连接"><a href="#4-2-有线连接" class="headerlink" title="4.2. 有线连接"></a>4.2. 有线连接</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># pacman -S dhcpcd</span><span class="token comment"># systemctl start dhcpcd</span><span class="token comment"># systemctl enable dhcpcd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-添加-archlinuxcn-源"><a href="#5-添加-archlinuxcn-源" class="headerlink" title="5. 添加 archlinuxcn 源"></a>5. 添加 <code>archlinuxcn</code> 源</h3><p>在 <code>/etc/pacman.conf</code> 文件末尾添加以下两行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>archlinuxcn<span class="token punctuation">]</span>Server <span class="token operator">=</span> https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="token variable">$arch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后安装 GPG Key</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Syu<span class="token function">sudo</span> pacman -S arhclinuxcn-keyring // 安装PGP键环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-安装-yay"><a href="#6-安装-yay" class="headerlink" title="6. 安装 yay"></a>6. 安装 <code>yay</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S yay---<span class="token function">sudo</span> pacman -S <span class="token function">git</span> go base-devel<span class="token function">git</span> clone https://aur.archlinux.org/yay.git<span class="token builtin class-name">cd</span> yay makepkg -si<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>aururl</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay --aururl <span class="token string">"https://aur.tuna.tsinghua.edu.cn"</span> --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yay 使用：选项与 pacman 相同</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -Syy <span class="token comment"># apt update</span>pacman -Syu<span class="token comment"># apt update &amp;&amp; apt dist-upgrade</span>pacman -S <span class="token punctuation">[</span>PackageName<span class="token punctuation">]</span><span class="token comment"># apt install [PackageName]</span>pacman -Sy <span class="token punctuation">[</span>PackageName<span class="token punctuation">]</span><span class="token comment"># apt update &amp;&amp; aptinstall [PackageName]</span>pacman -R <span class="token punctuation">[</span>PackageName<span class="token punctuation">]</span><span class="token comment"># apt remove [PackageName]</span>pacman -Rs <span class="token punctuation">[</span>PackageName<span class="token punctuation">]</span><span class="token comment"># apt remove [PackageName] &amp;&amp; apt autoremove</span>pacman -Scc<span class="token comment"># apt clean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-安装图形界面"><a href="#7-安装图形界面" class="headerlink" title="7. 安装图形界面"></a>7. 安装图形界面</h3><h4 id="7-1-安装-Xorg服务"><a href="#7-1-安装-Xorg服务" class="headerlink" title="7.1. 安装 Xorg服务"></a>7.1. 安装 Xorg服务</h4><p><code>Xorg</code> 是 <code>Linux</code> 下的一个著名的开源图形服务，我们的桌面环境需要 <code>Xorg</code> 的支持。</p><p><strong>注意</strong>：如果是虚拟机只需安装<code>Xorg</code>即可。</p><p>执行如下命令安装 <code>Xorg</code> 及相关组件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S xorg xorg-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-2-显卡驱动的安装"><a href="#7-2-显卡驱动的安装" class="headerlink" title="7.2. 显卡驱动的安装"></a>7.2. 显卡驱动的安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S xf86-video-intel <span class="token comment"># intel</span><span class="token function">sudo</span> pacman -S xf86-video-ati<span class="token comment"># amd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7-4-安装输入设备"><a href="#7-4-安装输入设备" class="headerlink" title="7.4. 安装输入设备"></a>7.4. 安装输入设备</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S xf86-input-libinput <span class="token function">sudo</span> pacman -S xf86-input-synaptics<span class="token comment"># 触摸板驱动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7-5-安装桌面登录管理器"><a href="#7-5-安装桌面登录管理器" class="headerlink" title="7.5. 安装桌面登录管理器"></a>7.5. 安装桌面登录管理器</h4><p>推荐使用 <code>sddm</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S sddm sddm-kcm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="设置开机启动-sddm-服务"><a href="#设置开机启动-sddm-服务" class="headerlink" title="设置开机启动 sddm 服务"></a>设置开机启动 <code>sddm</code> 服务</h5><p>这里就要介绍一下 <code>Arch</code> 下用于管理系统服务的命令 <code>systemctl</code> 了，服务的作用就是字面意思，为我们提供特定的服务，不如 <code>sddm</code> 就为我们提供了启动 <code>xorg</code> 与管理桌面环境的服务。</p><p>命令的使用并不复杂：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start <span class="token punctuation">[</span>ServerName<span class="token punctuation">]</span><span class="token comment"># 启动一项服务</span><span class="token function">sudo</span> systemctl stop <span class="token punctuation">[</span>ServerName<span class="token punctuation">]</span><span class="token comment"># 停止一项服务</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token punctuation">[</span>ServerName<span class="token punctuation">]</span><span class="token comment"># 开机启动一项服务</span><span class="token function">sudo</span> systemctl disable <span class="token punctuation">[</span>ServerName<span class="token punctuation">]</span> <span class="token comment"># 取消开机启动一项服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以在这里我们就执行下面的命令来设置开机启动 <code>sddm</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> sddm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改sddm 主题</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> sddm --example-config <span class="token operator">&gt;</span> /etc/sddm.conf<span class="token comment"># 打开 /sur/share/sddm/themes目录，看看有哪些主题</span><span class="token comment"># 修改/etc/sddm.conf, 在 current 行的后面添加主题名称，如： Current = maya</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="7-6-安装桌面环境"><a href="#7-6-安装桌面环境" class="headerlink" title="7.6. 安装桌面环境"></a>7.6. 安装桌面环境</h4><p><code>Linux</code> 下有很多著名的桌面环境如 <code>Xfce</code>、<code>KDE(Plasma)</code>、<code>Gnome</code>、<code>Unity</code>、<code>Deepin</code>等，它们的外观、操作、设计理念等各方面都有所不同给，在它们之间的比较与选择网上有很多的资料可以查询。</p><p>在这里我们选择笔者使用的 </p><p><code>Xfce</code> 和非常流行的 <code>KDE(Plasma)</code> 作为示范，当然你也可以把它们全部装上换着用，因为<code>Linux</code>的模块化，这样完全没有问题。</p><blockquote>    更多的桌面环境的安装指南请参考    https://wiki.archlinux.org/index.php/Desktop_environment#List_of_desktop_environments</blockquote><h5 id="安装-Xfce"><a href="#安装-Xfce" class="headerlink" title="安装 Xfce"></a>安装 <code>Xfce</code></h5><p>直接安装软件包组（包含了很多软件包）即可：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> pacman -S xfce4 xfce4-goodies<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="安装-KDE-Plasma"><a href="#安装-KDE-Plasma" class="headerlink" title="安装 KDE(Plasma)"></a>安装 <code>KDE(Plasma)</code></h5><p>直接安装软件包组（包含了很多软件包）即可：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> pacman -S plasma kde-applications<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-7-安装声音管理器"><a href="#7-7-安装声音管理器" class="headerlink" title="7.7. 安装声音管理器"></a>7.7. 安装声音管理器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S alsa-utils pulseaudio pulseaudio-alsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-8-安装蓝牙驱动"><a href="#7-8-安装蓝牙驱动" class="headerlink" title="7.8. 安装蓝牙驱动"></a>7.8. 安装蓝牙驱动</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yay -S bluez bluez-utils blueman$ yay -S pulseaudio-bluetooth  <span class="token comment"># 要使用蓝牙耳机或音响的话需要安装 pulseaudio-bluetooth</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7-9-Nvidia-独显驱动"><a href="#7-9-Nvidia-独显驱动" class="headerlink" title="7.9. Nvidia 独显驱动"></a>7.9. Nvidia 独显驱动</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ lspci  <span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">"(VGA|3D)"</span>  <span class="token comment"># 查看 NVIDIA 独显型号</span>$ yay -S nvidia<span class="token comment"># 安装合适显卡驱动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装好 <code>NVIDIA</code> 驱动后默认会生成 <code>/etc/X11/xorg.conf</code> 配置文件，如没有生成则执行以下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> nvidia-xconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最小配置如下：</p><p><em>注意：PCI 地址是 提到 NVIDIA 的输出行的前7个字符，看起来像 01:00.0，在 <code>xorg.conf</code> 中，需转换为 <code>#:#:#</code>，例如 <code>01:00.0</code> 应该写成 <code>1:0:0</code></em> </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Section <span class="token string">"Module"</span>Load <span class="token string">"modesetting"</span>EndSectionSection <span class="token string">"Device"</span>Identifier<span class="token string">"nvidia"</span>Driver<span class="token string">"nvidia"</span>BusID<span class="token string">"&lt;BusID for NVIDIA device here&gt;"</span> <span class="token comment"># 修改为相应的 busID</span>Option<span class="token string">"AllowEmptyInitialConfiguration"</span>EndSection<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sddm配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># sudo vim /usr/share/sddm/scripts/Xsetup</span>xrandr --setprovideroutputsource modesetting NVIDIA-0xrandr --auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重新启动</p><p>解决屏幕撕裂</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># sudo vim /etc/default/grub  # 在内核选项中添加参数</span><span class="token assign-left variable">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="token operator">=</span><span class="token string">"nvidia-drm.modeset=1"</span><span class="token comment"># sudo vim /etc/mkinitcpio.conf</span><span class="token assign-left variable">MODULES</span><span class="token operator">=</span><span class="token punctuation">(</span>nouveau nvidia nvidia_modeset nvidia_uvm nvidia-drm<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行下面的命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> mkinitcpio -p linux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 N 卡是否正常工作</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-安装-oh-my-zsh"><a href="#8-安装-oh-my-zsh" class="headerlink" title="8. 安装 oh-my-zsh"></a>8. 安装 <code>oh-my-zsh</code></h3><p>确保 <code>git</code>、<code>wget</code>、<code>curl</code> 已经安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S <span class="token function">git</span> <span class="token function">wget</span> <span class="token function">curl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 <code>oh-my-zsh</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># install oh-my-zsh via curl</span>$ <span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span class="token comment"># install oh-my-zsh via wget</span>$ <span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载插件，插件需要下载到 <code>`~/.oh-my-zsh/plugins</code> 目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.oh-my-zsh/plugins<span class="token function">git</span> clone git://github.com/zsh-users/zsh-autosuggestions.git<span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下载好后在 <code>~/.zshrc</code> 文件中加入上述插件</p><p>找到 <code>plugins=git</code>， 改为如下（sudo 插件无需下载，效果为连续按两次 <kbd>esc</kbd> 键给命令加上 <code>sudo</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">git</span><span class="token function">sudo</span>zsh-syntax-highlightingzsh-autosuggestions<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使插件生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-安装中文字体和中文输入法"><a href="#9-安装中文字体和中文输入法" class="headerlink" title="9. 安装中文字体和中文输入法"></a>9. 安装中文字体和中文输入法</h3><h4 id="9-1-安装中文字体"><a href="#9-1-安装中文字体" class="headerlink" title="9.1 安装中文字体"></a>9.1 安装中文字体</h4><p>可以使用下面的命令进行安装，在安装后需要重启或者注销重新登陆</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -S wqy-microhei wqy-microhei-lite wqy-zenhei wqy-bitmapfont<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他字体</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 安装 adobe 无衬线字体</span><span class="token function">sudo</span> pacman -S adobe-source-han-sans-otc-fonts<span class="token comment"># 安装 adobe 衬线字体</span><span class="token function">sudo</span> pacman -S adobe-source-han-serif-otc-fonts<span class="token comment"># 安装 noto 中文字体</span><span class="token function">sudo</span> pacman -S noto-fonts noto-fonts-cjk<span class="token comment"># 安装 noto emoji 表情包</span><span class="token function">sudo</span> pacman -S noto-fonts-emoji<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，adobe 字体可用于终端模拟器和文本编辑器等大部分桌面应用程序，而 noto 字体被指定为 icecat 浏览器的以来组建，故有 noto 中文来呈现网页内容。如果你使用 icecat 以外的浏览器，或许需要六七它对字体的要求。</p><h4 id="9-2-安装拼音输入法"><a href="#9-2-安装拼音输入法" class="headerlink" title="9.2 安装拼音输入法"></a>9.2 安装拼音输入法</h4><ol><li>安装输入法引擎 ibus-rime</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> pacman -S ibus-rime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 rime, 会自动帮你安装 ibus 输入法模块。在其中你可以添加任意输入法，更改它们的设置，以及在应用程序中切换输入法。输入法的默认切换键是 <code>Super + Space</code>。 Super 就是传说中的 <kbd>Win</kbd>键。</p><ol><li>运行 ibus-setup 的初始程序</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ibus-setup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它会启动后台程序并给你这条信息</p><pre class="line-numbers language-none"><code class="language-none">IBus has been started! If you cannot use IBus, please add below lines in $HOME/.bashrc, and relogin your desktop.（译：IBus已启动！如果您还不能用Ibus,请您先将以下的三行代码加到$HOME/.bashrc，再重新登录。)  export GTK_IM_MODULE=ibus  export XMODIFIERS=@im=ibus  export QT_IM_MODULE=ibus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote>    虽然 ibus 使用一个后台程序，但是它不是被 systemd 管理的那种后台程序，普通用户也可以运行，当你登陆时他会启动。<br>    但是，如果 ibus 尚未启动，先将那些 "export" 的代码复制到 $HOME/.xprofile, 并将这行代码添加到该文件： “ibus-daemon -x -d", 再重新登录。</blockquote><h3 id="10-安装谷歌浏览器"><a href="#10-安装谷歌浏览器" class="headerlink" title="10. 安装谷歌浏览器"></a>10. 安装谷歌浏览器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 使用 AUR 帮助器安装 Google Chrome</span>yay -S google-chrome<span class="token comment"># install</span>yay -Syu<span class="token comment">## update</span><span class="token comment"># 在没有 AUR 帮助器的情况下安装 Google Chrome</span><span class="token comment"># install</span><span class="token function">git</span> clone https://aur.archlinux.org/google-chrome.git<span class="token builtin class-name">cd</span> google-chromemakepkg -si<span class="token comment"># update</span><span class="token function">git</span> pullmakepkg -si<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-安装-Typora"><a href="#11-安装-Typora" class="headerlink" title="11. 安装 Typora"></a>11. 安装 Typora</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yay -S typora<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-安装-Steam"><a href="#12-安装-Steam" class="headerlink" title="12. 安装 Steam"></a>12. 安装 Steam</h3><p>由于 Steam 是32为程序且包含了一堆的32位库，所以64位 ArchLinux 要安装 Steam 的话首先要启用 Mulitilib</p><p>编辑 <code>/etc/pacman.conf</code> 文件， 将 <code>[multilib]</code> 字段的注释去掉。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>multilib<span class="token punctuation">]</span>Include <span class="token operator">=</span> /etc/pacman.d/mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后更新并安装 Steam</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yay -Syu$ yay -S steam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>issues:</p><p>如果打开　steam 后出现界面模糊，字体不清晰，可能是字体问题，我们需要安装 steam 支持的字体</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yay -S steam-fonts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="13-安装网络分析器"><a href="#13-安装网络分析器" class="headerlink" title="13. 安装网络分析器"></a>13. 安装网络分析器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yay -S wireshark-qt$ <span class="token function">sudo</span> gpasswd -a <span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span> wireshark // 不用 <span class="token function">sudo</span>  权限即可抓网卡<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="14-安装-docker"><a href="#14-安装-docker" class="headerlink" title="14. 安装 docker"></a>14. 安装 docker</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yay -S <span class="token function">docker</span>$ <span class="token function">sudo</span> gpasswd -a <span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span> <span class="token function">docker</span> // 不用 <span class="token function">sudo</span> 权限也可运行docker$ <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>$ <span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"{"</span>registry-mirrors<span class="token string">":["</span>https://hub-mirror.c.163.com<span class="token string">"]}"</span> <span class="token operator">&gt;&gt;</span> /etc/docker/daemon.json // 写入网易镜像源$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> // 开机自启 <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、桌面美化"><a href="#三、桌面美化" class="headerlink" title="三、桌面美化"></a>三、桌面美化</h2><h3 id="1-程序启动器：latte-dock"><a href="#1-程序启动器：latte-dock" class="headerlink" title="1. 程序启动器：latte-dock"></a>1. 程序启动器：latte-dock</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yay -S latte-dock <span class="token comment"># 安装</span>$ latte-dock <span class="token comment"># 启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该启动器需要下在 Icons theme “<code>WhiteSur-dark</code>“。</p><p>在安装完成后，该程序就会自动启动，如果无法自动启动，可以手动编辑 <code>~/.xprofile</code> 文件，在新一行中输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">latte-dock <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-壁纸插件"><a href="#2-壁纸插件" class="headerlink" title="2. 壁纸插件"></a>2. 壁纸插件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yay -S variety<span class="token comment"># 安装</span>$ variety<span class="token comment"># 启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在安装完成后，该程序就会自动启动，如果无法自动启动，可以手动编辑 <code>~/.xprofile</code> 文件，在新一行中输入</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">variety <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-文件管理器"><a href="#3-文件管理器" class="headerlink" title="3. 文件管理器"></a>3. 文件管理器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Apperance"><a href="#Apperance" class="headerlink" title="Apperance"></a>Apperance</h3><div class="table-container"><table><thead><tr><th>Global Theme</th><th>WhiteSur-dark</th></tr></thead><tbody><tr><td>Plasma Style</td><td>WhiteSur-dark</td></tr><tr><td>Color</td><td>WhiteSurDark</td></tr><tr><td>Window Decorations</td><td>WhiteSur-dark</td></tr><tr><td>Icons</td><td>Papirus-Light</td></tr><tr><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/8.html"/>
      <url>/posts/8.html</url>
      
        <content type="html"><![CDATA[<h1 id="电屏"><a href="#电屏" class="headerlink" title="电屏"></a>电屏</h1><p><img src="/posts/8/image-20220405164522806.png" alt="image-20220405164522806"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gdb 远程调试</title>
      <link href="/posts/47436.html"/>
      <url>/posts/47436.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在嵌入式开发中，我们总会遇到各种各样的 bug 当有苦于没有合适的调试工具，这里我们来</p><h2 id="编译gdb"><a href="#编译gdb" class="headerlink" title="编译gdb"></a>编译gdb</h2><ol><li>下载GDB源码</li></ol><p>在这里我们使用的版本为 10.2 <a href="http://ftp.gnu.org/gnu/gdb/gdb-10.2.tar.gz">下载地址</a></p><ol><li>解压源码</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tar</span> -xzvf gdb-10.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>配置交叉编译器</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token builtin class-name">cd</span> gdb-10.2/gdb/gdbserver$ ./configure --target<span class="token operator">=</span>arm-linux-gnueabihf --host<span class="token operator">=</span>arm-linux-gnueabihf --disable-source-highlight<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>编译</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">make</span> -j6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="gdb环境搭建"><a href="#gdb环境搭建" class="headerlink" title="gdb环境搭建"></a>gdb环境搭建</h2><ol><li>将生成的 gdb server 上传到开发板中</li><li></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>在目标机器中运行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 调试程序</span>$ gdbserve <span class="token operator">&lt;</span>target_ip<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>app<span class="token operator">&gt;</span><span class="token comment"># 调试进程</span>$ gdbserver <span class="token operator">&lt;</span>target_ip<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> --atach pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在主机上运行 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ gdb <span class="token operator">&lt;</span>app<span class="token operator">&gt;</span> <span class="token comment"># 或 gdb-multiarch</span><span class="token operator">&gt;</span> target remote <span class="token operator">&lt;</span>target_ip<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>port<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>show version : 显示版本信息</li><li>show copying: 显示版权相关信息</li><li>info functions</li><li>finish</li><li>call</li><li>i frame</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>唯美句子</title>
      <link href="/posts/51727.html"/>
      <url>/posts/51727.html</url>
      
        <content type="html"><![CDATA[<h1 id="唯美句子"><a href="#唯美句子" class="headerlink" title="唯美句子"></a>唯美句子</h1><h2 id="情"><a href="#情" class="headerlink" title="情"></a>情</h2><ol><li>倾一世温柔，只为暖那一场相逢，无论天涯海角，无论沧海桑田，只要你懂，我都会于默默里等你，花开花落两不弃，等你，从那辆银白色的火车上跳下来，微笑着，抱着我，连同我的温柔。</li><li>我和你的区别大概是，我手握刀刃把刀递给你，怕你受伤，你手持刀柄捅进我怀里，怕我纠缠。 </li><li>你能看见山，你能看见海，你能看见这个世界的一切，我就不一样，我目光比较短浅，只能看到你。</li><li>你知道什么是意外么？就是我从没想过会遇见你，但我遇见了，我从没想过会爱你，但我还是爱了。</li><li>想你不知所依，爱你至死不渝。</li><li>你说我的眼睛灿若星辰，那是因为你是星辰，而我的眼中只有你。</li><li>你是年少的喜欢——这句话倒过来也是你。</li><li>你犯罪了，把我的心偷走了。</li><li>把我的名字寄到你家户口本上几天能到货？</li><li>账都归你管，而你，归我管！</li><li>吟诵诗千卷，才发现最美的诗是你。</li><li>这一生，我只牵你的手，因为今生有你早已足够。</li><li>爱，要么不开始，要么一辈子。</li><li>你在的时候，你是一切；你不在的的时候，一切是你！</li><li>你是3，我是9，除了你，还是你。 </li><li>1 - 10 的意义，其 10 我喜欢你很久了，我想做你的依靠，请 8 你交给我，我绝对不会 7 负你，请把你 6 在我身边，5 发 4 绝对不会对你 3 心 2 意，我会 1 直喜欢你。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>趁年华还在，趁笑靥仍美，趁阳光明媚闪耀，结束每一个一成不变的日子，去做一个更好的自己，拥有更好的生活。</li><li>永远不要丢掉别人对你的信任，因为别人信任你，是你在别人心目中存在的价值。否则，有一天当别人把你看清了，也就把你看轻了。诚信可赢天下，守信方得人心，且行，且珍惜！</li><li>百毒不侵的内心，往往会被依据简单的安慰大白，刀枪不入的伪装，常常在懂你人的面前彻底投降。做人不需人人都喜欢，只需坦荡荡。其实一辈子并不长，既然来了，就要活得漂亮</li><li>无需匆忙，该来的总会来，在对的时间，和对的人，因为对的理由。有时候，面对着身边的人；突然觉得说不出话，淡然并不是伪装出来的，而是一种沉淀。从某种意义上来说，人永远都不会老，老去的只是容颜，时间会让一颗灵魂，变得越来越动人。</li><li>人生，不要学着抱怨，怀着一颗坚毅而感恩的心，去拥抱每个挑战，每个人，其实都是可以的，只要我们用心一点，就那么一点点，生活也许少了许多抱怨或者悔恨。</li><li>人生有太多不舍，最后也都成了遗忘。综观人间世事，有得必有失，有失必有得，为了失去的物质而纠结，是不得偿失的事。我们应当学会调整心理，做一名超然物外的智者。</li><li>昨日再美好，终究压缩成今天的回忆，与其多心，不如少根筋；与其红了眼眶，不如笑着原谅。人生一世，糊涂难得，难得糊涂。活得太清楚，才是最大的不明白。人知足就会快乐，心简单就会幸福。</li><li>不要把一件事当做一件任务去做，答应了的事，就要做好，别让自己后悔。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cadence Allergo_焊盘制作</title>
      <link href="/posts/12634.html"/>
      <url>/posts/12634.html</url>
      
        <content type="html"><![CDATA[<p>在Allergo中，制作封装之前我们首先需要制作焊盘，这里使用的版本是17.4，在17.4中使用Padstack来制作焊盘。 </p><h2 id="一、Cadence-17-4-Padstack-Editor-使用"><a href="#一、Cadence-17-4-Padstack-Editor-使用" class="headerlink" title="一、Cadence 17.4 Padstack Editor 使用"></a>一、Cadence 17.4 Padstack Editor 使用</h2><p><img src="/posts/12634/image-20210828232043383.png" alt="image-20210828232043383"></p><p><img src="/posts/12634/image-20210828232043383.png"></p><map name="padstack">    <area shape="rect" coords="0,90,200, 800" target="_blank" alt="Sun" href="Allergo_焊盘制作/image-20210828232043384.png" <="" map=""><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><h2 id="表贴焊盘的制作"><a href="#表贴焊盘的制作" class="headerlink" title="表贴焊盘的制作"></a>表贴焊盘的制作</h2><p>这里我们以 0805 封装为例， 如下为0805封装的尺寸图</p><p><img src="/posts/12634/e4250e6c82b340489665332ecbaf892f.png" alt="e4250e6c82b340489665332ecbaf892f"></p><h3 id="1-打开Padstack-Editor-软件"><a href="#1-打开Padstack-Editor-软件" class="headerlink" title="1.打开Padstack Editor 软件"></a>1.打开Padstack Editor 软件</h3></map>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>footprint</title>
      <link href="/posts/37110.html"/>
      <url>/posts/37110.html</url>
      
        <content type="html"><![CDATA[<h3 id="焊盘制作"><a href="#焊盘制作" class="headerlink" title="焊盘制作"></a>焊盘制作</h3><h4 id="通孔焊盘的制作"><a href="#通孔焊盘的制作" class="headerlink" title="通孔焊盘的制作"></a>通孔焊盘的制作</h4><h5 id="常用尺寸范围"><a href="#常用尺寸范围" class="headerlink" title="常用尺寸范围"></a>常用尺寸范围</h5><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">尺寸（mil）</th><th style="text-align:center">尺寸（mm）</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">Drill Diameter（钻孔直径）</td><td style="text-align:center">实物尺寸 + 8-12mil</td><td style="text-align:center">实物尺寸+0.2~0.3mm</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Regular Pad（规则焊盘）</td><td style="text-align:center">Drill Diameter + 10-20mil</td><td style="text-align:center">Drill diameter + 0.254~-0.5mm</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Flash Pad</td><td style="text-align:center">inner diameter = Drill diameter + 16-20 mil<br>Out diameter = Dir diameter + 30~40 mil</td><td style="text-align:center">inner diameter = Drill diameter + 0.4-0.5 mm<br>Out diameter = Dir diameter + 0.762 - 1mm</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Anti Pad</td><td style="text-align:center">Drill Diameter + 30 mil</td><td style="text-align:center">Dri Diameter+ 0.762mm</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><p><img src="/posts/37110/20200623220634346.png" alt="直插焊盘尺寸设计详细描述"></p><h3 id="装尺寸图"><a href="#装尺寸图" class="headerlink" title="装尺寸图"></a>装尺寸图</h3><p><img src="/posts/37110/ad5525af920e4ad3aa5c7eda0d757a87.png" alt="img"></p><p><img src="/posts/37110/f6a7cec89523483e8b014886d8cfe1be.png" alt="img"></p><p><img src="/posts/37110/61802d8eb41f4328a4a2a09a16b524b4.png" alt="img"></p><p><img src="/posts/37110/e4250e6c82b340489665332ecbaf892f.png" alt="img"></p><p><img src="/posts/37110/5d2b5dc6c77a4f6c93490adba2035d0b.png" alt="img"></p><p><img src="/posts/37110/360f428ab7aa428fa3a9642d18145c42.png" alt="img"></p><p><img src="/posts/37110/4496c3370e294e1984ef0ee4c8f1ef9f.png" alt="img"></p><p><img src="/posts/37110/36f11392437948d5823e1db30d656845.png" alt="img"></p><p><img src="/posts/37110/c6f102a147ac4e8a9a27c9c52e05f432.png" alt="img"></p><p><img src="/posts/37110/6d25e9406bf748d6ae16d634cf10a952.png" alt="img"></p><p><img src="/posts/37110/7d45909f8ad2438b9a79baaa6b6032dc.png" alt="img"></p><p><img src="/posts/37110/c580f6c98d2f40babc70ed105a047869.png" alt="img"></p><p><img src="/posts/37110/909f73099ffa4663bb643da1cb14d30c.png" alt="img"></p><p><img src="/posts/37110/e2714b4b241d4f8387653317ba2f4f6a.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows CMD</title>
      <link href="/posts/24692.html"/>
      <url>/posts/24692.html</url>
      
        <content type="html"><![CDATA[<h2 id="CMD-判断命令执行成功"><a href="#CMD-判断命令执行成功" class="headerlink" title="CMD 判断命令执行成功"></a>CMD 判断命令执行成功</h2><ol><li>使用连接符 ,<code>&amp;&amp;</code> 和 <code>||</code></li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">call xxx.bat &amp;&amp; (goto succeed) || goto failed:succeedecho successfuly:failedecho failedpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>使用 <code>%ERRORLEVEL%</code></li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">call xxx.batif%ERRORLEVEL% == 0 (echo successfully) else (echo failed)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CMD-组合命令和管道命令的使用"><a href="#CMD-组合命令和管道命令的使用" class="headerlink" title="CMD 组合命令和管道命令的使用"></a>CMD 组合命令和管道命令的使用</h2><ol><li><code>&amp;</code></li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">command1 &amp; command2 [ &amp; command3 ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用这种方法可以同时执行多条命令，而不管命令是否执行成功</p><ol><li><code>&amp;&amp;</code></li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">command1 &amp;&amp; command2 [&amp;&amp; command3 ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用这种方法可以同时执行多条命令，当碰到执行出错的命令后将不执行后面的命令，如果一直没有出错则一直执行完所有命令</p><ol><li><code>||</code></li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">command1 || command2 [|| command3 ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用这种方法可以同是执行多体哦啊命令，当碰到执行正确的命令后将不执行后面的命令，如果没有出现正确的命令则一直执行完所有命令</p><ol><li><code>|</code></li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">command1 | command2 [| command3 ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将第一条命令的结果作为第二条命令的参数来使用</p><ol><li><code>&gt;</code>,<code>&gt;&gt;</code></li></ol><p>将一条命令或某个程序的输出结果重定向到特定文件中， <code>&gt;</code> 与 <code>&gt;&gt;</code> 的区别在于， <code>&gt;</code> 会清除原有文件中的内容后写入指定文件，而 <code>&gt;&gt;</code> 只会追加内容到指定文件中，而不会改动其中的内容</p><ol><li><code>&lt;</code>, <code>&gt;&amp;</code>, <code>&lt;&amp;</code><ul><li><code>&lt;</code>  从文件中而不是从键盘中读入命令输入</li><li><code>&gt;&amp;</code> 将一个句柄的输出写入到另一个句柄的输入中</li><li><code>&lt;&amp;</code> 从一个句柄读取输入并将其写入到另一个句柄输出中。</li></ul></li></ol><p>使用命令重定向操作符可以将命令的输入和输出数据流从默认位置重定向到其他位置。输入或输出数据刘的位置称为句柄。</p><p>可用句柄列表</p><div class="table-container"><table><thead><tr><th style="text-align:center">句柄</th><th style="text-align:center">句柄的数字代号描述</th></tr></thead><tbody><tr><td style="text-align:center">STDIN</td><td style="text-align:center">0，键盘输入</td></tr><tr><td style="text-align:center">STDOUT</td><td style="text-align:center">1，输出到命令提示符窗口</td></tr><tr><td style="text-align:center">STDERR</td><td style="text-align:center">2，错误输出到命令提示符窗口</td></tr><tr><td style="text-align:center">UNDEFINED</td><td style="text-align:center">3-9句柄由应用程序单独定义，它们是各个工具特有的</td></tr></tbody></table></div><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><div class="table-container"><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">%ALLUSERSPROFILE%</td><td style="text-align:center">局部</td><td style="text-align:center">所有用户配置文件的位置</td></tr><tr><td style="text-align:center">%APPDATA%</td><td style="text-align:center">局部</td><td style="text-align:center">存储应用程序数据的默认位置</td></tr><tr><td style="text-align:center">%CD%</td><td style="text-align:center">局部</td><td style="text-align:center">当前目录字符串</td></tr><tr><td style="text-align:center">%CMDCMDLINE%</td><td style="text-align:center">局部</td><td style="text-align:center">cmd.exe 的所在的位置（运行cmd.exe的绝对路径）</td></tr><tr><td style="text-align:center">%CMDEXXTVERSION%</td><td style="text-align:center">系统</td><td style="text-align:center">当前命令处理程序扩展的版本号</td></tr><tr><td style="text-align:center">%COMPUTERNAME%</td><td style="text-align:center">系统</td><td style="text-align:center">计算机的名称</td></tr><tr><td style="text-align:center">%COMSPEC%</td><td style="text-align:center">系统</td><td style="text-align:center">命令解释器可执行程序的绝对路径</td></tr><tr><td style="text-align:center">%DATE%</td><td style="text-align:center">系统</td><td style="text-align:center">当前日期， 格式与使用 data /t 命令返回的相同</td></tr><tr><td style="text-align:center">%ERRORLEVEL%</td><td style="text-align:center">系统</td><td style="text-align:center">上一条命令的错误代码，通常用非零值表示错误</td></tr><tr><td style="text-align:center">%HOMEDRIVE%</td><td style="text-align:center">系统</td><td style="text-align:center">用户家目录所在的盘符</td></tr><tr><td style="text-align:center">%HOMEPATH%</td><td style="text-align:center">系统</td><td style="text-align:center">用户目录的绝对路径</td></tr><tr><td style="text-align:center">%HOMESHARE%</td><td style="text-align:center">系统</td><td style="text-align:center">用户的共享主目录的网络路径</td></tr><tr><td style="text-align:center">%LOGONSERVER%</td><td style="text-align:center">局部</td><td style="text-align:center">当前登录会话的域控制器名称</td></tr><tr><td style="text-align:center">%NUMBER_OF_PROCESSORS%</td><td style="text-align:center">系统</td><td style="text-align:center">安装再计算机上的处理器数目</td></tr><tr><td style="text-align:center">%OS%</td><td style="text-align:center">系统</td><td style="text-align:center">操作系统的名称，Windows 2000 会将该操作系统显示为 Windows NT。</td></tr><tr><td style="text-align:center">%PATH%</td><td style="text-align:center">系统</td><td style="text-align:center">环境变量</td></tr><tr><td style="text-align:center">%PATHEXT%</td><td style="text-align:center">系统</td><td style="text-align:center">操作系统认为可执行的文件扩展名列表</td></tr><tr><td style="text-align:center">%PROCESSOR_ARCHITECTURE%</td><td style="text-align:center">系统</td><td style="text-align:center">处理器的芯片体系架构</td></tr><tr><td style="text-align:center">%PROCESSOR_IDENTIFIER%</td><td style="text-align:center">系统</td><td style="text-align:center">处理器说明</td></tr><tr><td style="text-align:center">%PROCESSOR_LEVEL%</td><td style="text-align:center">系统</td><td style="text-align:center">计算机上安装的处理器的型号</td></tr><tr><td style="text-align:center">%PROCESSOR_REVISION%</td><td style="text-align:center">系统</td><td style="text-align:center">返回处理器的版本号</td></tr><tr><td style="text-align:center">%PROMPT%</td><td style="text-align:center">局部</td><td style="text-align:center">当前解释器程序的命令提示符设置</td></tr><tr><td style="text-align:center">%RANDOM%</td><td style="text-align:center">系统</td><td style="text-align:center">0-32767之间的任意十进制数，有cmd.exe 生成</td></tr><tr><td style="text-align:center">%SYSTEMDRIVE%</td><td style="text-align:center">系统</td><td style="text-align:center">系统盘盘符</td></tr><tr><td style="text-align:center">%SYSTEMROOT%</td><td style="text-align:center">系统</td><td style="text-align:center">操作系统目录的位置</td></tr><tr><td style="text-align:center">%TEMP%和%TMP%</td><td style="text-align:center">系统和用户</td><td style="text-align:center">当前登录用户可用的应用程序使用的默认临时目录。</td></tr><tr><td style="text-align:center">%TIME%</td><td style="text-align:center">系统</td><td style="text-align:center">当前时间，格式与使用 time /t 命令返回的格式相同，有 cmd.exe生成</td></tr><tr><td style="text-align:center">%USERDOMAIN%</td><td style="text-align:center">局部</td><td style="text-align:center">用户账户的域的名称</td></tr><tr><td style="text-align:center">%USERNAME%</td><td style="text-align:center">局部</td><td style="text-align:center">当前登录的用户名称</td></tr><tr><td style="text-align:center">%USERPROFILE%</td><td style="text-align:center">局部</td><td style="text-align:center">当前用户的配置文件的位置</td></tr><tr><td style="text-align:center">%WINDIR%</td><td style="text-align:center">系统</td><td style="text-align:center">操作系统目录的位置</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Windows cmd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vim-替换命令</title>
      <link href="/posts/26663.html"/>
      <url>/posts/26663.html</url>
      
        <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>vim 可以利用<code>:substitute</code>命令将指定的字符替换成其他字符，通常使用命令的缩写格式<code>:s</code>。借用正则表达式则可以实现更为丰富的替换功能。</p><p>基本语法是：<code>:[range]s/源字符串/目标字符串/[option]</code>， <code>[range]</code> 和 <code>[option]</code> 是可以缺省不填的，各个字段的意思如下：</p><ul><li><code>[range]</code> ：代表检索范围，默认缺省表示当前行检索， <code>1,10</code> 表示从第1行到第10行； <code>%</code> 代表整个文件，等价于<code>1,$</code>；<code>.,$</code>代表从当前行到文件末尾。</li><li><code>s</code> ： subsitute 的简写，代表替换。</li><li><code>[option]</code> ：代表操作类型，默认缺省只对第一个匹配的字符进行替换。<code>g(global)</code>全局替换； <code>c(confirm)</code> 操作时确认；<code>i(ignorecase)</code>不区分大小写，这些选项可以组合使用。</li></ul><h3 id="exmple"><a href="#exmple" class="headerlink" title="exmple"></a>exmple</h3><ol><li>确认替换</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:1, <span class="token variable">$s</span>/foo/bar/gcreplace with foo <span class="token punctuation">(</span>y/n/a/q/l/^E/^Y<span class="token punctuation">)</span>?这时可以选择如下操作y Yes: 执行这个替换n No：取消这个替换a ALL: 执行所有替换而不要再询问q Quit: 退出二不做任何改动l Last: 替换完当前匹配点后退出CTRL-E 向上翻滚一行CTRL-Y 向下翻滚一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>将光标所在行出现的所有包含aa的字符串中的aa替换为bb</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:s/aa/bb/g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>将文档中出现的所有包含aa的字符串中的aa替换为bb</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">:</span><span class="token variable">$s</span>/aa/bb/g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>将12行到23行中出现的所有包含aa的字符串中的aa替换为bb</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:12,23s/aa/bb/g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>全文的行首加入# 字符</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:%s/^/<span class="token comment">#/g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Win32自绘Menu</title>
      <link href="/posts/42326.html"/>
      <url>/posts/42326.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、开始"><a href="#一、开始" class="headerlink" title="一、开始"></a>一、开始</h3><p>自绘Menu需要依靠窗口的两个消息：<code>WM_MEASUREITEM</code>和<code>WM_DRAWITEM</code></p><ul><li><code>WM_MEASUREITEM</code>  <ul><li><code>wParam</code> : 发送该消息的控件ID， 如果是menu 发出的，则为0。</li><li><code>lParam</code> : 指向一个 <code>MEASUREITEMSTRUC</code> 结构体，包含了自绘所需要的一些信息。</li><li>返回值： 如果执行成功，应该返回 TRUE。</li></ul></li><li><code>WM_DRAWITEM</code><ul><li><code>wParam</code>: 发送该消息的控件ID， 如果是menu 发出的，则为0;</li><li><code>lParam</code>: 指向一个<code>DRAWITEMSTRUCT</code>结构体 </li></ul></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><h5 id="AppendMenu"><a href="#AppendMenu" class="headerlink" title="AppendMenu"></a>AppendMenu</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">BOOL <span class="token function">AppendMenu</span><span class="token punctuation">(</span>    HMENU hMenu<span class="token punctuation">,</span> <span class="token comment">// A handle to the menu bar</span>    UINT uFlags<span class="token punctuation">,</span> <span class="token comment">// Controls the appearance and behavior of the new menu item.</span>    UINT_PTR uIDNewItem<span class="token punctuation">,</span>    LPCWSTR lpNewItem<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>uFlags</code></p><ul><li><code>MF_BITMAP</code></li><li><code>MF_CHECKED</code></li><li><code>MF_DISABLED</code></li><li><code>MF_ENABLED</code></li><li><code>MF_GRAYED</code></li><li><code>MF_MENUBARBREAK</code></li><li><code>MF_MENUBREAK</code></li><li><code>MF_OWNERDRAW</code></li><li><code>MF_POPUP</code></li><li><code>MF_SEPARATOR</code></li><li><code>MF_STRING</code></li><li><code>MF_UNCHCKED</code></li></ul></li><li><code>uIDNewItem</code>: The identifier of the new menu item or, if the <em>uFlags</em> parameter is set to <strong>MF_POPUP</strong>, a handle to the drop-down menu or submenu.</li><li><code>lpNewItem</code>: The content of the new menu item. The interpretation of <em>lpNewItem</em> depends on whether the <em>uFlags</em> parameter includes the following values.<ul><li><code>MF_BITMAP</code>: Contains a Bitmap handle.</li><li><code>MF_OWNERDRAW</code>: 表示这是一个自绘Menu</li><li><code>MF_STRING</code>: Contains a pointer to a null-terminated string.</li></ul></li></ul><h5 id="GetTextExtent"><a href="#GetTextExtent" class="headerlink" title="GetTextExtent"></a>GetTextExtent</h5><h5 id="MEASUREITEMSTRUCT"><a href="#MEASUREITEMSTRUCT" class="headerlink" title="MEASUREITEMSTRUCT"></a>MEASUREITEMSTRUCT</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct tagMEASUREITEMSTRUCT{    UINT CtlType;// 控件类型    UINT CtlID;// Identifier of the Combo Box or list box, This member is note used for a menu    UINT itemID;     UINT itemWidth; //     UINT itemHeight;    ULONG_PTR itemData;}MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>CtrlType</code></p><ul><li><code>ODT_COMBOBOX</code>: 自绘控件为 Combo Box</li><li><code>ODT_LISTBOX</code>: 自绘控件为 List Box</li><li><code>ODT_LISTVIEW</code>: 自绘控件为: List view</li><li><code>ODT_MENU</code>: 自绘 Menu</li></ul></li></ul><h5 id="DRAWITEMSTRUCT"><a href="#DRAWITEMSTRUCT" class="headerlink" title="DRAWITEMSTRUCT"></a>DRAWITEMSTRUCT</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct tagDRAWITEMSTRUCT{    UINT CtlType; // 控件类型    UINT CtlID;     UINT itemID;    UINT itemAction; // 绘图动作    UINT itemState;    HWND hwndItem;    HDC hDC;    RECT rcItem;    ULONG_PTR itemData;}DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>CtrlType</code></p><ul><li><code>ODT_BUTTON</code></li><li><code>ODT_COMBOBOX</code></li><li><code>ODT_LISTBOX</code></li><li><code>ODT_LSITVIEW</code></li><li><code>ODT_MENU</code></li><li><code>ODT_STATIC</code></li><li><code>ODT_TAB</code></li></ul></li><li><code>CtrlID</code>: The identifier of the combo box, list box, button, or static control. This member is not used for a menu item.</li><li><code>itemID</code>: The menu item identifier for a menu item or the index of the item in a list box or combo box. For an empty list box or combo box, this member can be <code>-1</code>.</li><li><code>itemAction</code><ul><li><code>ODA_DRAWENTIRE</code>: 需要绘制整个控件</li><li><code>ODA_FOCUS</code>: </li><li><code>ODA_SELECT</code>:</li></ul></li><li><code>itemState</code><ul><li><code>ODS_CHECKED</code></li><li><code>ODS_COMBOBOXEDIT</code></li><li><code>ODS_DEFAULT</code></li><li><code>ODS_FOCUS</code></li><li><code>ODS_GRAYED</code></li><li><code>ODS_HOTLIGHT</code></li><li><code>ODS_INACTIVE</code></li><li><code>ODS_NOFOCUSRECT</code></li><li><code>ODS_SELECTED</code></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows中判断窗口是否可见</title>
      <link href="/posts/60352.html"/>
      <url>/posts/60352.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法一：-使用IsWindowVisible函数"><a href="#方法一：-使用IsWindowVisible函数" class="headerlink" title="方法一： 使用IsWindowVisible函数"></a>方法一： 使用<code>IsWindowVisible</code>函数</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">BOOL WINAPI IsWindowVisible(    _In_ HWND hWnd // 窗口句柄);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果 hWnd 窗口，hWnd的父窗口，hWnd的父窗口的父窗口等等具有<code>WS_VISIBLE</code> 样式，该函数返回 非零，否则返回 0 ；</p><p>当窗口完全被其他窗口遮挡的时候，该函数的返回值也有可能返回 非零。</p><h3 id="方法二：-使用GetWindowLong函数"><a href="#方法二：-使用GetWindowLong函数" class="headerlink" title="方法二： 使用GetWindowLong函数"></a>方法二： 使用<code>GetWindowLong</code>函数</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">LONG GetWindowLong(HWND hWnd,// 窗口句柄    int nIndex)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>GetWIndowLong</code>函数获取窗口的样式，并判断是否具有<code>WS_VISIBLE</code>样式，以此来判断串口是否可见。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows API 串口</title>
      <link href="/posts/24396.html"/>
      <url>/posts/24396.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-扫面串口"><a href="#一-扫面串口" class="headerlink" title="一. 扫面串口"></a>一. 扫面串口</h2><h4 id="1-使用Windows注册表"><a href="#1-使用Windows注册表" class="headerlink" title="1. 使用Windows注册表"></a>1. 使用Windows注册表</h4><p>通过注册表实现Windows系统下自动识别串口需要调用三个Windows API函数：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 打开指定注册表项，LONG RegOpenKeyEx(HKEY hKey,// 主键，可以是 HKEY_CLASSES_ROOT， HKEY_CURRENT_CONFIG，HKEY_CURRENT_USER，HKEY_LOCAL_MACHINE HKEY_USERS， 在这里我们选择 HKEY_LOCAL_MACHINE    LPCTSTR lpSubKey,// 子健，要打开的子健目录位置，在这里是 HARDWARE\\DEVICEMAP\\SERIALCOMM    DWORD ulOptions,// 保留值，必须为0    REGSAM samDesired, // 访问权限    PHKEY phkResult// 返回打开的子健句柄)    // 检索指定注册表项的信息LONG RegQueryInfoKey(HKEY hKey,  // 指定注册表项 该key必须是以 KEY_QUERY_VALUE 访问权限打开    LPTSTR lpClass,    LPDWORD lpcClass,    LPDWORD lpReserved,    LPDWORD lpcSubKeys, // 返回子健的数量    LPDWORD lpcMaxSubKeyLen, // 返回最大子健的长度    LPDWORD lpcMaxClassLen,     LPDWORDlpcValues, // 返回值的数量，在这里是串口的数量    LPDWORD lpcMaxValueNameLen, // 最大值名的长度，在这里最大串口名的长度    LPDWORD lpcMaxValueLen,// 最大串口的长度    LPDWORD lpcbSecurityDecriptor,     PFILETIME lpftLastWriteTime )LONG RegEnumValue(HKEY hKey,// 子健句柄    DWORD dwIndex,// 在注册表中的索引    LPTSTR lpValueName, // 返回值名    LPDWORD lpcValueName, // 返回值名的长度    LPDWORD lpReserved,    LPDWORD lpType, // 返回串口名的数据类型    LPBYTE lpData,// 返回串口名    LPDWORD lpcData // 返回串口名的长度)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-打开串口"><a href="#二-打开串口" class="headerlink" title="二. 打开串口"></a>二. 打开串口</h2><p>Windows中串口是作为文件来处理的，调用<code>CreateFile</code> 函数可以打开串口，函数执行成功返回串口句柄，出错返回 <code>INVALID_HANDLE_VALUE</code>.</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">HANDLE WINAPI CreateFile(    _In_ LPCTSTR lpFileName, // 要打开的文件名    _In_ DWORD dwDesiredAccess, // 访问类型    _In_ DWORD dwShareMode,// 共享方式    _In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes, // 安全属性    _In_ DWORD dwCreationDisposition, // 指定要打开的文件已存在或不存在的动作    _In_ DWORD dwFlagsAndAttributes, // 文件属性标志    _In_opt_ HANDLE hTemplateFile // 一个指向模板文件的句柄)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 <code>CloseHandle()</code> 函数来关闭串口，函数参数为串口句柄。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">BOOL WINAPI CloseHandle(HANDLE hObject);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三-配置串口"><a href="#三-配置串口" class="headerlink" title="三. 配置串口"></a>三. 配置串口</h2><h3 id="1-设置超时"><a href="#1-设置超时" class="headerlink" title="1. 设置超时"></a>1. 设置超时</h3><p>在调用<code>ReadFile()</code>和<code>WriteFile()</code>读写串口的时候，如果没有指定异步操作的话，读写都会一直等待指定大小的数据，这是后我们可能想要设置一个读写的超时时间。调用<code>SetCommTimeouts()</code>可以设置串口读写超时时间，<code>GetCommTimeouts()</code>可以获得当前的超时设置，一般先利用<code>GetCommTimeouts</code>获得当前超时信息到一个<code>COMMTIMEOUTS</code>结构，然后对这个结构自定义，再调用<code>SetCommTimeouts()</code>进行设置。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">BOOL GetCommTimeouts(_In_ HANDLE hFile,    _Out_ LPCOMMTIMEOUTS lpCommTimeouts);BOOL SetCommTimeouts(_In_ HANDLE hFile,_In_ LPCOMMTIMEOUTS lpCommTimeouts);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>COMMTIMEOUTS结构如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef struct _COMMTIMEOUTS{    DWORD ReadIntervalTimeout; // 读操作时，在两个字符间的超时    DWORD ReadTotalTimeoutMultiplier; // 读操作在读取每隔字符时的超时    DWORD ReadTotalTimeoutConstant; // 读操作的固定超时    DWORD WriteTotalTimeoutMultiplier; // 写操作在写每隔字符时的超时    DWORD WriteTotalTimeoutConstant; // 写操作的固定超时}COMMTIMEOUTS, *LPCOMMTIMEOUTS;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当以上各个成员设为0，表示为设置对应超时。</p><p>超时设置有两种：间隔超时和总超时，间隔超时就是<code>ReadIntervalTimeout</code>，总超时是 <code>ReadTotalTimeoutConstant + ReadTotalTimeoutMultiplier * 要读写的字符数</code> 。</p><h3 id="2-设置发送和接收缓冲区大小"><a href="#2-设置发送和接收缓冲区大小" class="headerlink" title="2. 设置发送和接收缓冲区大小"></a>2. 设置发送和接收缓冲区大小</h3><p><code>SetupComm()</code>函数用来设置串口的发送/接收缓冲区大小，如果通信的速率较高，则应该设置较大的缓冲区。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">BOOL WINAPI SetupComm(_In_ HANDLE hFile, // 串口句柄    _In_ DWORD dwInQueue, // 输入缓冲区大小    _In_ DWORD dwOutQueue // 输出缓冲区大小)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-设置串口配置信息"><a href="#3-设置串口配置信息" class="headerlink" title="3.设置串口配置信息"></a>3.设置串口配置信息</h3><p>函数<code>GetCommState()</code>和<code>SetCommState()</code>分别用来获得和设置串口的配置信息，如波特率、校验方式、数据位个数、停止位个数等。一般也是先调用<code>GetCommState()</code>获得串口配置信息到一个<code>DCB</code>结构中去，在这个结构自定义后调用<code>SetCommState()</code>进行设置。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">BOOL WINAPI GetCommState(_In_ HANDLE hFile,// 串口句柄    _Out_ LPDCB lpDCB// 返回串口配置信息)BOOL WINAPI SetCommState(_In_ HANDLE hFile, // 串口句柄    _In_ LPDCB lpDCB // 设置的串口配置信息)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>DCB</code>结构中几个比较重要的成员有： BaudRate(波特率)，fParith(指定就校验时能)、Parity(校验方式)、ByteSize(数据位个数)、StopBits(停止位个数)。</p><p>常用选项：</p><p>BaudRate: CBR_9600、CBR_14400、CBR_19200、CBR_38400、CBR_57600、CBR_115200。</p><p>Parity: NOPARITY、ODDPARITY、EVENPARITY、MARKPARITY、SPACEPARITY</p><p>ByteSize: 5~8</p><p>StopBits: ONESTOPBIT、ONE5STOPBITS、TWOSTOPBIT </p><h2 id="四-读写串口"><a href="#四-读写串口" class="headerlink" title="四. 读写串口"></a>四. 读写串口</h2><h3 id="1-清除缓冲区"><a href="#1-清除缓冲区" class="headerlink" title="1. 清除缓冲区"></a>1. 清除缓冲区</h3><p><code>PurgeComm()</code>函数用来停止读写操作、清空读写缓冲区，第一次读取串口数据、写串口数据之前、敞口长时间未使用、串口出现错误等情况下，应先清空读获写缓冲区。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">BOOL PurgeComm(    HANDLE hFIle, // 串口句柄     DWORD dwFlags // 指定);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>dwFlags: 指定串口执行的动作，可以时以下值的组合：</li><li>PURGE_TXABORT：停止目前所有的传输工作立即返回不管是否完成传输动作。</li><li>PURGE_RXABORT: 停止目前所有的读取工作立即返回不管是否完成读取动作。</li><li>PURGE_TXCLEAR:清除发送缓冲区的所有数据。</li><li>PURGE_RXCLEAR: 清除接收缓冲区的所有数据</li></ul><p>如清除串口的所有操作和缓冲： <code>PurgeComm(hComm, PURGE_RXCLEAR | PURGE_TXCLEAR | PURGE_RXABORT | PURGE_TXABORT)</code></p><h3 id="2-清除错误"><a href="#2-清除错误" class="headerlink" title="2.清除错误"></a>2.清除错误</h3><p><code>ClearCommError()</code>用来清除通信中的错误及获得当前通信状态。在读写操作之前，可以调用<code>ClearCommError()</code>来清除错误和获得缓冲区内数据大小。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">BOOL WINAPI ClearCommError(_In_ HANDLE hFIle, // 串口句柄    _Out_opt_ LPWORD lpErrors, // 返回错误码    _Out_opt_ LPCOMSTAT lpState // 返回通讯状态)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>lpErrors</code>用来存储错误码，如下：<ul><li>CE_BREAK： 检测到中断信号，意思时说检测到某个字节数据缺少合法的停止位。</li><li>CE_FRAME： 硬件检测到帧错误。</li><li>CE_IOE: 通信设备发生输入/输出错误。</li><li>CE_MODE: 设置模式错误，或是 hFIle 值错误</li><li>CE_OVERRUN: 溢出错误， 缓冲区容量不足，数据将丢失。</li><li>CE_RXOVER: 溢出错误</li><li>CE_RXPARITY: 硬件检查到校验位错误。</li><li>CE_TXFULL：发送缓冲区已满。</li></ul></li><li><code>lpState</code>位指向 COMSTAT 结构提的指针，保存通讯状态，一般我们值关心这个结构中的两个成员：<code>cbInQue</code>、<code>cbOutQue</code>，分别表示输入缓冲区中的字节数、输出缓冲区的字节数。</li></ul><h3 id="3-读写串口数据"><a href="#3-读写串口数据" class="headerlink" title="3. 读写串口数据"></a>3. 读写串口数据</h3><p>调用<code>WriteFile()</code> 向串口中写数据， <code>ReadFile()</code>从串口中读数据，函数执行成功返回<code>TRUE</code>, 失败返回 <code>FALSE</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">BOOL WINAPI <span class="token function">ReadFile</span><span class="token punctuation">(</span>    _In_ HANDLE hFile<span class="token punctuation">,</span>  <span class="token comment">// 文件句柄</span>    _Out_ LPVOID lpBuffer<span class="token punctuation">,</span> <span class="token comment">// 指向一个缓冲区，保存读取的数据</span>    _In_ DWORD nNumberOfBytesToRead<span class="token punctuation">,</span> <span class="token comment">// 要读取数据的字节数，如果实际读取的字节数小于这个数的话函数绘一直等到直到超时。</span>    _Out_opt_ LPDWORD lpNumberOfBytesRead<span class="token punctuation">,</span> <span class="token comment">// 实际读取的字节素</span>    _Inout_opt_ LPOVERLAPPED lpOverlapped <span class="token comment">// 指向一个OVERLAPPED结构，用于异步操作</span><span class="token punctuation">)</span>BOOL WINAPI <span class="token function">WriteFIle</span><span class="token punctuation">(</span>_In_ HANDLE hFile<span class="token punctuation">,</span> <span class="token comment">// 文件句柄</span>    _In_ LPCVOID lpBuffer<span class="token punctuation">,</span> <span class="token comment">// 指向一个缓冲区，包含要写如的数据</span>    _In_ DWORD nNumberOfBytesToWirte<span class="token punctuation">,</span> <span class="token comment">// 要写入数据的字节数</span>    _Out_opt LPDWORD lpNumberOfBytesWritten<span class="token punctuation">,</span> <span class="token comment">// 实际写入的字节数</span>    _Inout_opt_ LPOVERLAPPED lpOverlapped<span class="token comment">// 指向一个OVERLAPPED结构体，用于异步操作</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-监听串口事件和异步读写串口"><a href="#4-监听串口事件和异步读写串口" class="headerlink" title="4. 监听串口事件和异步读写串口"></a>4. 监听串口事件和异步读写串口</h3><p>在串口编程中，可以先设置好串口所关注的事件，然后启动一个辅助线程来监听该事件是否已发生，如果没有发生的话该线程就一直该等待，当事件发生后，如读缓冲区中收到数据，该线程可以向主线程窗体发送对应的事件消息进行读串口处理，或者在辅助线程中直接进行异步读写串口处理。<code>SetCommMask()</code>函数用来设置串口监听事件，<code>GetCommMask()</code>函数获得通信设备上的事件掩码。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">BOOL SetCommMask(HANDLE hFile, // 串口句柄    DWORD dwEvtMask // 要监视的串口事件掩码 )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>dwEvtMask:  要监视的串口事件掩码，可以有以下位值：<ul><li>EV_RXCHAR: 输入缓冲区收到数据</li><li>EV_TXEMPTY：输出缓冲区中的数据已被完全送出</li><li>EV_RXFLAG: 使用<code>SetCommState()</code>函数设置的 DCB 结构中的事件字符已被传入输入缓冲区中。</li></ul></li></ul><p>串口事件设置好以后可以使用<code>WaitCommEvent()</code>来判断是否已经发生。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">BOOL WINAPI WaitCommEvent(_In_ HANDLE hFIle, // 串口句柄    _Out_ LPDWORD lpEvtMask, // 检测到的串口通信事件    _In_ LPOVERLAPPED lpOverlapped // )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cadence 17.4 Padstack Editor使用</title>
      <link href="/posts/19115.html"/>
      <url>/posts/19115.html</url>
      
        <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/hanxuexiaoma/article/details/52637940">Cadence 17.2 Padstack Editor入门指南</a> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows窗口透明</title>
      <link href="/posts/37076.html"/>
      <url>/posts/37076.html</url>
      
        <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>To create a layered window, specify the WS_EX_LAYERED extended window style when calling the CreateWindowEx function, or call the SetWindowLong function to set WS_EX_LAYERED after the window has been created. After the CreateWindowEx call, the layered window will not become visible until the SetLayeredWindowAttributes or UpdateLayeredWindow function has been called for this window. Note that WS_EX_LAYERED cannot be used for child windows。</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">BOOl SetLayeredWindowAttributes(HWND hWnd,// A handle to the layered window    COLORREF crKey, // A COLORREF structure that specifies the transparency color key to be used when composing the layered windowA COLOR    BYTE bAlpha, //Alpha value used to describe the opacity of the layered window.    DWORD dwFlags //An action to be taken.  第二个和第三个参数哪个生效)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-窗口完全透明"><a href="#1-窗口完全透明" class="headerlink" title="1. 窗口完全透明"></a>1. 窗口完全透明</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">LONG nExStyle = ::GetWindowLong(m_hWnd, GWL_EXSTYLE);nExStyle |= WS_EX_LAYERED;::SetWindowLong(m_hWnd, GWL_EXSTYLE, nExStyle);SetLayeredWindowAttributes(m_hWnd, RGB(1,2,3), 128, LWA_ALPHA); // 此时第二个参数无效，效果有第三个参数指定，0为完全透明，255为完全不透明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-指定颜色透明"><a href="#2-指定颜色透明" class="headerlink" title="2. 指定颜色透明"></a>2. 指定颜色透明</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">LONG nExStyle = ::GetWindowLong(M_hWnd, GWL_EXSTYLE);nExStyle |= WS_EX_LAYERED;::SetWindowLong(m_hWnd, GWL_EXSTYLE, nExStyle);SetLayeredWindowAttrbutes(m_hWnd, RGB(1,2,3),128, LWA_COLORKEY); // 此时第三个参数无效，窗口里的所有颜色为 RGB(1,2,3) 的区域都将透明。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 消息使用</title>
      <link href="/posts/25544.html"/>
      <url>/posts/25544.html</url>
      
        <content type="html"><![CDATA[<h3 id="WM-NCCREATE"><a href="#WM-NCCREATE" class="headerlink" title="WM_NCCREATE"></a>WM_NCCREATE</h3><h3 id="WM-INITDIALOG"><a href="#WM-INITDIALOG" class="headerlink" title="WM_INITDIALOG"></a>WM_INITDIALOG</h3><h3 id="WM-INITMENUPOPUP"><a href="#WM-INITMENUPOPUP" class="headerlink" title="WM_INITMENUPOPUP"></a>WM_INITMENUPOPUP</h3><h3 id="WM-CREATE"><a href="#WM-CREATE" class="headerlink" title="WM_CREATE"></a>WM_CREATE</h3><h3 id="WM-MOUSELEAVE"><a href="#WM-MOUSELEAVE" class="headerlink" title="WM_MOUSELEAVE"></a>WM_MOUSELEAVE</h3><h3 id="WM-MOUSEHOVER"><a href="#WM-MOUSEHOVER" class="headerlink" title="WM_MOUSEHOVER"></a>WM_MOUSEHOVER</h3><p>默认情况下，窗口时不响应 <code>WM_MOUSELEAVE</code> 和 <code>WM_MOUSEHOVER</code> 消息的，要使用 <code>_TrackMouseEvent</code> 函数来激活这两个消息，才能够使用。调用这个函数后，当鼠标再指定窗口上停留超过一定时间或离开窗口后，该函数会Post 这两个消息到指定窗口。</p><p>使用方法：</p><ol><li><p>在窗口类中定义一个变量 <code>_bMouseTrack</code> 来表示是否追踪当前鼠标状态，避免不断重复产生<code>WM_MOUSEHOVER</code> 消息。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">BOOL _bMouseTrack <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 <code>WM_MOUSEMOVE</code> 消息处理函数 <code>OnMouseMove</code> 中，调用<code>_TrackMouseEvent</code> 函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>_bMouseTrack<span class="token punctuation">)</span><span class="token punctuation">{</span>TRACKMOUSEEVENT csTME<span class="token punctuation">;</span>csTME<span class="token punctuation">.</span>cbSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>csTME<span class="token punctuation">)</span><span class="token punctuation">;</span>csTME<span class="token punctuation">.</span>dwFlags <span class="token operator">=</span> TME_LEABE <span class="token operator">|</span> TME_HOVER<span class="token punctuation">;</span>csTME<span class="token punctuation">.</span>hwndTrack <span class="token operator">=</span> m_hWnd<span class="token punctuation">;</span> <span class="token comment">// 指定要追踪的窗口</span>csTME<span class="token punctuation">.</span>dwHoverTime <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 鼠标再按钮上停留超过 10ms，才认为状态位 HOVER</span><span class="token operator">::</span><span class="token function">_TrackMouseEvent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>csTME<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启 Windows 的 WM_MOUSELEAVE，WM_MOUSEHOVER事件支持。</span>_bMouseTrack <span class="token operator">=</span> FALSE<span class="token punctuation">;</span> <span class="token comment">// 若已经追踪，则停止追踪。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>WM_MOUSELEAVE</code> 消息处理函数 <code>OnMouseLeave</code> 中再次允许追踪鼠标状态</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_bMouseTrack <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="WM-TIMER-定时器消息"><a href="#WM-TIMER-定时器消息" class="headerlink" title="WM_TIMER : 定时器消息"></a>WM_TIMER : 定时器消息</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">WPARAM</td><td style="text-align:center">定时器 ID</td></tr><tr><td style="text-align:center">LPARAM</td><td style="text-align:center">定时器处理函数的指针</td></tr></tbody></table></div><h3 id="WM-COMMAND"><a href="#WM-COMMAND" class="headerlink" title="WM_COMMAND"></a>WM_COMMAND</h3><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><table>    <thead>        <tr><th>参数</th>        <th colspan="2">说明</th>    </tr></thead>    <tbody><tr>        <td rowspan="2">WPARAM</td>        <td>HIWORD</td>           <td>            来自菜单： 0 <br>            来自快捷键： 1 <br>            来自控件： 响应code        </td>    </tr>    <tr>        <td>LOWORD</td>        <td>            来自菜单：菜单ID            来自快捷键： 快捷键对应菜单ID            来自控件： 控件ID        </td>    </tr>    <tr>        <td> LPARAM</td>        <td>HIWORD</td>           <td>            来自菜单： 0 <br>            来自快捷键： 0 <br>            来自控件： 控件句柄        </td>    </tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无标题栏窗口移动的方法</title>
      <link href="/posts/6853.html"/>
      <url>/posts/6853.html</url>
      
        <content type="html"><![CDATA[<p>正常情况下，当使用者再程序窗口标题栏区域（非客户区）内，按下鼠标左键时将会发生下列事情：</p><ul><li>系统向该窗口过程函数发送 <code>WM_NCLBUTTONDOWN</code> 消息。</li><li><code>WM_NCLBUTTONDOWN</code> 消息最终传送到窗口过程函数中的 <code>DefWindowProc()</code> 函数中去。</li><li><code>DefWindowProc()</code> 函数将根据鼠标左键按下并移动，以及 <code>HTCAPTION</code> 表示所表示鼠标按下时的位置等信息，来执行该消息的缺省动作即窗口随同鼠标光标一起移动的操作。</li></ul><p>正常情况下，我们只有再窗口标题栏区域中按下鼠标左键时，系统才会向窗口过程函数发送<code>WM_NCLBUTTONDOWN</code>消息。</p><p>在没有标题栏的情况下，系统时不会发送 <code>WM_NCLBUTTONDOWN</code> 消息的，因为我们已经没有了标题栏，且鼠标是在窗口的工作区中按下的，此时系统发出的时 <code>WM_LBUTTONDOWN</code> 消息。</p><p>要想移动窗口需要窗口过程函数响应 <code>WM_NCLBUTTONDOWN</code> 消息，在没有标题栏的情况下，我们可以主动的发出<code>WM_NCLBUTTON</code> 消息，来使窗口过程函数响应 <code>WM_NCLBUTTONDOWN</code> 消息，就可以实现无标题窗口的移动了。</p><p>如下我们可以在处理 <code>WM_LBUTTONDOWN</code> 消息的时候发出 <code>WM_NCLBUTTONDOWN</code>:</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">case WM_LBUTTONDOWN:SendMessage(hWNd, WM_NCLBUTTONDOWN, HTCAPTION, 0);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>消息发送时，通过<code>HTCAPTION</code> 参数给 <code>DefWindowProc()</code> 函数带去一个信息，告诉它鼠标左键时再窗口非工作去内的标题栏处按下的。当然这是一个假情报，但 <code>DefWindowProc</code> 函数会信以位真并根据这个信息来执行响应的操作。</p><p>同样我们还可以通过<code>WM_SYSCOMMAND</code> 消息，来实现窗口移动：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> WM_LBUTTONDOWN<span class="token operator">:</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>hWNd<span class="token punctuation">,</span> WM_SYSCOMMAND<span class="token punctuation">,</span> SC_MOVE <span class="token operator">|</span> HTCAPTION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Win32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux FHS</title>
      <link href="/posts/26.html"/>
      <url>/posts/26.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-FHS"><a href="#Linux-FHS" class="headerlink" title="Linux FHS"></a>Linux FHS</h1><p><em>FHS   (Filesystem Hierachy Standard  )</em> 依据文件系统使用的频繁与否与是否用户随意改动，而将目录定义成四种交互作用的形态：</p><ul><li><p><strong>可分享的</strong>：可以分享给其他系统挂载使用的目录，所以包括执行文件与用户的邮件等数据，是能够分享给网络上其他主机挂载用的目录。</p></li><li><p><strong>不可分享的</strong>：自己机器上面运行的设备文件或者是程序有关的socket文件等，由于仅与自身机器有关，所以不适合分享给其他主机。</p></li><li><p><strong>不变的</strong>：有些数据是不会经常变动的，只会随着系统版本而变动。例如函数库、说明文件、系统管理员所管理的主机服务配置文件等。</p></li><li><p><strong>可变动的</strong>：经常改变的数据，例如登陆文件、用户文件等。</p></li></ul><h2 id=""><a href="#" class="headerlink" title="/"></a><code>/</code></h2><p>根目录是整个系统最重要的一个目录，因为不但所有的目录都是由根目录衍生出来的，同时根目录也与开机、还原、系统修复等操作有关。</p><p>因此 FHS 标准建议： <strong>根目录<code>/</code></strong> 所在的分区应该越小越好，且应用程序所安装的软件最好不要与根目录放在同一个分区，保持根目录越小越好，如此不但性能较好，根目录所在的文件系统也不容易发生问题。</p><h2 id="bin"><a href="#bin" class="headerlink" title="/bin"></a><code>/bin</code></h2><p>bin 是 Binaries (二进制文件) 的缩写，这个目录存放着最经常使用的命令。</p><p> <code>/bin</code> 目录放置的命令可以在单用户维护模式下使用。 </p><h2 id="boot"><a href="#boot" class="headerlink" title="/boot"></a><code>/boot</code></h2><p>这个目录存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件和镜像文件。</p><h2 id="dev"><a href="#dev" class="headerlink" title="/dev"></a><code>/dev</code></h2><p>dev 是 Devices (设备) 的缩写，该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p><h2 id="etc"><a href="#etc" class="headerlink" title="/etc"></a><code>/etc</code></h2><p>etc 是 Etcetera (等等) 的缩写，这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p><p>该目录下的文件只有 root 用户才能修改。</p><h2 id="home"><a href="#home" class="headerlink" title="/home"></a><code>/home</code></h2><p>用户的的家目录， 在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的帐号名命名的。</p><p> <code>~</code>代表当前用户的主文件夹。</p><h2 id="lib-、-lib64"><a href="#lib-、-lib64" class="headerlink" title="/lib 、 /lib64"></a><code>/lib</code> 、 <code>/lib64</code></h2><p>lib 是 Library (库) 的缩写，这个目录存放着系统最基本的动态链接共享库，其作用类似与 Windows 里的 DLL 文件，几乎所有的应用程序都要用到这些共享库。</p><p>其中 <code>/lib</code>是32位系统所调用的库，<code>/lib64</code>是64位系统调用的库。</p><p>你可以把函数库想象成是 “外挂”， 某些命令必须要有这些 ”外挂“ 才能顺利完成程序的执行。</p><h2 id="lost-found"><a href="#lost-found" class="headerlink" title="/lost+found"></a><code>/lost+found</code></h2><p>这个目录是使用标准 ext2/ext3 文件系统格式才会产生的一个目录，<strong>在文件系统发生错误时，一些丢失的片段会被放置到这个目录下</strong>。</p><p>每一个分区中，都会存在这个目录。</p><h2 id="media"><a href="#media" class="headerlink" title="/media"></a><code>/media</code></h2><p>media是 ”媒体“ 的英文，顾名思义， 这个 <code>/media</code> 下面放置的就是可删除的设备， 包括软盘、光盘、DVD等设备都暂时挂载于此。常见的文件名有<code>/media/floppy</code>, <code>/media/cdrom</code> 等。</p><h2 id="mnt"><a href="#mnt" class="headerlink" title="/mnt"></a><code>/mnt</code></h2><p>如果你想要暂时挂载某些额外的设备，一般建议你可以放置在这个目录中。在比较早的时候，这个目录的用途与<code>/media</code>相同，只是有了 <code>/media</code>之后，这个目录就被用来暂时挂载用了。</p><h2 id="opt"><a href="#opt" class="headerlink" title="/opt"></a><code>/opt</code></h2><p>opt 是 optional (可选) 的缩写，这个目录是用于安装第三方应用程序的，可以由用户自己指定安装位置。当需要卸载第三方应用程序是，可以直接删除安装目录，而不影响系统其他任何设置。</p><h2 id="proc"><a href="#proc" class="headerlink" title="/proc"></a><code>/proc</code></h2><p>proc 是 Processes (进程) 的缩写, <code>/proc</code> 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，他是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p><p>这个目录的内容不在硬盘上，而是在内存里，我们也科技直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的 ping 命令，是别人无法 ping 你的机器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">&gt;</span> /proc/sys/net/ipv4/icmp_echo_ignore_all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="root"><a href="#root" class="headerlink" title="/root"></a><code>/root</code></h2><p>系统管理员（root）的家目录。之所以放在这里，是因为如果进入单用户维护模式而仅挂载根目录时，该目录就能够拥有root的主文件夹，所以我们会希望root的主文件夹与根目录放置在同一个分区中。</p><h2 id="run"><a href="#run" class="headerlink" title="/run"></a><code>/run</code></h2><p>是一个临时文件系统，存储系统启动以来的信息，当系统重启是，这个目录下的文件应该被删掉或清楚。如果你的系统上有 <code>/var/run/</code>目录，应该让它只想 <code>/run</code></p><h2 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a><code>/sbin</code></h2><p>s 就是 Supper User 的意思，是 Superuser Binaries （超级用户的二进制文件）的缩写，这里存放的是系统管理员使用的系统管理程序。</p><p>Linux 有非常多的命令是用来设置系统环境的，这些命令只有 root 才能够利用来 “设置” 系统，其他用户最多只能用来 “查询” 而已。 放在 <code>/sbin</code> 下面的为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的命令。</p><h2 id="selinux"><a href="#selinux" class="headerlink" title="/selinux"></a><code>/selinux</code></h2><p>这个目录是 Redhat/CentOS 所持有的目录， SELinux是一种安全机制，类似与 Windows的防火墙，但是这套机制比较复杂，这个目录就是存放 selinux 相关的文件的。</p><h2 id="srv"><a href="#srv" class="headerlink" title="/srv"></a><code>/srv</code></h2><p>srv 可以视为 “service” 的缩写，是一些网络服务启动之后，这些服务所需要取用的数据目录。常见的服务例如 WWW、FTP等。举例来说 WWW 服务需要的网页数据就可以放置在 <code>/srv/www/</code> 里。</p><h2 id="sys"><a href="#sys" class="headerlink" title="/sys"></a><code>/sys</code></h2><p>这是 Linux 2.6 内核的一个很大的变化。 该目录下 2.5 内核中新出现的一个文件系统 sysfs。</p><p>sysfs 文件系统集成了下面3中文件系统的信息：</p><ul><li>针对进程信息的 proc 文件系统</li><li>针对设备的 devfs 文件系统</li><li>针对伪终端的 devpfs 文件系统</li></ul><p>该文件系统是内核设备数的一个直观反映， 当以个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中别创建。</p><h2 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a><code>/tmp</code></h2><p>tmp 是 temporary (临时) 的缩写，这个目录使用来存放一些临时文件的。</p><h2 id="usr"><a href="#usr" class="headerlink" title="/usr"></a><code>/usr</code></h2><p>usr是 Unix Software Resource 的缩写，也就是 “UNIX 软件资源”目录，而不是用户的数据。</p><p>FHS建议所有软件开发者应该将他们的数据合理地分别放置到这个目录下的子目录，而不是自行新建该软件的独立目录。</p><ul><li><code>/usr/bin/</code>: 绝大部分的用户可使用的命令都放在这里</li><li><code>/usr/include/</code>: C/C++ 等程序语言的头文件（header) 与包含文件（include）放置出</li><li><code>/usr/lib/</code>: 包含各应用软件的函数库、目标文件以及一些不被一般用户惯用的执行文件或脚本</li><li><code>/usr/lib64/</code>:</li><li><code>/usr/local/</code>: 系统管理员在本机自行安装下载的软件建议安装到此目录</li><li><code>/usr/sbin/</code>: 非系统正常运行所需的系统命令</li><li><code>/usr/share</code>: 放置共享文件的地方</li><li><code>/usr/src/</code>: 一般源码建议放置到这里</li></ul><h2 id="var"><a href="#var" class="headerlink" title="/var"></a><code>/var</code></h2><p>该目录主要针对常态性可变动文件， 包括缓存（cache）、登陆文件（log file）以及某些软件运行所产生的文件，包括程序文件（lock file、run file），或者例如 MySQL数据库的文件等。</p><p>如果 <code>/usr</code> 是安装时会占用较大的硬盘容量的目录，那么 <code>/var</code>就是在系统运行后才会渐渐占用硬盘容量的目录。</p><ul><li><code>/var/cache/</code>: 应用程序本省运行过程中会产生的一些暂存文件</li><li><code>/var/lib</code>: 程序本身执行过程中，需要使用到的数据文件放置的目录</li><li><code>/var/lock/</code>: 目录下的文件资源一次只能被一个应用程序所使用</li><li><code>/var/log/</code>: 放置登陆文件的目录</li><li><code>/var/mail/</code>: 放置个人电子邮件信箱的目录</li><li><code>/var/run /</code>: 某些程序或服务启动后的 PID 目录</li><li><code>/var/spool</code>: 放置排队等待其他应用程序使用的数据</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux_Based</title>
      <link href="/posts/38746.html"/>
      <url>/posts/38746.html</url>
      
        <content type="html"><![CDATA[        <h2>计算机组成结构 </h2>        <p>计算机系统过由硬件系统和软件系统两大部分组成。美藉匈牙利科学家 冯 诺依曼（John von Neumann），奠定了现代计算机的基本机构：其特点如下：</p>        <ol>            <li>使用单一的处理部件来完成计算、存储以及通信的工作</li>            <li>存储单元是定长的线性组织.</li>            <li>存储空间的单元是直接寻址的。</li>            <li>使用低级机器语言，指令通过操作码来完成简单的操作。</li>            <li>对计算进行简单的顺序控制。</li>            <li>采用二进制形式表示数据和指令。</li>            <li>在执行程序和处理数据是必须将程序和数据从存储其装入主存储其中，然后才能使计算机</li>        </ol>        <h3>计算机指令</h3>        <h3>计算机硬件系统</h3>            <h3>CPU架构</h3>        <ol>            <li>精简指令集（Reduced Instruction Set Computer, RISC）</li>            <li>复杂指令集（Complex Instruction Set Computer, CISC）</li>        </ol>        <h3>容量单位</h3>        <table>            <tbody><tr>                <th>bit</th>                <th>Byte</th>                <th>kilo</th>                <th>Mega</th>                <th>Giga</th>                <th>Tera</th>                <th>Peta</th>                <th>Exa</th>                <th>Zetta</th>            </tr>            <tr>                <td>   </td>                <td>8bit</td>                <td>1024B</td>                <td>1024K</td>                <td>1024M</td>                <td>1024G</td>                <td>1024T</td>                <td>1024P</td>                <td>1024E</td>             </tr>        </tbody></table>        <h3>速度单位</h3>                <h3>CPU桥接器</h3>        <ol>            <li>北桥：负责连接速度较快的CPU、内存与显卡接口等元件。在目前的主流架构中，大多将北桥内存控制器整合到CPU封装中去了。</li>            <li>南桥：负责连接速度较慢的设备接口，包括硬盘、USB、网卡等等</li>        </ol>        <h3>CPU的工作频率：外频和倍频</h3>        <ul>            <li>外频：CPU与外部元件进行数据传输时的速度</li>            <li>倍频：CPU内部用来加速工作性嫩的一个倍数</li>        </ul>        <h2>Linux 分区</h2>        <h2>Linux Command</h2>        <h3>文件管理</h3>        <ol>            <li><code>touch</code></li>            <li><code>rm</code></li>            <li><code>cat</code></li>            <li></li>            <li></li>            <li></li>            <li></li>            <li></li>        </ol>    ]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uCOS-III</title>
      <link href="/posts/60970.html"/>
      <url>/posts/60970.html</url>
      
        <content type="html"><![CDATA[<h1 id="UCOS学习"><a href="#UCOS学习" class="headerlink" title="UCOS学习"></a>UCOS学习</h1><h2 id="一、-裸机系统与多任务系统"><a href="#一、-裸机系统与多任务系统" class="headerlink" title="一、 裸机系统与多任务系统"></a>一、 裸机系统与多任务系统</h2><h3 id="1-裸机系统"><a href="#1-裸机系统" class="headerlink" title="1. 裸机系统"></a>1. 裸机系统</h3><p>裸机系统通常分为轮询系统和前后台系统。</p><h4 id="1-1-轮询系统"><a href="#1-1-轮询系统" class="headerlink" title="1.1 轮询系统"></a>1.1 轮询系统</h4><p>轮询系统即是在裸机编程的时候，先初始化相关的硬件，然后让主程序在一个死循环里面不断循环，顺序的做各种事情。</p><p>轮询系统是一种非常简单的软件结构，通常只适合用于顺序执行代码且不需要外部事件驱动的就能完成的事情。当有外部事件驱动时，实时性就会降低。</p><h4 id="1-2-前后台系统"><a href="#1-2-前后台系统" class="headerlink" title="1.2 前后台系统"></a>1.2 前后台系统</h4><p>相比轮询系统，前后台系统实在轮询系统的基础上加入了中断。外部事件的响应在中断里面完成，事件的处理还是回到轮询系统中完成，中断在这里我们称为前台，main函数里面的无限循环我们称为后台。</p><p>使用前后台系统，可以大大提高程序的实时响应能力。</p><h3 id="2-多任务系统"><a href="#2-多任务系统" class="headerlink" title="2. 多任务系统"></a>2. 多任务系统</h3><p>相比于前后台系统，多任务系统的事件响应也是在中断中完成的，但是事件的处理实在任务中完成的。在多任务系统中，任务跟中断一样，也具有优先级，优先级高的任务会被优先执行。当一个紧急的事件在中断被标记之后，如果事件对应的任务的优先级足够高，就会立马得到响应。相比前后台系统，多任务系统的实时性又被提高了。</p><h3 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h3><p>凡是与CPU类型相关的数据类型统一在<code>cpu.h</code>中定义</p><p>与操作系统相关的数据类型则在 <code>ostype.h</code>中定义。</p><p><strong>uC/OS-III中的命名规则：</strong>以<code>OS</code>开头，表示这是一个外部函数，可以又用户调用；以<code>OS_</code>开头的函数表示内部函数，只能在uC/OS-III内部使用。  紧接着是文件名，表示该函数放在哪个文件中，最后是函数功能名称。</p><h2 id="任务定义与任务切换"><a href="#任务定义与任务切换" class="headerlink" title="任务定义与任务切换"></a>任务定义与任务切换</h2><h3 id="任务定义"><a href="#任务定义" class="headerlink" title="任务定义"></a>任务定义</h3><h3 id="1-定义任务优先级"><a href="#1-定义任务优先级" class="headerlink" title="1.定义任务优先级"></a>1.定义任务优先级</h3><h4 id="2-定义任务栈"><a href="#2-定义任务栈" class="headerlink" title="2.定义任务栈"></a>2.定义任务栈</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_STK_SIZE</span> <span class="token expression"><span class="token number">128</span> </span><span class="token comment">// 在uC/OS-III中，空闲任务的栈大小最小应该大于128</span></span>CPU_STK TaskStk<span class="token punctuation">[</span>TASK_STK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-定义任务控制块"><a href="#3-定义任务控制块" class="headerlink" title="3. 定义任务控制块"></a>3. 定义任务控制块</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">OS_TCB TaskTCB<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-定义任务函数"><a href="#4-定义任务函数" class="headerlink" title="4.定义任务函数"></a>4.定义任务函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>p_arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>OSTaskCreate()</code>，<code>OSTaskStkInit()</code>，<code>OSInit()</code>，<code>OSStart()</code></p><h3 id="时间片"><a href="#时间片" class="headerlink" title="时间片"></a>时间片</h3><h3 id="空闲任务"><a href="#空闲任务" class="headerlink" title="空闲任务"></a>空闲任务</h3><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><h3 id="临界段"><a href="#临界段" class="headerlink" title="临界段"></a>临界段</h3><h2 id="uCOS-III移植"><a href="#uCOS-III移植" class="headerlink" title="uCOS-III移植"></a>uCOS-III移植</h2><h3 id="1-准备STM32裸机工程模板"><a href="#1-准备STM32裸机工程模板" class="headerlink" title="1.准备STM32裸机工程模板"></a>1.准备STM32裸机工程模板</h3><h3 id="2-获取uCOS-III源码"><a href="#2-获取uCOS-III源码" class="headerlink" title="2.获取uCOS-III源码"></a>2.获取uCOS-III源码</h3><p>打开Micrium 公司<a href="www.micrium.com">官方网站</a>，选择 Downloads 选项卡进入下载页面，在这里针对不同的架构，不同的MCU，有不同的项目评估版源码，我们移植uCOS-III，就是将下载的源码移植到我们准备的裸机工程里。</p><p>下载的时候我们要选择与我们开发板最为接近的版本。</p><p>如： STM32F103系列开发板，我们选择 STM32F107 评估板的项目源码</p><p><img src="/posts/60970/Download-Template-project.png" alt="Download Template project"></p><h4 id="2-1-uC-OS-III-源码文件介绍（STM32F107）"><a href="#2-1-uC-OS-III-源码文件介绍（STM32F107）" class="headerlink" title="2.1 uC/OS-III 源码文件介绍（STM32F107）"></a>2.1 uC/OS-III 源码文件介绍（STM32F107）</h4><p><img src="/posts/60970/Code-Folder.png" alt="Code Folder"></p><ul><li><strong>EvalBoards</strong> 文件夹中包含了，与板子相关的文件，配置文件，以及<code>bsp</code>文件</li><li><strong>uC-CPU</strong> ：包含和CPU紧密相关的文件，里面的一些文件很重要，都是我们需要使用的。在<strong>ARM-Cortex-M3</strong>文件夹下，有GNU、IAR、RealView等文件夹，其中该包括<code>cpu-c.c</code>等重要文件，我们使用的开发环境是MDK（keil），所以选择 RealView 文件夹下的源码文件。</li><li><strong>uC-LIB</strong>：可以选择地使用 Micrium 公司提供的官方库，诸如字符串操作、内存操作等接口，一般用于代替标准库中的一些函数，使得在嵌入式中应用更加方便、安全。</li><li><strong>uCOS-III</strong>：该文件夹下有两个文件夹：<strong>Ports</strong> 和 <strong>Source</strong> <ul><li><strong>Ports</strong> 文件夹中的文件是与处理器架构相关的代码，即RTOS硬件接口层；在该文件下也有GNU、IAR、RealView等文件夹，在不同的开发环境下，需要选择不同的文件。</li><li><strong>Source</strong>文件夹中存储的是 uC/OS的源码文件，他们是 uC/OS 核心文件，是非常重要的，在移植时必须将这些文件添加到工程中。</li></ul></li></ul><h3 id="3-移植到STM32裸机工程"><a href="#3-移植到STM32裸机工程" class="headerlink" title="3.移植到STM32裸机工程"></a>3.移植到STM32裸机工程</h3><h4 id="3-1-创建文件夹"><a href="#3-1-创建文件夹" class="headerlink" title="3.1 创建文件夹"></a>3.1 创建文件夹</h4><pre class="line-numbers language-none"><code class="language-none">UCOSIII├── uCOS-BSP# 放置 EvalBoards 目录中的 bsp文件├── uCOS-CONFIG# 放置 EvalBoards 目录中的 配置文件├── uCOS-CPU # 放置 uC-CPU 目录中的文件├── uCOS-III# 放置 uCOS-III 目录中的文件|   ├── Ports|   └── Source└── uCOS-LIB# 放置 uC-LIB 目录中的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-在工程中添加文件分组并将在根目录创建的文件夹中的文件添加进来"><a href="#3-2-在工程中添加文件分组并将在根目录创建的文件夹中的文件添加进来" class="headerlink" title="3.2 在工程中添加文件分组并将在根目录创建的文件夹中的文件添加进来"></a>3.2 在工程中添加文件分组并将在根目录创建的文件夹中的文件添加进来</h4><p><img src="/posts/60970/Add-Group.png" alt="Add Group"></p><h4 id="3-3-添加头文件目录"><a href="#3-3-添加头文件目录" class="headerlink" title="3.3 添加头文件目录"></a>3.3 添加头文件目录</h4><p><img src="/posts/60970/Add-Head-File-Folder.png" alt="Add Head File Folder"></p><h4 id="3-4-修改工程文件"><a href="#3-4-修改工程文件" class="headerlink" title="3.4 修改工程文件"></a>3.4 修改工程文件</h4><h5 id="3-4-1-修改启动文件"><a href="#3-4-1-修改启动文件" class="headerlink" title="3.4.1 修改启动文件"></a>3.4.1 修改启动文件</h5><p><img src="/posts/60970/Modify-Startup-File_1.png" alt="Modify Startup File 1"></p><p><img src="/posts/60970/Modify-Startup-File_2.png" alt="Modify Startup File 2"></p><p>并将<code>stm32f10x_it.c</code>文件中的 <code>PendSV_Handler</code>函数和<code>SysTick_Handler</code>函数注释。</p><h4 id="3-4-2-FPU运算"><a href="#3-4-2-FPU运算" class="headerlink" title="3.4.2  FPU运算"></a>3.4.2  FPU运算</h4><p>如果MCU支持 FPU运算，需要添加如下代码，然后在 Option -&gt; Target-&gt; Floating Point Hardware 中选择启用浮点运算。。</p><p><img src="/posts/60970/image-20200916163024182.png" alt="image-20200916163024182"></p><h4 id="3-4-3-修改bsp-c和bsp-h文件"><a href="#3-4-3-修改bsp-c和bsp-h文件" class="headerlink" title="3.4.3 修改bsp.c和bsp.h文件"></a>3.4.3 修改<code>bsp.c</code>和<code>bsp.h</code>文件</h4><p>根据个人习惯和个人需要，可以进行修改，除了部分时钟相关的需要保留外，其他的部分都可以自行删改；修改完成后，我们可以编译一下，看会不会报错。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">BSP_MODULE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bsp.h&gt;</span></span>CPU_INT32U  BSP_CPU_ClkFreq_MHz<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DWT_CR</span>      <span class="token expression"><span class="token operator">*</span><span class="token punctuation">(</span>CPU_REG32 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xE0001000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DWT_CYCCNT</span>  <span class="token expression"><span class="token operator">*</span><span class="token punctuation">(</span>CPU_REG32 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xE0001004</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DEM_CR</span>      <span class="token expression"><span class="token operator">*</span><span class="token punctuation">(</span>CPU_REG32 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xE000EDFC</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DBGMCU_CR</span>   <span class="token expression"><span class="token operator">*</span><span class="token punctuation">(</span>CPU_REG32 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xE0042004</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DBGMCU_CR_TRACE_IOEN_MASK</span>       <span class="token expression"><span class="token number">0x10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DBGMCU_CR_TRACE_MODE_ASYNC</span>      <span class="token expression"><span class="token number">0x00</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DBGMCU_CR_TRACE_MODE_SYNC_01</span>    <span class="token expression"><span class="token number">0x40</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DBGMCU_CR_TRACE_MODE_SYNC_02</span>    <span class="token expression"><span class="token number">0x80</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DBGMCU_CR_TRACE_MODE_SYNC_04</span>    <span class="token expression"><span class="token number">0xC0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DBGMCU_CR_TRACE_MODE_MASK</span>       <span class="token expression"><span class="token number">0xC0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DEM_CR_TRCENA</span>                   <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">DWT_CR_CYCCNTENA</span>                <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span>  <span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token keyword">void</span>  <span class="token function">BSP_Init</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BSP_LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>LED_PORT<span class="token punctuation">,</span>LED_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>CPU_INT32U  <span class="token function">BSP_CPU_ClkFreq</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    RCC_ClocksTypeDef  rcc_clocks<span class="token punctuation">;</span>    <span class="token function">RCC_GetClocksFreq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rcc_clocks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CPU_INT32U<span class="token punctuation">)</span>rcc_clocks<span class="token punctuation">.</span>HCLK_Frequency<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>APP_CFG_PROBE_OS_PLUGIN_EN <span class="token operator">==</span> DEF_ENABLED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> </span><span class="token punctuation">\</span>     <span class="token expression"><span class="token punctuation">(</span>OS_PROBE_HOOKS_EN          <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">void</span>  <span class="token function">OSProbe_TmrInit</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>APP_CFG_PROBE_OS_PLUGIN_EN <span class="token operator">==</span> DEF_ENABLED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> </span><span class="token punctuation">\</span>     <span class="token expression"><span class="token punctuation">(</span>OS_PROBE_HOOKS_EN          <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>CPU_INT32U  <span class="token function">OSProbe_TmrRd</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CPU_INT32U<span class="token punctuation">)</span>DWT_CYCCNT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>CPU_CFG_TS_TMR_EN <span class="token operator">==</span> DEF_ENABLED<span class="token punctuation">)</span></span></span><span class="token keyword">void</span>  <span class="token function">CPU_TS_TmrInit</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CPU_INT32U  cpu_clk_freq_hz<span class="token punctuation">;</span>    DEM_CR         <span class="token operator">|=</span> <span class="token punctuation">(</span>CPU_INT32U<span class="token punctuation">)</span>DEM_CR_TRCENA<span class="token punctuation">;</span>                <span class="token comment">/* Enable Cortex-M3's DWT CYCCNT reg.                   */</span>    DWT_CYCCNT      <span class="token operator">=</span> <span class="token punctuation">(</span>CPU_INT32U<span class="token punctuation">)</span><span class="token number">0u</span><span class="token punctuation">;</span>    DWT_CR         <span class="token operator">|=</span> <span class="token punctuation">(</span>CPU_INT32U<span class="token punctuation">)</span>DWT_CR_CYCCNTENA<span class="token punctuation">;</span>    cpu_clk_freq_hz <span class="token operator">=</span> <span class="token function">BSP_CPU_ClkFreq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_TS_TmrFreqSet</span><span class="token punctuation">(</span>cpu_clk_freq_hz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>CPU_CFG_TS_TMR_EN <span class="token operator">==</span> DEF_ENABLED<span class="token punctuation">)</span></span></span>CPU_TS_TMR  <span class="token function">CPU_TS_TmrRd</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CPU_TS_TMR<span class="token punctuation">)</span>DWT_CYCCNT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-4-按需配置最适工程"><a href="#3-4-4-按需配置最适工程" class="headerlink" title="3.4.4 按需配置最适工程"></a>3.4.4 按需配置最适工程</h4><p>完成前面的修改后，此时工程是可以使用了的，但这并不是最适合的工程模板，我们需要进行配置，对 uCOS 系统进行裁剪。</p><div class="table-container"><table><thead><tr><th>文件名</th><th>描述</th></tr></thead><tbody><tr><td>os_cfg.h</td><td>os_cfg.h 文件是系统的配置文件，主要是让用户自己配置一些系统默认的功能，用户可以选择某些或者全部的功能，比如消息队列、信号量、互斥量、事件标志位等，系统默认全部使用，如果用户不需要的话，则可以直接关闭，在对应的宏定义中设置为0即可，这样子就不会占用系统的 SRAM，以节省系统资源。</td></tr><tr><td>cpu_cfg.h</td><td>cpu_cfg.h 文件主要是配置 CPU相关的一些宏定义，我们可以选择对不同的 CPU 进行配置，当然，如果我们没有对CPU很熟悉的话，就直接忽略这个文件即可，在这里我们只需要注意关于时间戳与前导零指令相关的内容，我们使用的 CPU 是32位的CPU，那么时间戳我们使用 32位 的变量即可，而且 STM32支持前导零指令，可以使用它让系统进行寻找最高的有相机任务更加快捷</td></tr><tr><td>os_cfg_app.h</td><td>os_cfg_app.h 是系统应用配置的头文件，简单来说就是系统默认的任务配置，如任务的优先级、堆栈大小等基本信息，但是有两个任务是必须开启的，一个是空闲任务，另一个是时钟节拍任务，这两个是让系统正常运行的最基本任务，而其他任务我们自己按需配置即可。</td></tr></tbody></table></div><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>在定义任务堆栈时，在前面加上 <code>__aligned(8)</code>，使堆栈按8字节对齐，这样在打印输出浮点数时，才能正确打印，也能减少很多未知 bug 的出现 </li><li>在使用 <code>printf</code>、<code>snprintf</code> 等打印函数时，添加 强制类型转换，可以避免一些问题。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm 命令详解</title>
      <link href="/posts/34849.html"/>
      <url>/posts/34849.html</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.codenong.com/10068592/">关于node.js：如何在NPM中更新devDependencies</a></p></blockquote><h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><ul><li><p>-S，-save 安装包信息将加到 dependencies  (生产阶段的依赖)</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save <span class="token function">npm</span> <span class="token function">install</span> -S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>-D，—save-dev 安装包信息加载到 devDependencied (开发阶段的依赖)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev<span class="token function">npm</span> <span class="token function">install</span> -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>-O, —save-optional 安装包信息将加入到 optionalDependencies  (可选阶段的依赖)</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> jquery --save-optional <span class="token function">npm</span> <span class="token function">install</span> jquery -O<span class="token comment"># 以安装 jquery 为例， package.jso 的文件中 optionDependencies 字段有以下大妈</span><span class="token string">"optionalDependencies"</span>:<span class="token punctuation">{</span> <span class="token string">"jquery"</span><span class="token builtin class-name">:</span><span class="token string">"^3.9.1"</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>-E，—save-exact 精确安装指定模块版本</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> jquery --save-exact<span class="token function">npm</span> <span class="token function">install</span> jquery -E<span class="token comment"># 如果输入命令为 </span><span class="token function">npm</span> <span class="token function">install</span> jquery -ES<span class="token comment"># 留意 package.json 文件的 dependencies 字段，可以看到版本好中的 ^ 消失了</span><span class="token string">"dependencies"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token string">"jquery"</span><span class="token builtin class-name">:</span> <span class="token string">"3.2.1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模块依赖都没写入了package.json文件后，他人打开项目的根目录（羡慕开源、内部团队合作），使用<code>npm install</code>命令可以根据 dependencies 配置安装所有的依赖包</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> isntall <span class="token comment"># 输入该命令后， package.json 的 devDependencies 字段里的插件会被自动安装到 node_modules 下</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>npm uninstall</code>卸载模块</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall jquery --save-optional  <span class="token comment"># 卸载可选阶段里的jquery</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>npm 目前支持以下几种依赖包的管理：</p><ul><li><p><strong>depedencies</strong> : 指定应用依赖的外部包，这些依赖时应用正常发布后正常执行所需要的，但不包含测试时和本地打包时所使用的包。</p></li><li><p><strong>devDependencies</strong>：它里面的包只用于开发环境，不用于生产环境，这些包通常时单元测试或者打包工具等，例如 gulp,grunt,webpack,moca,coffee 等</p></li><li><p><strong>peerDependencies</strong>：同等依赖，或者叫同伴依赖，用于指定当前包（也就是你写的包）兼容的宿主版本。如何理解呢？试想以下，我们编写一个guip的插件，而gulp却有多个主版本，我们只想兼容最新的版本，此时就可以用同等依赖（peerDependencies）来指定：</p><pre class="line-numbers language-Json" data-language="Json"><code class="language-Json">{  "name": "gulp-mu-plugin",  "version": "0.0.1",  "peerDependencies",  {  "gulp": "3.x"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当别人使用我们的插件时，peerDependencies就会明确的告诉使用方，你需要安装该插件的那个宿主版本。通常情况下，我们会在一个项目里使用一个宿主（比如gulp）的很多插件，如果相互之间存在宿主不兼容，在执行 npm install 时， cli 会抛出错误信息来告诉我们，比如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> ERR<span class="token operator">!</span> peerinvalid The package gulp does not statisfy its siblings' peerDependencies requirements<span class="token operator">!</span><span class="token function">npm</span> ERR<span class="token operator">!</span> peerinvalid Peer gulp-cli-config@0.1.3 wants gulp@-3.1.9<span class="token function">npm</span> ERR<span class="token operator">!</span> peerinvalid Peer gulp-cli-users@0.1.4 wants gulp@-2.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行命令 npm install gulp-my-plugin —save-dev 来安装我们的插件，我们来看下依赖图谱：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── gulp-my-plugin@0.0.1└── gulp@3.9.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>optionalDependencies</strong>：可选依赖，如果有一些依赖包即使安装失败，项目仍然能够运行或者希望 npm 继续运行，就可以使用 optionDependencies。另外 optionalDependencies 会覆盖 dependencies中的同名依赖包，所以不要在两个地方都写。</p></li><li><p><strong>bundledDependencies / bundleDependencies</strong>:  打包依赖， bundledDependencies是一个包含依赖包名的数组，在发布时会将这个对象中的包打包到最终的发布包里。</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_learning</title>
      <link href="/posts/62111.html"/>
      <url>/posts/62111.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linxu系统启动过程"><a href="#Linxu系统启动过程" class="headerlink" title="Linxu系统启动过程"></a>Linxu系统启动过程</h2><ol><li>内核引导</li><li>运行 init</li><li>系统初始化</li><li>建立终端</li><li>用户登陆系统</li></ol><h2 id="LInux-对象"><a href="#LInux-对象" class="headerlink" title="LInux 对象"></a>LInux 对象</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><h2 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h2><p>  <code>ls</code>、<code>cd</code>、<code>mkdir</code>、<code>rmdir</code>、<code>rm</code></p><p>数据恢复工具<code>extundelete</code></p><p>增删改查</p><p>重定向 <code>&gt;&gt;</code>、<code>&lt;&lt;</code>、</p><p><code>touch</code>、<code>stat</code>、<code>cat</code>、<code>more</code>、<code>less</code>、<code>head</code>、<code>tail</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yaml</title>
      <link href="/posts/65391.html"/>
      <url>/posts/65391.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>YAML语言（发音 /ˈjæməl/）的设计目标，就是方便人类读写。它实质上是通用的数据串行化格式。</p><p>他的基本语法规则如下。</p><blockquote>    <ul>        <li>大小写敏感</li>        <li>使用缩进表示层级关系</li>        <li>缩进时不允许使用Tab键，只允许使用空格</li>        <li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>    </ul></blockquote><p><code>#</code>表示注释，从这个字符开始，一直到行尾都会被解析器忽略。</p><p>YAML支持的数据结构有三种：</p><ul>    <li>对象：键值对的集合，又称为映射(mapping)/哈希(hashes)/字典(dictionary)</li>    <li>数组：一组按次序排列的值，又称为序列(sequence)/列表(list)</li>    <li>纯量(scalars):单个的、不可再分的值</li></ul><h2 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h2><h3 id="1-对象"><a href="#1-对象" class="headerlink" title="1. 对象"></a>1. 对象</h3><p>    对象的一组键值对，使用冒号结构表示</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># yaml</span><span class="token key atrule">animal</span><span class="token punctuation">:</span> pets<span class="token comment"># JavaScript</span><span class="token punctuation">{</span> <span class="token key atrule">animal</span><span class="token punctuation">:</span> <span class="token string">'pets'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Yaml也允许另一种写法，将所有键值对写成一个行内对象。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># yaml</span><span class="token key atrule">hash</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Steve<span class="token punctuation">,</span> <span class="token key atrule">foo</span><span class="token punctuation">:</span> bar <span class="token punctuation">}</span><span class="token comment"># JavaScript</span><span class="token punctuation">{</span> <span class="token key atrule">hash</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> <span class="token key atrule">foo</span><span class="token punctuation">:</span> <span class="token string">'bar'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组"></a>2. 数组</h3><p>一组连词线开头的行，构成一个数组。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>- Cat- Dog- Goldfish<span class="token comment"># JavaScript</span><span class="token punctuation">[</span> <span class="token string">'Cat'</span>, <span class="token string">'Dog'</span>, <span class="token string">'Goldfish'</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据结构的自成员是一个数组，则可以在该项下面缩进一个空格。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>- - Cat - Dog - Goldfish<span class="token comment"># JavaScript</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">'Cat'</span>, <span class="token string">'Dog'</span>, <span class="token string">'Goldfish'</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组也可以采用行内表示法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>animal: <span class="token punctuation">[</span>Cat, DOg<span class="token punctuation">]</span><span class="token comment"># JavaScript</span><span class="token punctuation">{</span> animal: <span class="token punctuation">[</span><span class="token string">'Cat'</span>, <span class="token string">'Dog'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-复合结构"><a href="#3-复合结构" class="headerlink" title="3. 复合结构"></a>3. 复合结构</h3><p>对象和数组可以结合使用，形成复合机构。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>languages: - Ruby - Perl - Pythonwebsites: YAML: yaml.org Ruby: ruby-lang.org Python: python.org Perl: use.perl.org<span class="token comment"># JavaScript</span><span class="token punctuation">{</span>   languages: <span class="token punctuation">[</span><span class="token string">'Ruby'</span>, <span class="token string">'Perl'</span>, <span class="token string">'Python'</span><span class="token punctuation">]</span> ,  websites:  <span class="token punctuation">{</span>    YAML: <span class="token string">'yaml.org'</span>,    Ruby: <span class="token string">'ruby-lang.org'</span>    Python: <span class="token string">'python.org'</span>,    Perl: <span class="token string">'use.perl.org'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-纯量"><a href="#4-纯量" class="headerlink" title="4. 纯量"></a>4. 纯量</h3><p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯良</p><ul>    <li>字符串</li>    <li>布尔值</li>    <li>整数</li>    <li>浮点数</li>    <li>Null</li>    <li>时间</li>    <li>日期</li></ul><p>数值直接以字面量的形式表示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>number: <span class="token number">12.30</span><span class="token comment"># JavaScript</span><span class="token punctuation">{</span> number: <span class="token number">12.30</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布尔值用 <code>true</code> 和 <code>false</code> 表示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>isSet: <span class="token boolean">true</span><span class="token comment"># JavaScript</span><span class="token punctuation">{</span> isSet: <span class="token boolean">true</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>null</code> 用 <code>~</code>表示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>parent: ~<span class="token comment"># JavaScript</span><span class="token punctuation">{</span> parent: null <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间采用  ISO8601  格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>iso8601: <span class="token number">2001</span>-12-14t19:29:20.10-05:00<span class="token comment"># JavaScript</span><span class="token punctuation">{</span> iso8601: new Date<span class="token punctuation">(</span><span class="token string">'2001-12-14-19:29:20.10-05:00'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日期采用复合 iso8601 格式的年、月、日表示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>date： <span class="token number">1999</span>-09-21<span class="token comment"># JavaScript</span><span class="token punctuation">{</span> date: new Date<span class="token punctuation">(</span><span class="token string">'1976-0731'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Yaml 允许使用两个感叹号强制转换数据类型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>e: <span class="token operator">!</span><span class="token operator">!</span>str <span class="token number">123</span>f: <span class="token operator">!</span><span class="token operator">!</span>str <span class="token boolean">true</span><span class="token comment"># JavaScript</span><span class="token punctuation">{</span> e: <span class="token string">'123'</span>, f: <span class="token string">'true'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5. 字符串"></a>5. 字符串</h3><p>字符串是最常见，也是最复杂的一种数据类型。</p><p>字符串默认不适用引号表示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>str: 这是一行字符串<span class="token comment"># JavaScript</span><span class="token punctuation">{</span> str: <span class="token string">'这是一行字符串'</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果字符串之中包含空格或特殊字符，需要放在引号之中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>str: <span class="token string">'内容： 字符串'</span><span class="token comment"># JavaScript</span><span class="token punctuation">{</span> str: <span class="token string">'内容：字符串'</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单引号和双引号都可以使用，双引号不会对特殊字符转义：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>s1: <span class="token string">'内容\n字符串'</span>s2: <span class="token string">"内容<span class="token entity" title="\n">\n</span>字符串"</span><span class="token comment"># JavaScript</span><span class="token punctuation">{</span> s1: <span class="token string">'内容\\n字符串'</span>， s2: <span class="token string">'内容\n字符串'</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单引号之中如果还有单引号，必须连续使用两个单引号转义。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>str: <span class="token string">'labor'</span>'s day<span class="token string">'# JavaScriptstr: '</span>labor<span class="token punctuation">\</span>'s day'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转换为空格。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>str: 这是一段 多行 字符串<span class="token comment"># JavaScript</span><span class="token punctuation">{</span> str: <span class="token string">'这是一段 多行 字符串'</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多行字符串可以使用 <code>|</code> 保留换行符，也可以使用 <code>&gt;</code>折叠换行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>this: <span class="token operator">|</span> Foo Barthat: <span class="token operator">&gt;</span> Foo Bar<span class="token comment"># JavaScript</span><span class="token punctuation">{</span> this: <span class="token string">'Foo\nBar\n'</span>, that: <span class="token string">'Foo Bar\n'</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>+</code>表示保留文字块末尾的换行符， <code>-</code>表示删除字符串末尾的换行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>s1: <span class="token operator">|</span> Foos2: <span class="token operator">|</span>+ Foos3: <span class="token operator">|</span>- Foo<span class="token comment"># JavaScript</span><span class="token punctuation">{</span> s1: <span class="token string">'Foo\n'</span>, s2: <span class="token string">'Foo\n\n\n'</span>, s3: <span class="token string">'Foo'</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串之中可以插入HTML标记。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>message: <span class="token operator">|</span>  <span class="token operator">&lt;</span>p <span class="token assign-left variable">style</span><span class="token operator">=</span><span class="token string">"color:red"</span><span class="token operator">&gt;</span>    段落  <span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>  <span class="token comment"># JavaScript</span><span class="token punctuation">{</span> message: <span class="token string">'\n&lt;p style="color:red"&gt;\n 段落\n&lt;/p&gt;\n'</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h3><p>锚点 <code>&amp;</code>和别名<code>*</code>，可以用来引用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>default: <span class="token operator">&amp;</span>default  adapter: postgres  host:    localhost  development:  database: myapp_development  <span class="token operator">&lt;&lt;</span>: *default   test:   database: myapp_test   <span class="token operator">&lt;&lt;</span>: *defaults<span class="token comment"># JavaScript</span>defaults:  adapter: postgres  host:    localhost  development:  database: myapp_development  adapter: postgres  host:    localhosttest:  database: myapp_test  adapter: postgres  host: localhost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&amp;</code>用来建立锚点(<code>defaults</code>),<code>&lt;&lt;</code>表示合并到当前数据，<code>*</code>用来引用锚点。</p><p>下面是另一个例子</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml</span>- <span class="token operator">&amp;</span>showell Steve- Clark- Brian- Oren- *showell<span class="token comment"># JavaScript</span><span class="token punctuation">[</span><span class="token string">'Steve'</span>, <span class="token string">'Clark'</span>, <span class="token string">'Brian'</span>, <span class="token string">'Oren'</span>, <span class="token string">'Steven'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/posts/37733.html"/>
      <url>/posts/37733.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo 是一个快速、简介且高效的博客框架。Hexo使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装Hexo我们要先安装一些软件</p><ul><li><a href="http://nodejs.org/">Node.js</a>（Node.js  版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本）</li><li><a href="http://git-scm.com/">Git</a></li></ul><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ul><li>windows: 通过 nvs 或 nvm 安装</li><li>Mac： 使用HomeBrew 或 MacPorts 安装</li><li>Linux： 使用相应的软件包管理器进行安装，可以参考Node.js提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a> </li></ul><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul><li>Windows: 下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac: 使用HomeBrew ，MacPorts或者下载安装程序 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a></li><li>Linux： 使用软件包管理器进行安装<ul><li>Ubuntu, Debian:  <code>sudo apt-get install git-core</code></li><li>Fedora, Red Hat, CentOs:  <code>sudo yum install git-core</code></li></ul></li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="进阶安装和使用"><a href="#进阶安装和使用" class="headerlink" title="进阶安装和使用"></a>进阶安装和使用</h4><p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装以后，可以使用以下两种方式执行<code>Hexo</code>:</p><ol><li><p><code>npx hexo &lt;command&gt;</code></p></li><li><p>将 Hexo 所在目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>:</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'PATH="$PATH:./node_modules/.bin"'</span> <span class="token operator">&gt;&gt;</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    </p><h3 id="Node-js-版本限制"><a href="#Node-js-版本限制" class="headerlink" title="Node.js 版本限制"></a>Node.js 版本限制</h3><p>官网中建议永远安装最新版本的 Hexo ，以及 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">推荐的 Node.js  版本</a>。</p><h2 id="Hexo建站"><a href="#Hexo建站" class="headerlink" title="Hexo建站"></a>Hexo建站</h2><p>Hexo安装完成后，执行系列命令，Hexo将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span>$ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span>$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class="line-numbers language-none"><code class="language-none">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的配置信息，可以在这个文件中配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。其中 <a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除</p><pre class="line-numbers language-none"><code class="language-none">package.json{  "name": "hexo-site",  "version": "0.0.0",  "private": true,  "hexo": {    "version": ""  },  "dependencies": {    "hexo": "^3.8.0",    "hexo-generator-archive": "^0.1.5",    "hexo-generator-category": "^0.1.3",    "hexo-generator-index": "^0.2.1",    "hexo-generator-tag": "^0.2.0",    "hexo-renderer-ejs": "^0.3.1",    "hexo-renderer-stylus": "^0.3.3",    "hexo-renderer-marked": "^0.3.2",    "hexo-server": "^0.3.3"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p>模板文件，当你新建文章时，Hexo会根据scaffold来建立文件。</p><p>Hexo的模板时指在新建的文章文件中默认填充的内容。例如，你修改<code>scaffold/post.md</code>中的Front-matter内容，那么每次新建一篇文章时，都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹，这是存放用户资源的地方。除<code>_posts</code>文件夹之外，开头命名为<code>_</code>（下划线）的文件或文件夹和隐藏的文件将会被忽略。 Markdown 和 HTML 文件会被解析并放到 <code>public</code>文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>主题文件夹。Hexo会根据主题来生成静态页面。</p><h2 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h2><p>_config.yml中的配置</p><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>title</code></td><td>网站标题</td></tr><tr><td style="text-align:center"><code>subtitle</code></td><td>网站副标题</td></tr><tr><td style="text-align:center"><code>description</code></td><td>网站描述，主要用于SEO，告诉搜索引擎一个关于你站点的简单描述，通常建议在其中包含网站的关键词。</td></tr><tr><td style="text-align:center"><code>keywords</code></td><td>网站的关键词，支持多个关键词</td></tr><tr><td style="text-align:center"><code>author</code></td><td>你的名字，用于主题显示文章的作者。</td></tr><tr><td style="text-align:center"><code>language</code></td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code></td></tr><tr><td style="text-align:center"><code>timezon</code></td><td>网站时区，Hexo默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如<code>America/New_York</code>,<code>Japan</code>和<code>UTC</code>。一般的，对于中国大陆地区可以使用<code>Asiz/Shanghai</code>。</td></tr></tbody></table></div><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th>描述</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center"><code>url</code></td><td>网址</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>root</code></td><td>网站根目录</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>permalink</code></td><td>文章的永久链接格式</td><td style="text-align:center"><code>`:year/:month/:day/:title/</code></td></tr><tr><td style="text-align:center"><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>pretty_urls</code></td><td>改写<code>permalink</code>的值来美化URL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>pretty_urls.trailing_index</code></td><td>是否在永久链接中保留尾部的<code>index.html</code>，设置为<code>false</code>时去除</td><td style="text-align:center"><code>true</code></td></tr><tr><td style="text-align:center"><code>pretty_urls.trailing_html</code></td><td>是否在永久链接中保留尾部的<code>.html</code>，设置为<code>false</code>时去除（对尾部的<code>index.html</code>无效）</td><td style="text-align:center"><code>true</code></td></tr></tbody></table></div><blockquote><p><strong>网站存放在子目录</strong></p><p>如果你的网站存放在子目录，例如<code>http://yoursite.com/blog</code>，则请将你的<code>url</code>设为<code>http://yoursite.com/blog</code>，并把<code>root</code>设为<code>/blog/</code>。</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 如果一个页面的永久链接是 http://example.com/foo/bar/index.html</span><span class="token key atrule">pretty_urls</span><span class="token punctuation">:</span>trailing_index<span class="token punctuation">:</span><span class="token boolean important">false</span><span class="token comment"># 此时页面的永久链接会变为 `http://example.com/foo/bar/`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center"><code>source_dir</code></td><td style="text-align:center">资源文件夹，这个文件夹用来存放内容</td><td style="text-align:center"><code>source</code></td></tr><tr><td style="text-align:center"><code>public_dir</code></td><td style="text-align:center">公共文件夹，这个文件夹用于存放生成的站点文件</td><td style="text-align:center"><code>public</code></td></tr><tr><td style="text-align:center"><code>tag_dir</code></td><td style="text-align:center">标签文件夹</td><td style="text-align:center"><code>tags</code></td></tr><tr><td style="text-align:center"><code>archive</code></td><td style="text-align:center">归档文件夹</td><td style="text-align:center"><code>archives</code></td></tr><tr><td style="text-align:center"><code>category_dir</code></td><td style="text-align:center">分类文件夹</td><td style="text-align:center"><code>categories</code></td></tr><tr><td style="text-align:center"><code>code_dir</code></td><td style="text-align:center">Include code 文件夹，<code>source_dir</code>下的子目录</td><td style="text-align:center"><code>downloads/code</code></td></tr><tr><td style="text-align:center"><code>i18n_dir</code></td><td style="text-align:center">国际化（i18n）文件夹</td><td style="text-align:center"><code>:lang</code></td></tr><tr><td style="text-align:center"><code>skip_render</code></td><td style="text-align:center">跳过指定文件的渲染。匹配到的文件会被不做改动地复制到<code>public</code>目录。可以使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> <span class="token string">"mypage/**/*"</span><span class="token comment"># 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 'public' 目录</span><span class="token comment"># 你也可以用这种方法来跳过对指定文章文件的渲染</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> <span class="token string">"_posts/test-post.md"</span><span class="token comment"># 这将会忽略对 'test-post.md' 的渲染</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文章</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td><code>:title.md</code></td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td><code>poset</code></td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td><code>false</code></td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td><code>false</code></td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td><code>true</code></td></tr><tr><td><code>external_link.enable</code></td><td>在新标签也中打开链接</td><td><code>true</code></td></tr><tr><td><code>external_link.field</code></td><td>对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td><td><code>site</code></td></tr><tr><td><code>external_link.exclude</code></td><td>需要排除的域名。主域名和子域名如<code>www</code>需分别配置</td><td><code>[]</code></td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为（1）小写或（2）大写</td><td><code>0</code></td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td><code>false</code></td></tr><tr><td><code>post_asset_folder</code></td><td>启动Asset文件夹</td><td><code>false</code></td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对地址</td><td><code>false</code></td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td><code>true</code></td></tr><tr><td><code>highlight</code></td><td>代码块的设置</td><td></td></tr><tr><td><code>prismjs</code></td><td>代码块的设置</td></tr></tbody></table></div><blockquote><p><strong>相对地址</strong></p><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果你的网站域名为<code>example.com</code>，你有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是绝对于域名的。相对链接这样：<code>/hello.html</code>，也就是说无论用什么访问该站点，都没有关系，这在反向代理时可能用到，通常情况下，建议使用绝对地址。</p></blockquote><h3 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类&amp;标签"></a>分类&amp;标签</h3><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td><code>uncategorized</code></td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td></tr></tbody></table></div><h3 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期/时间格式"></a>日期/时间格式</h3><p>Hexo使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD</code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>HH:mm:ss</code></td></tr><tr><td><code>updated_option</code></td><td>当Front Matter中没有指定<code>updated</code>时<code>updated</code>的取值</td><td><code>mtime</code></td></tr></tbody></table></div><blockquote><p><strong>updated_option</strong></p><p><code>updated_option</code>控制了当Front Matter中没有指定<code>updated</code>时，<code>updated</code>如何取值：</p><ul><li><code>mtime</code>: 使用文件的最后修改时间。这是从Hexo 3.0.0 开始的默认行为。</li><li><code>date</code>: 使用<code>date</code>作为<code>updated</code>的值。可被用于Git工作流之中，因为使用Git管理站点时，文件的最后修改日期常常会发生改变。</li><li><code>empty</code>: 直接删除<code>updated</code>。使用这一选项可能会导致大部分主题和插件无法正常工作。</li></ul><p><code>use_date_for_updated</code>选项已经被废弃，建议改为使用<code>updated_option: date</code></p></blockquote><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_apge</code></td><td>每页显示的文章两（0 = 关闭分页功能）</td><td><code>10</code></td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table></div><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td><code>theme_config</code></td><td>主题的配置文件。在这里放置的配置会覆盖主题目录下的<code>_config.yml</code>中的配置</td></tr><tr><td><code>deploy</code></td><td>配置部分的设置</td></tr><tr><td><code>meta_generator</code></td><td>Meta generator 标签。值为<code>false</code>时Hexo不会在头部插入该标签</td></tr></tbody></table></div><h4 id="包括或不包括目录和文件"><a href="#包括或不包括目录和文件" class="headerlink" title="包括或不包括目录和文件"></a>包括或不包括目录和文件</h4><p>在Hexo配置文件中，通过设置 <code>include/exclude</code>可以让Hexo进行处理或忽略某些目录和文件夹。你可以使用<a href="https://github.com/isaacs/minimatch">glob 表达式</a> 对目录和文件进行匹配。</p><p><code>include</code>和<code>exclude</code>选项，仅应用于<code>source/</code>文件夹下。<code>ignore</code>选项应用于所有文件夹。</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>include</code></td><td>Hexo默认会忽略隐藏文件和文件夹（包括名称以下划线和<code>.</code>开头的文件和文件夹，Hexo的<code>_posts</code>和<code>_data</code>等目录除外），通过设置此字段将使Hexo处理他们并将他们复制到<code>source</code>目录下</td></tr><tr><td><code>exclude</code></td><td>Hexo会忽略这些文件和目录</td></tr><tr><td><code>ignore</code></td><td>Ignore files/folders</td></tr></tbody></table></div><p>例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Include/Exclude Files/Folders</span><span class="token key atrule">include</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">".nojekyll"</span>  <span class="token comment"># 包括 'source/css/_typing.css'</span>  <span class="token punctuation">-</span> <span class="token string">"css/_typing.css"</span>  <span class="token comment"># 包括 'source/_css/' 中的任何文件，但不包括子目录及其其中的文件。</span>  <span class="token punctuation">-</span> <span class="token string">"_css/*"</span>  <span class="token comment"># 包含 'source/_css/' 中的任何文件和子目录下的任何文件</span>  <span class="token punctuation">-</span> <span class="token string">"_css/**/*"</span><span class="token key atrule">exclude</span><span class="token punctuation">:</span>  <span class="token comment"># 不包括 'source/js/test.js'</span>  <span class="token punctuation">-</span> <span class="token string">"js/test.js"</span>  <span class="token comment"># 不包括 'source/js/' 中的文件、但包括子目录下的所有目录和文件</span>  <span class="token punctuation">-</span> <span class="token string">"js/*"</span>  <span class="token comment"># 不包括 'source/js/' 中的文件和子目录下的任何文件</span>  <span class="token punctuation">-</span> <span class="token string">"js/**/*"</span>  <span class="token comment"># 不包括 'source/js/' 目录下的所有文件名以 'test' 开头的文件，但包括其它文件和子目录下的单文件</span>  <span class="token punctuation">-</span> <span class="token string">"js/test*"</span>  <span class="token comment"># 不包括 'source/js/' 及其子目录中任何以 'test' 开头的文件</span>  <span class="token punctuation">-</span> <span class="token string">"js/**/test*"</span>  <span class="token comment"># 不要用 exclude 来忽略 'source/_posts/' 中的文件。你应该使用 'skip_render'，或者在要忽略的文件的文件名之前加一个下划线 '_'</span>  <span class="token comment"># 在这里配置一个 - "_posts/hello-world.md" 是没有用的。</span><span class="token key atrule">ignore</span><span class="token punctuation">:</span>  <span class="token comment"># Ignore any folder named 'foo'.</span>  <span class="token punctuation">-</span> <span class="token string">"**/foo"</span>  <span class="token comment"># Ignore 'foo' folder in 'themes/' only.</span>  <span class="token punctuation">-</span> <span class="token string">"**/themes/*/foo"</span>  <span class="token comment"># Same as above, but applies to every subfolders of 'themes/'.</span>  <span class="token punctuation">-</span> <span class="token string">"**/themes/**/foo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列表中的每一项都必须用单引号或双引号包裹起来。</p><p><code>include</code>和<code>exclude</code>并不适用于<code>themes/</code>目录下的文件。如果需要忽略<code>themes/</code>目录下的部分文件或文件夹，可以使用<code>ignore</code>或在文件名之前添加<code>_</code>。</p><h3 id="使用代替配置文件"><a href="#使用代替配置文件" class="headerlink" title="使用代替配置文件"></a>使用代替配置文件</h3><p>可以在<code>`hexo-cli</code>中使用<code>--config</code>参数来指定自定义配置文件的路径。你可以使用一个<code>yaml</code>或<code>json</code>文件的路径，也可以使用都好分割（无空格）的多个<code>yaml</code>或<code>json</code>文件的路径。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># user 'custom.yml' in place of '_config.yml'</span>$ hexo server --config custom.yml<span class="token comment"># use 'custom.yml' &amp; 'custom2.json' , prioritizing 'custom3.yml' then 'custom2.json'</span>$ hexo generate --config custom.yml,custom2.json,custom3.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你指定了多个配置文件以后，Hexo会按顺序将这部分配置文件合成一个<code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则使用于任意数量、任意深度的<code>yaml</code>和<code>json</code>文件。</p><p>例如，使用<code>--options</code>指定了两个自定义配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate --config custom.yml,custom2.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果<code>custom.yml</code>中指定了<code>foo:bar</code>，在<code>custom2.json</code>中指定了<code>"foo":"dinosaur"</code>，那么在<code>_multiconfig.yml</code>中你会得到<code>foo:dinosaur</code>。</p><h3 id="使用代替主题配置文件"><a href="#使用代替主题配置文件" class="headerlink" title="使用代替主题配置文件"></a>使用代替主题配置文件</h3><p>通常情况下，Hexo主题是一个独立的项目，并拥有一个独立的<code>_config.yml</code>配置文件。除了自行维护独立的主题配置文件，你也可以在其他地方对主题进行配置。</p><h4 id="配置文件中的theme-config"><a href="#配置文件中的theme-config" class="headerlink" title="配置文件中的theme_config"></a>配置文件中的<code>theme_config</code></h4><blockquote><p>该特性自 Hexo 2.8.2 起提供</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># _config.yml</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">"my-theme"</span><span class="token key atrule">theme_config</span><span class="token punctuation">:</span><span class="token key atrule">bio</span><span class="token punctuation">:</span> <span class="token string">"My awesome bio"</span><span class="token key atrule">foo</span><span class="token punctuation">:</span><span class="token key atrule">bar</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># themes/my-theme/_config.yml</span><span class="token key atrule">bio</span><span class="token punctuation">:</span> <span class="token string">"Some generic bio"</span><span class="token key atrule">logo</span><span class="token punctuation">:</span> <span class="token string">"a-cool-image.png"</span><span class="token key atrule">foo</span><span class="token punctuation">:</span> <span class="token key atrule">baz</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终主题配置的输出时：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">{</span><span class="token key atrule">bio</span><span class="token punctuation">:</span> <span class="token string">"My awesome bio"</span><span class="token punctuation">,</span><span class="token key atrule">logo</span><span class="token punctuation">:</span> <span class="token string">"a-cool-image.png"</span><span class="token punctuation">,</span>foo<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token key atrule">bar</span><span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span><span class="token key atrule">baz</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="独立的-config-theme-yml文件"><a href="#独立的-config-theme-yml文件" class="headerlink" title="独立的 _config.[theme].yml文件"></a>独立的 <code>_config.[theme].yml</code>文件</h4><blockquote><p>该特性自Hexo 5.0.0 起提供</p></blockquote><p>独立的主题配置文件应放置于站点根目录下，支持<code>yml</code>或<code>json</code>格式。需要配置站点<code>_config.yml</code>文件中的<code>theme</code>以供Hexo寻找<code>_config.[theme].yml</code>文件。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># _config.yml</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">"my-theme"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># _config.my-theme.yml</span><span class="token key atrule">bio</span><span class="token punctuation">:</span> <span class="token string">"My awesome bio"</span><span class="token key atrule">foo</span><span class="token punctuation">:</span><span class="token key atrule">bar</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># themes/my-theme/_config</span><span class="token key atrule">bio</span><span class="token punctuation">:</span> <span class="token string">"Some Generic bio"</span><span class="token key atrule">logo</span><span class="token punctuation">:</span> <span class="token string">"a-cool-image.png"</span><span class="token key atrule">foo</span><span class="token punctuation">:</span><span class="token key atrule">baz</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终主题配置的输出是：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">{</span><span class="token key atrule">bio</span><span class="token punctuation">:</span> <span class="token string">"My awesome bio"</span><span class="token punctuation">,</span><span class="token key atrule">logo</span><span class="token punctuation">:</span> <span class="token string">"a-cool-image.png"</span><span class="token punctuation">,</span>foo<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token key atrule">bar</span><span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span><span class="token key atrule">baz</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们强烈建议你将所有的主题配置集中在一处。如果你不得不在多处配置你的主题，那么这些信息对你将会非常有用：Hexo在合并主题配置时，Hexo配置文件中的<code>theme_config</code>的优先级最高，其次是<code>_config.[theme].yml</code>文件，最后是位于主题目录下的<code>_config.yml</code>文件。</p></blockquote><h2 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建一个网站。如果没有设置<code>&lt;folder&gt;</code>，Hexo默认在当前的文件夹建立网站。</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建一篇文章。</p><p>如果没有设置<code>layout</code>的话，默认使用<code>_config.yml</code>中的<code>default_layout</code>参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"post title with whitespace"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>，<code>--path</code></td><td>自定义新文章的路径</td></tr><tr><td><code>-r</code>，<code>--replace</code></td><td>如果存在同名文章，将其替换</td></tr><tr><td><code>-s</code>，<code>--slug</code></td><td>文章的Slug，作为新文章的文件名和发布后的URL</td></tr></tbody></table></div><p>默认情况下，Hexo会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo会创建一个义标题为名字的目录，并在目录中放置一个<code>index.md</code>文件。你可以使用<code>--path</code>参数来覆盖上述行为、自行决定文件的目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page --path about/me <span class="token string">"About me"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上命令会创建一个<code>source/about/me.md</code>文件，同时Front Matter中的<code>&lt;title&gt;</code>为<code>"About me"</code></p><p><strong>注意</strong>：title时必须指定的!如果你这么做并不能达到你的目的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page --path about/me<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时Hexo会创建一个<code>source/about/me.md</code>文件，同时<code>me.md</code>的 Front Matter中的title 为 <code>“page”</code>。这是因为在上述命令中，<code>hexo-cli</code>将<code>page</code>视为指定文章的标题、并采用默认的<code>layout</code>。</p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成静态文件。</p><div class="table-container"><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>，<code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>，<code>--watch</code></td><td>监视文件变动</td></tr><tr><td><code>-b</code>，<code>--bail</code></td><td>生成过程中如果发生任何为处理的异常则抛出异常</td></tr><tr><td><code>-f</code>，<code>--force</code></td><td>强制重新生成文件，Hexo引入了差分机制，如果<code>public</code>目录存在，那么<code>hexo g</code>只会重新生成改动的文件。使用该参数效果接近<code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td><code>-c</code>，<code>--concurrency</code></td><td>最大同时生成的文件数量，默认无限制</td></tr></tbody></table></div><p>该命令可以简写为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发表草稿</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动服务器。默认情况下，访问网址为：<code>http://localhost:4000</code>。</p><div class="table-container"><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>，<code>--port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>，<code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>，<code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table></div><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署网站。</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>，<code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table></div><p>改命令可以简写为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo render <span class="token operator">&lt;</span>file<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染文件。</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-o</code>，<code>--output</code></td><td>设置输出路径</td></tr></tbody></table></div><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo migrate <span class="token operator">&lt;</span>type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从其他博客系统迁移内容。</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清楚缓存文件(<code>db.json</code>)和以生成的静态文件(<code>public</code>)。</p><p>在某些情况（尤其时更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo list <span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出网站资料。</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示Hexo版本。</p><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo --safe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题是，可以尝试以安全模式重新执行。</p><h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo --debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在终端中显示调试信息并记录到<code>debug.log</code>。当您碰到问题是，可以尝试用调试模式重新执行一次，并提交调试信息到GitHub。</p><h4 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo --silent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>隐藏终端信息。</p><h4 id="自定以配置文件的路径"><a href="#自定以配置文件的路径" class="headerlink" title="自定以配置文件的路径"></a>自定以配置文件的路径</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 custom.yml 代替默认的 _config.yml</span>$ hexo server --config custom.yml<span class="token comment"># 使用 custom.yml 和 custom2.json, 其中 custom2.json 优先级更高</span>$ hexo generate --config custom.yml,custom2.json,custom3.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义配置文件的路径，指定这个参数后将不再使用默认的<code>_config.yml</code>。</p><p>你可以使用一个<code>yaml</code>或<code>json</code>文件的路径，也可以使用逗号分割（无空格）的多个<code>yaml</code>和<code>json</code>文件的路径。例如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 custom.yml 代替默认的 _config.yml</span>$ hexo server --config custom.yml<span class="token comment"># 使用 custom.yml,custom2.json 和 custom3.yml,其中 custom3.yml优先级最高，其次时 custom2.json</span>$ hexo generate --config custom.yml,custom2.json,custom3.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你指定了多个配置文件以后，Hexo会按顺序将这部分配置文件合并成一个<code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则使用于任意数量、任意深度的<code>yaml</code>和<code>json</code>文件。</p><h4 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo --draft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示<code>source/_drafts</code>文件夹中的草稿文章。</p><h4 id="自定以-CWD"><a href="#自定以-CWD" class="headerlink" title="自定以 CWD"></a>自定以 CWD</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo --cwd /path/to/cwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自定义当前工作目录（Current working directory）的路径。</p><h2 id="Hexo-迁移"><a href="#Hexo-迁移" class="headerlink" title="Hexo 迁移"></a>Hexo 迁移</h2><p>首先，是安装插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 其中&lt;arch&gt;表示博客的架构平台</span>$ <span class="token function">npm</span> <span class="token function">install</span> hexo-migrator-<span class="token operator">&lt;</span>arch<span class="token operator">&gt;</span> --save   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插件安装完成后，执行下列命令，从<code>&lt;arch&gt;</code>迁移所有稳占。<code>source</code>可以时文件路径或网址。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo migrate <span class="token operator">&lt;</span>arch<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>source<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><a href="https://hexo.io/zh-cn/docs/migration">https://hexo.io/zh-cn/docs/migration</a></p><footer><strong>参考Hexo官网迁移</strong></footer></blockquote><h2 id="Hexo写作"><a href="#Hexo写作" class="headerlink" title="Hexo写作"></a>Hexo写作</h2><p>你可以执行下列命令来创建一篇新文章或者新的页面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo-GitHub搭建个人博客</title>
      <link href="/posts/29191.html"/>
      <url>/posts/29191.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>操作系统：Window 10</li><li>Node.js</li><li>Hexo</li><li>Git</li><li>一个GitHub帐号</li><li>一个云服务器（可选）</li><li>一个域名（可选）</li></ul><h3 id="安装Chocolatey"><a href="#安装Chocolatey" class="headerlink" title="安装Chocolatey"></a>安装Chocolatey</h3><ol><li><p>以管理员身份运行 Windows PowerShell。</p></li><li><p>将下面的命令行代码输入到 PowerShell中</p> <pre class="line-numbers language-none"><code class="language-none">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>等待完成安装</p></li><li><p>在PowerShell终端中输入 <code>choco</code>或<code>choco -?</code>检测是否安装成功。</p> <blockquote> <span style="font-size:20px"><b>Refrence</b></span>     <br>     <a href="https://chocolatey.org/install):https://chocolatey.org/install">官网</a>     <br>     <a href="https://sitoi.cn/posts/46278.html#Windows-程序包管理器-Chocolatey：一条命令装软件">某位大佬的博客</a> </blockquote></li></ol><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>以<strong>管理员</strong>权限打开<strong>PowerShell</strong>，输入以下的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">choco <span class="token function">install</span> nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="检测nodejs是否安装成功"><a href="#检测nodejs是否安装成功" class="headerlink" title="检测nodejs是否安装成功"></a>检测nodejs是否安装成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改npm源"><a href="#修改npm源" class="headerlink" title="修改npm源"></a>修改npm源</h4><p>由于官方npm源下载的速度太慢，所以我们需要将npm源替换成<strong>淘宝源</strong>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>以管理员权限打开PowerShell，输入以下命令，推荐安装4.1.1版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo@4.1.1 -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><h4 id="安装Git-1"><a href="#安装Git-1" class="headerlink" title="安装Git"></a>安装Git</h4><p>以管理员权限打开PowerShell，输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">choco <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="检测Git是否安装成功"><a href="#检测Git是否安装成功" class="headerlink" title="检测Git是否安装成功"></a>检测Git是否安装成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注册GitHub帐号"><a href="#注册GitHub帐号" class="headerlink" title="注册GitHub帐号"></a>注册GitHub帐号</h3><p>注册地址：<a href="http://github.com/join?source=header">http://github.com/join?source=header</a></p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>创建一个仓库，用于托管博客代码</p><ul><li><p>仓库的命令格式必须为：<code>&lt;用户名&gt;.github.io</code></p></li><li><p><code>Description</code>：描述仓库（选填）</p></li><li><p>勾选<code>Initialize this repository with a README</code> 初始化一个README.md文件。</p></li><li><p>点击<code>Creat repository</code>创建，然后项目就建成了。</p><p>  <img src="/posts/29191/Create-Repository.png" alt="Create Repository"></p></li></ul><h3 id="访问你的个人网站"><a href="#访问你的个人网站" class="headerlink" title="访问你的个人网站"></a>访问你的个人网站</h3><p>打开浏览器，输入网站：<code>&lt;用户名&gt;.github.com</code>，例如`pantsuit.github.io</p><p><img src="/posts/29191/GitHub-Page.png" alt="Github Page"></p><h3 id="为GitHub配置SSh-Key"><a href="#为GitHub配置SSh-Key" class="headerlink" title="为GitHub配置SSh Key"></a>为GitHub配置SSh Key</h3><h4 id="打开-GitBash"><a href="#打开-GitBash" class="headerlink" title="打开 GitBash"></a>打开 GitBash</h4><p>在Window桌面上，鼠标右击，选择Git Bash Here，打开Git Bash：</p><p> <img src="/posts/29191/mouse-hit-for-git-bash.png" alt="Open Git Bash"></p><p><img src="/posts/29191/git-bash.png" alt="Git Bash"></p><h4 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h4><p>输入以下命令，其中<code>email@email.com</code>填入为你自己的邮箱。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"email@email.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将SSH-Key-添加到GitHub"><a href="#将SSH-Key-添加到GitHub" class="headerlink" title="将SSH Key 添加到GitHub"></a>将SSH Key 添加到GitHub</h4><ol><li>点击头像，进入Setting页面</li><li>点击 <code>SSH and GPG keys</code>，进入<code>ssh and GPG keys</code>管理页面</li><li>添加SSH Key</li></ol><p><img src="/posts/29191/add-ssh-key.png" alt="Add ssh key"></p><p>​    4.输入生成的公钥（以.pub文件结尾的文件），并点击添加。</p><p><img src="/posts/29191/input-ssh-key.png" alt="input ssh public key"></p><h4 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h4><p>打开Git Bash 输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="初始化Hexo-项目"><a href="#初始化Hexo-项目" class="headerlink" title="初始化Hexo 项目"></a>初始化Hexo 项目</h3><p>选择一个目录，在当前目录打开命令行窗口，输入如下命令:<code>hexo init &lt;directoryname&gt;</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init asd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果文件夹不存在，会创建该文件夹。运行命令后，会将Hexo 的初始化文件下载到该目录。包括<code>themes</code>、<code>scaffolds</code>、<code>source</code>等文件夹。</p><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>切换到hexo博客根目录，运行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动hexo博客"><a href="#启动hexo博客" class="headerlink" title="启动hexo博客"></a>启动hexo博客</h3><p>运行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h3><p>打开浏览器，输入地址 <a href="http://localhost:4000/">http://localhost:4000/</a> 看到下面的效果，说明你得博客构建成功了。</p><p><img src="/posts/29191/blog_init.png" alt="Blog Init"></p><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><h4 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h4><h5 id="安装hexo-deployer-git-插件"><a href="#安装hexo-deployer-git-插件" class="headerlink" title="安装hexo-deployer-git 插件"></a>安装hexo-deployer-git 插件</h5><p>切换到Hexo博客项目目录，运行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改 _config.yml文件"></a>修改 _config.yml文件</h5><p>配置站点信息</p><p><img src="/posts/29191/hexo_config.png" alt="Hexo Config"></p><p>添加部署信息</p><p>修改前：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改后：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/PANTSUIT/PANTSUIT.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="部署项目到GitHub"><a href="#部署项目到GitHub" class="headerlink" title="部署项目到GitHub"></a>部署项目到GitHub</h5><p>修改好配置后，运行如下命令，将代码部署到GitHub</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo genreatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="查看部署情况"><a href="#查看部署情况" class="headerlink" title="查看部署情况"></a>查看部署情况</h5><p>打开浏览器访问 <a href="https://pantsuit.github.io">https://pantsuit.github.io</a> 这时我们就可以看到跟本地一模一样的博客内容了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
